#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****



##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   29/04/2019                                                        #
#                                                                            #
# Fait par :    JM 		                                        	         #
#                                                                            #
# Action : Processus copie du cube Assign vers SLS_FR_COST_PLAN				  	 #
#           																 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#


#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_ASSIGN';
C_Cube_Cible = 'SLS_FR_COST_PLAN';


#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_Version = 'SLS_VERSION';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_CUSTOMER = 'SLS_CUSTOMER';
D_LINE = '1_G_LINE';
D_ASSIGN_IND='SLS_ASSIGN_IND';
D_MAT_FREIGHT_GROUP='SLS_MAT_FREIGHT_GROUP';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR';
D_FR_COST_PLAN_IND = 'SLS_FR_COST_PLAN_IND';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
err_Data = 0;
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');


########## STOP le process si incohérence volume affecté VS volume prev
ExecuteProcess( 'SLS_CAL_CUB_SLS_ASSIGN_CHECK_VOL_PREV_ASSIGNED');
message_err_prolog = CellGetS('zPARAM', 'zControl_Assigned_Vol', 'Value');
If(message_err_prolog @<> '');
	err_prolog = 1;
	#asciioutput('..\Tests\control_master.csv', 'vide', message_err_prolog);
    ########### MIS EN COMMENTAIRE PROVISOIREMENT#############
	#ProcessBreak;
EndIf;


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Source;
DatasourceCubeview=view_copy;

# Récupération de la phase en cours et des paramètres de cette phase
P_Phase = CellGetS('zSelect', vClient ,'Current Phase');
#PARAMETRES
If(P_logistics = 1);
	P_Sales_org = CellGetS('zSelect', vClient ,'Sales Organisation Logistics');
	P_Distrib_Channel = CellGetS('zSelect', vClient ,'Distribution Channel Logistics');
Else;
	P_Sales_org = CellGetS('zSelect', vClient ,'Sales Organisation');
	P_Distrib_Channel = CellGetS('zSelect', vClient ,'Distribution Channel');
EndIf;

If(p_Sales_org @= ''); 
	p_Sales_org = 'TOTAL SALES ORG';
EndIf;
If(p_Distrib_Channel @= ''); 
	p_Distrib_Channel = 'TOTAL_DISTRIB_CHANNEL';
EndIf;


As_Temporary = 1 ;
#--------------------Création des objets Source--------------------#
ViewDestroy( C_Cube_Source, view_copy );
ViewCreate(C_Cube_Source ,view_copy, As_Temporary );
# 1_G_CURRENT_PHASE
SubsetDestroy( D_CURRENT_PHASE, subset_copy );
subsetcreate(D_CURRENT_PHASE,subset_copy ,As_Temporary);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, P_Phase, 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);

# SLS_VERSION
SubsetDestroy( D_Version, subset_copy );
subsetcreate(D_VERSION,subset_copy ,As_Temporary);
SubsetElementInsert(D_VERSION, subset_copy, 'FV', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_VERSION,subset_copy);

# 1_G_SALES_ORG
SubsetDestroy( D_SALES_ORG, subset_copy );
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_SALES_ORG, As_Temporary);
SubsetElementDelete( D_SALES_ORG, subset_copy, 1);

ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);

# 1_G_DISTRIB_CHANNEL
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib_Channel |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_DISTRIB_CHANNEL, As_Temporary);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_copy, 1 );

ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);

# D_ASSIGN_IND
SubsetDestroy(D_ASSIGN_IND, subset_copy);
subsetcreate( D_ASSIGN_IND,subset_copy ,As_Temporary);
SubsetElementInsert( D_ASSIGN_IND, subset_copy, 'ASSIGN_VOL', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_ASSIGN_IND,subset_copy);

 
#--------------------Suppression des cellules vides, consolidées, calculées pour la vue source--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);




#--------------------Création des objets cible--------------------#
ViewDestroy( C_Cube_Cible, view_erase );
ViewCreate(C_Cube_cible ,view_erase, As_Temporary );
# 1_G_CURRENT_PHASE
SubsetDestroy( D_CURRENT_PHASE, subset_erase );
subsetcreate(D_CURRENT_PHASE,subset_erase ,As_Temporary);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase, P_Phase, 1);
ViewSubsetAssign(C_Cube_cible,view_erase, D_CURRENT_PHASE,subset_erase);
# 1_G_SALES_ORG
SubsetDestroy(D_SALES_ORG, subset_erase);
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_SALES_ORG, As_Temporary);
SubsetElementDelete( D_SALES_ORG, subset_erase, 1);

ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_ORG,subset_erase);

# 1_G_DISTRIB_CHANNEL
SubsetDestroy( D_DISTRIB_CHANNEL, subset_erase );
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib_Channel |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_DISTRIB_CHANNEL, As_Temporary);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_erase, 1 );

ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);


# SLS_FR_COST_PLAN_IND
SubsetDestroy(D_FR_COST_PLAN_IND, subset_erase);
subsetcreate(D_FR_COST_PLAN_IND,subset_erase ,As_Temporary);
SubsetElementInsert(D_FR_COST_PLAN_IND, subset_erase, 'SLS_VOL', 1);
SubsetElementInsert(D_FR_COST_PLAN_IND, subset_erase, 'inco', 1);
SubsetElementInsert(D_FR_COST_PLAN_IND, subset_erase, 'inco_point', 1);
ViewSubsetAssign(C_Cube_cible,view_erase, D_FR_COST_PLAN_IND,subset_erase);


ViewZeroOut( C_Cube_cible,view_erase);



#-------Creation d'un sous ensemble pour la dimension SLS_ASSIGN_IND
V_S_TEMPORARY_NAME =  'Assign_IND_' | vUSER |'_' | vPRO_NAME;
sDimName = 'SLS_ASSIGN_IND';
sMDX = '{TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [' | sDimName | '] )}, [' | sDimName | '].[Type_indicateur] = ''Prix_unit'' )}, 0)}';
SubsetDestroy(sDimName, V_S_TEMPORARY_NAME);
SubsetCreatebyMDX( V_S_TEMPORARY_NAME, sMDX , As_Temporary );
nSubsetSize = SubsetGetSize( sDimName, V_S_TEMPORARY_NAME);
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

v_ShipPoint = CellGetS( C_Cube_Source,v_Current_Phase ,v_SLS_VERSION ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_PLAN,v_SLS_CUSTOMER,v_G_Line,'SHIP_PT' ) ;
v_ShipPlant = CellGetS( C_Cube_Source,v_Current_Phase ,v_SLS_VERSION ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_PLAN,v_SLS_CUSTOMER,v_G_Line,'SHIP_PLANT' ) ;
v_ProdPlant = CellGetS( C_Cube_Source,v_Current_Phase ,v_SLS_VERSION ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_PLAN,v_SLS_CUSTOMER,v_G_Line,'PROD_PLANT' ) ;
v_Vendor = CellGetS( C_Cube_Source,v_Current_Phase ,v_SLS_VERSION ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_PLAN,v_SLS_CUSTOMER,v_G_Line,'VENDOR' ) ;

#Si la comb log n'est pas renseignée
If(v_ShipPoint @= '' % v_ShipPlant @= '' % v_ProdPlant @= '' % v_Vendor @= '' );
	err_Data = 1;
    #asciioutput('..\TEsts\ecart_itemskip.csv', numbertostring(value));
    itemskip;
EndIf;


v_SLS_MAT_FREIGHT_GROUP= CELLGETS( 'zMAT_FR_GRP' ,v_SLS_MATERIAL_PLAN,v_ShipPlant ,'MAT_FR_GROUP') ;


if ( v_SLS_MAT_FREIGHT_GROUP @= '' ) ; 
	v_SLS_MAT_FREIGHT_GROUP = 'N/A_MAT_FR_GROUP';
endif ; 
CellIncrementN( Value ,C_Cube_Cible,v_Current_Phase , v_G_Period,v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_PLAN ,v_SLS_CUSTOMER,v_SLS_MAT_FREIGHT_GROUP,v_ShipPoint,v_ShipPlant,v_ProdPlant ,v_Vendor,'SLS_VOL');


vIncoterm = ATTRS ( 'SLS_Customer' , v_SLS_CUSTOMER , 'Incoterm' ) ;
vIncoterm_point =  ATTRS ( 'SLS_Customer' , v_SLS_CUSTOMER , 'Incoterm2' ) ;

CellPutS ( vIncoterm ,  C_Cube_Cible,v_Current_Phase ,'N/A PERIOD',v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_PLAN ,v_SLS_CUSTOMER,v_SLS_MAT_FREIGHT_GROUP,v_ShipPoint,'N/A_SHIP_PLANT','N/A_PROD_PLANT' ,'N/A_VENDOR','inco');
CellPutS ( vIncoterm_point ,  C_Cube_Cible,v_Current_Phase ,'N/A PERIOD',v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_PLAN ,v_SLS_CUSTOMER,v_SLS_MAT_FREIGHT_GROUP,v_ShipPoint,'N/A_SHIP_PLANT','N/A_PROD_PLANT' ,'N/A_VENDOR','inco_point');
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#Gestion erreur prologue
If(err_Prolog = 1);
####MIS EN COMMENTAIRE PROVISOIREMENT ####""
	#itemreject(message_err_prolog);
EndIf;

#mettre une variable dans Data si comb log vide, mettre à 1 et itemskip la ligne
#si variable = 1
# If(err_Data = 1);
	#asciioutput('..\Tests\err_comb_log.csv', 'Fail');
    #CellPutS('Error : please fill all logistical combinations.', 'zPARAM', 'zControl_Assigned_Vol', 'Value');
    
    ####MIS EN COMMENTAIRE PROVISOIREMENT ####""
	#ProcessRollback();
# Else;
	ExecuteProcess ( 'SLS_COP_CUB_SLS_FR_COST_PLAN_CUB_SLS_ASSIGN_PRIX' ,'p_Distrib_Channel' ,p_Distrib_Channel , 'p_Sales_org', p_Sales_org ,'p_Phase', p_Phase ) ; 
# EndIf;

ExecuteProcess ( 'SLS_CREATE_TRANSPORTEUR_PICKLIST_SLS_FR_COST_PLAN');
#endregion