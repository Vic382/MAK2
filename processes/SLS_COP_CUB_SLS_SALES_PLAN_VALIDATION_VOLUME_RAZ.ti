#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

################################################################
#   DESCRIPTION DU PROCESSUS                                             
#                                                                                                                                                  
# Date :   10/03/2023                                                                                                               
#                                                                                                                                                  
# Fait par : Dimo Software - VRT                                                                                               
#                                                                                                                                                  
# Action : Suppression des données dans le cube SLS_SALES_PLAN         
# après saisie des volumes des commerciaux                                                                             
# Suppression des éléments alimenté par l'init si pas de volume saisie
#
#################################################################


#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();

sUser = TM1User;

# Suppression des vues raz et source
# 1 => Suppression des vues
# 0 => Non suppression des vues
nDebug = 1 ;


#--------------------Cubes--------------------#

# Cube technique

sCubeProcess = 'zPROCESS_ADMINISTRATION';
sCubeSelect = 'zSELECT';


#------------Elements variabilisés------------#

# Récupération des paramètres dans le cube zSelect
sCurr_Phase = CellGetS( 'zSELECT', sUser , 'Current Phase Sales' ) ;
sSales_Group = CellGetS( 'zSELECT', sUser , 'Sales Group' ) ;
sYear_Type = CellGetS( 'zSELECT', sUser , 'Current_Year_Type' ) ;
sSales_Org = CellGetS( 'zSELECT', sUser , 'Sales org' ) ;
sDivision = CellGetS( 'zSELECT', sUser , 'Division' ) ;
sCustomer_IC = CellGetS( 'zSELECT', sUser , 'Customer_IC' ) ;
sCountry = CellGetS( 'zSELECT', sUser , 'Customer_Country' ) ;


#------------Redifinition du paramètre------------#

# Des éléments sont en dur dans les vues selon les livres WS
# Création d'un paramètre définit par défaut dans les boutons WS
# Sert a identifier le livre sur lequel le bouton a été exécuté
# Permet de définir l'élément de la dimension 1_G_DISTRIB_CHANNEL et VOLUME_UNIT

IF ( pBook @= '02' ) ;
  sDistrib_Channel = '20' ;
ELSEIF ( pBook @= '04' ) ;
  sDistrib_Channel = '20' ;
  sVolume_Unit = 'HLAP' ;
ELSEIF ( pBook @= '05' ) ;
  sDistrib_Channel = '40' ;
    sVolume_Unit = 'TO' ;
ENDIF ;

#--------------------Vues--------------------#
sVueSource = 'Source_vue_' | Today (0) | '_' | GetProcessName () ; 
sVueCible = 'Cible_vue_' | Today (0) | '_' | GetProcessName () ; 

#--------------------Sous-ensembles--------------------#
sSubsetSource = 'Source_Subset_' | Today (0) | '_' | GetProcessName () ; 
sSubsetCible = 'Cible_Subset_' | Today (0) | '_' | GetProcessName () ;

###########################################
## Creation vue source
###########################################

sCubeSource = 'SLS_SALES_PLAN' ;

sDimSource1 = '1_G_CURRENT_PHASE' ;
sDimSource2 = '1_G_PERIOD' ;
sDimSource3 = '1_G_SALES_ORG' ;
sDimSource4 = '1_G_DISTRIB_CHANNEL' ;
sDimSource5 = '1_G_CURRENCY' ;
sDimSource6 = '1_G_VOLUME_UNIT' ;
sDimSource7 = 'SLS_CUSTOMER' ;
sDimSource8 = 'SLS_MATERIAL_PLAN' ;
sDimSource9 = 'SLS_SALES_GROUP' ;
sDimSource = 'SLS_SALES_PLAN_IND' ;


# Redéfinition des variables pour travailler avec les codes des éléments 
sCurr_Phase = DimensionElementPrincipalName( sDimSource1 , sCurr_Phase );
sSales_Org = DimensionElementPrincipalName( sDimSource3 , sSales_Org );
sCustomer_IC = DimensionElementPrincipalName( sDimSource7 , sCustomer_IC );
sDivision = DimensionElementPrincipalName( sDimSource8 , sDivision );
sSales_Group = DimensionElementPrincipalName( sDimSource9 , sSales_Group );

# Destruction pour recréation de la vue
ViewDestroy ( sCubeSource , sVueSource ) ;
ViewCreate ( sCubeSource , sVueSource , nDebug ) ;

# 1_G_CURRENT_PHASE
SubsetDestroy ( sDimSource1 , sSubsetSource ) ;
SubsetCreate ( sDimSource1 , sSubsetSource , nDebug ) ;
SubsetElementInsert ( sDimSource1 , sSubsetSource , sCurr_Phase , 1 ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource1 , sSubsetSource );


#1_G_PERIOD
# On utilise le subset présent dans la vue créé par MDX
# Il est variabilisé selon le cube zSelect et selon la période de saisie ouverte
sSubsetPeriod = 'zCurrent_Periods_PAW_Prix' ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource2 , sSubsetPeriod );


#1_G_SALES_ORG
SubsetDestroy ( sDimSource3 , sSubsetSource ) ;

# Si le paramètre est vide on prend tous les éléments
# Sinon le paramètre dans le cube zSelect
SubsetCreate ( sDimSource3 , sSubsetSource , nDebug ) ;
SubsetElementInsert ( sDimSource3 , sSubsetSource , sSales_Org , 1 ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource3 , sSubsetSource );


#1_G_DISTRIB_CHANNEL
SubsetDestroy ( sDimSource4 , sSubsetSource ) ;
SubsetCreate ( sDimSource4 , sSubsetSource , nDebug ) ;
SubsetElementInsert ( sDimSource4 , sSubsetSource , sDistrib_Channel , 1 ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource4 , sSubsetSource );


#1_G_CURRENCY
SubsetDestroy ( sDimSource5 , sSubsetSource ) ;
SubsetCreatebyMDX( sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimSource5 |'] )}, 0)}' , nDebug ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource5 , sSubsetSource );


# 1_G_VOLUME_UNIT
# les livres 04 et 05 sont borné sur un volume_unit spécifique ( définition en ligne 70 )
# le livre 02 est selon une sélection particulière on récupère le subset du livre dans ce cas
IF ( pBook @= '02' ) ;
  sSubsetVolumeUnit = 'B2B_Sugar_Unit' ;
  ViewSubsetAssign( sCubeSource , sVueSource , sDimSource6 , sSubsetVolumeUnit );
ELSE ;
  SubsetDestroy ( sDimSource6 , sSubsetSource ) ;
  SubsetCreate ( sDimSource6 , sSubsetSource , nDebug ) ;
  SubsetElementInsert ( sDimSource6 , sSubsetSource , sVolume_Unit , 1 ) ;
  ViewSubsetAssign( sCubeSource , sVueSource , sDimSource6 , sSubsetSource );
ENDIF ;

#SLS_CUSTOMER
# On utilise le subset présent dans la vue créé par MDX
# Il est variabilisé selon le cube zSelect et est différent selon le livre WS

IF ( pBook @= '02' ) ;
  sSubsetCustomer = 'Customer B2B hors BP' ;
ELSEIF ( pBook @= '04' ) ;
  sSubsetCustomer = 'Customer B2B Alcohol' ;
ELSEIF ( pBook @= '05' ) ;
  sSubsetCustomer = 'Customer Export Sugar' ;
ENDIF ;

ViewSubsetAssign( sCubeSource , sVueSource , sDimSource7 , sSubsetCustomer );

#SLS_MATERIAL_PLAN
SubsetDestroy ( sDimSource8 , sSubsetSource ) ;

# Si le paramètre est vide on prend tous les éléments
# Sinon les enfants niv0 du paramètre dans zSelect
IF ( sDivision @= '' ) ; 
  SubsetCreatebyMDX( sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimSource8 |'] )}, 0)}' , nDebug ) ;
ELSE ;
  SubsetCreatebyMDX( sSubsetSource , '{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1FILTERBYPATTERN( {TM1SUBSETALL( [SLS_MATERIAL_PLAN] )}, "'| sDivision |'")}, ALL, RECURSIVE )}, 0)}' , nDebug ) ;
ENDIF ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource8 , sSubsetSource );

#SLS_SALES_GROUP
SubsetDestroy ( sDimSource9 , sSubsetSource ) ;
SubsetCreate ( sDimSource9 , sSubsetSource , nDebug ) ;
SubsetElementInsert ( sDimSource9 , sSubsetSource , sSales_Group , 1 ) ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource9 , sSubsetSource );

#SLS_SALES_PLAN_IND
SubsetDestroy ( sDimSource , sSubsetSource ) ;

# La liste des indicateurs est variable selon le livre WS
# Le livre 04 n'affiche aucun niveau consolidé on peut donc RAZ seulement les indicateurs affichés
# Les livres 02 et 05 affichent des éléments consolidés il faut donc RAZ tous les enfants des éléments
IF ( pBook @= '02' ) ;
  # Récupération des descendants de SLS_VOL et 3NET_UNIT
  SubsetCreatebyMDX( sSubsetSource , 'UNION ( {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1FILTERBYPATTERN( {TM1SUBSETALL( ['| sDimSource |'] )}, "3NET_UNIT")}, ALL, RECURSIVE )}, 0)} , {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1FILTERBYPATTERN( {TM1SUBSETALL( ['| sDimSource |'] )}, "SLS_VOL")}, ALL, RECURSIVE )}, 0)} )', nDebug ) ;
ELSEIF ( pBook @= '04' ) ;
  SubsetCreate ( sDimSource , sSubsetSource ) ;
  SubsetElementInsert ( sDimSource , sSubsetSource , 'BASE_UNIT' , 1 ) ;
  SubsetElementInsert ( sDimSource , sSubsetSource , 'CUST_REBATE_UNIT' , 2 ) ;
  SubsetElementInsert ( sDimSource , sSubsetSource , 'VOL' , 3 ) ;
ELSEIF ( pBook @= '05' ) ;
  # Récupération des descendants de SLS_VOL et INV_VAL_UNIT
  SubsetCreatebyMDX( sSubsetSource , 'UNION ( {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1FILTERBYPATTERN( {TM1SUBSETALL( ['| sDimSource |'] )}, "INV_VAL_UNIT")}, ALL, RECURSIVE )}, 0)} , {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {TM1FILTERBYPATTERN( {TM1SUBSETALL( ['| sDimSource |'] )}, "SLS_VOL")}, ALL, RECURSIVE )}, 0)} )', nDebug ) ;
ENDIF ;
ViewSubsetAssign( sCubeSource , sVueSource , sDimSource , sSubsetSource );

# Pas de vue de RAZ car le processus ne copie pas de données

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 1  );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1  );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 1  );

#Définition de la source
DataSourceNameForServer = sCubeSource ;
DatasourceCubeView = sVueSource ;

#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

# Initialisation de la boucle sur le subset 1_G_PERIOD

nTailleBoucle = SubsetGetSize( sDimSource2 , sSubsetPeriod );
i = 1 ;

# On réinitialise l'increment de controle de la présence des volumes
nCheckVol = 0 ;

While ( i <= nTailleBoucle ) ;

  sPeriod = SubsetGetElementName( sDimSource2 , sSubsetPeriod , i );

  # On récupère les éléments conso pour vérifier si des volumes ont été saisie sur la période complète
  IF ( ELLEV( sDimSource2 , sPeriod ) <> 0 );
    nVol = CellGetN( sCubeSource , v1_G_CURRENT_PHASE , sPeriod , v1_G_SALES_ORG , v1_G_DISTRIB_CHANNEL , v1_G_CURRENCY , v1_G_VOLUME_UNIT , vSLS_CUSTOMER , vSLS_MATERIAL_PLAN , vSLS_SALES_GROUP , 'SLS_VOL' );
  ENDIF ;
  
  # on incrémente une variable pour vérifier si des volumes sont présent car il est possible qu'il y est plusieurs conso
  # Exemple : Campaign 2023 et Campaign 2024. Si des volumes sont présents dans l'un ou l'autre, on ne RAZ pas les données sur la période

  IF ( nVol <> 0 ) ;
    nCheckVol = 1 + nCheckVol ;
    nVol = 0 ;
  ENDIF ;

i = i + 1 ;
  
END ;



# On ne passe que si les volumes dans les consos sont à 0
IF ( nCheckVol = 0 ) ;
    
  # Controle de la possibilité de saisir dans la cellule car des règles sont présentes
  IF ( CellIsUpdateable( sCubeSource , v1_G_CURRENT_PHASE , v1_G_PERIOD , v1_G_SALES_ORG , v1_G_DISTRIB_CHANNEL , v1_G_CURRENCY , v1_G_VOLUME_UNIT , vSLS_CUSTOMER , vSLS_MATERIAL_PLAN , vSLS_SALES_GROUP , vSLS_SALES_PLAN_IND ) = 1 );
    CellPutN ( 0 , sCubeSource , v1_G_CURRENT_PHASE , v1_G_PERIOD , v1_G_SALES_ORG , v1_G_DISTRIB_CHANNEL , v1_G_CURRENCY , v1_G_VOLUME_UNIT , vSLS_CUSTOMER , vSLS_MATERIAL_PLAN , vSLS_SALES_GROUP , vSLS_SALES_PLAN_IND );
  ENDIF ;
  
ENDIF ;



#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion