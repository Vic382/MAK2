#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   30/04/2019                                                        #
#                                                                            #
# Fait par :    JM 		                                        	         #
#                                                                            #
# Action : Processus pour la creation des nouveaux combinaisons logistiques	 #
#           																 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#

##### 29/09/2022 Modif VRT : Ticket 481022 changement des PAX en bouton WS   #######

# Définition des cubes
sCubeSelect = 'zSELECT' ;

# Récupération du User lancant le processus
sUser = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue') ;

# Récupération des éléments dans le cube zSelect
p_Distrib_Channel = CellGetS ( sCubeSelect , sUser , 'Distrib Channel' ) ;
p_Sales_org = CellGetS ( sCubeSelect , sUser , 'Sales org' ) ;

##### Fin 29/09/2022 Modif VRT : Ticket 481022 changement des PAX en bouton WS   #######


#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_NEW_COMBINATION';
C_Cube_Cible = 'SLS_ASSIGN';


#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';

D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_SALES_GROUP= 'SLS_SALES_GROUP';
D_CUSTOMER = 'SLS_CUSTOMER';
D_LINE = '1_G_LINE';
D_COMB_TYPE='SLS_COMB_TYPE';
D_NEW_COMBINATION_IND='SLS_NEW_COMBINATION_IND';

D_MATERIAL_PLAN =' SLS_MATERIAL_PLAN' ; 
D_CUSTOMER='SLS_CUSTOMER' ; 
D_Version = 'SLS_VERSION';
D_ASSIGN_IND = 'SLS_ASSIGN_IND';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

e_message_data = '';
CellPutS('','zPROCESS_ADMINISTRATION', vPRO_NAME, 'Message_Echec', 'Comment');

#--------------------Vues--------------------#
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#--------------------Sous-ensembles--------------------#
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Source;
DatasourceCubeview=view_copy;





As_Temporary = 1;
#--------------------Création des objets Source--------------------#
ViewCreate(C_Cube_Source ,view_copy, As_Temporary );
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy ,As_Temporary);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, 'CURR_PHASE', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);

# 1_G_SALES_ORG

subsetcreate(D_SALES_ORG,subset_copy ,As_Temporary);
SubsetElementInsert(D_SALES_ORG, subset_copy, p_Sales_org, 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);

# 1_G_DISTRIB_CHANNEL

subsetcreate(D_DISTRIB_CHANNEL,subset_copy ,As_Temporary);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy, p_Distrib_Channel, 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);


#SLS_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_copy ,As_Temporary);
SubsetElementInsert(D_SALES_GROUP, subset_copy, 'N/A_SALES_GROUP', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_GROUP,subset_copy);


#SLS_COMB_TYPE
subsetcreate(D_COMB_TYPE ,subset_copy ,As_Temporary);
SubsetElementInsert(D_COMB_TYPE, subset_copy, 'CS_Switch', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_COMB_TYPE,subset_copy);

 
#SLS_NEW_COMBINATION_IND
subsetcreate(D_NEW_COMBINATION_IND ,subset_copy ,As_Temporary);
SubsetElementInsert(D_NEW_COMBINATION_IND, subset_copy, 'Volume', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_NEW_COMBINATION_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées pour la vue source--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);




#-------Creation d'un sous ensemble pour la dimension SLS_ASSIGN_IND 
V_S_TEMPORARY_NAME =  'Assign_IND_' | vUSER |'_' | vPRO_NAME;
sDimName = 'SLS_ASSIGN_IND';
sMDX = '{TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [' | sDimName | '] )}, [' | sDimName | '].[Type_indicateur] = ''Prix_Unit'' )}, 0)}';
SubsetCreatebyMDX( V_S_TEMPORARY_NAME, sMDX , As_Temporary );
nSubsetSize = SubsetGetSize( sDimName, V_S_TEMPORARY_NAME);
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#---------Begin : commentaire sur les variables 
# Comme la source contient que le volume , il faut recuperer la combinaison log et commercial 
#--------End 


v_Customer = CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Customer' ) ;
v_Planning_Material = CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Planning Material' ) ;
v_Shipping_Point =  CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Shipping Point' ) ;
v_Shipping_Plant = CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Shipping Plant' ) ;
v_Production_Plant =  CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Production Plant' ) ;
v_Vendor =  CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Vendor');
v_Target_Material =  CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Target Planning Material');

# VRT : Mise en place contrat indexé
v_Q_HQ = CellGetS( C_Cube_Source,v_Current_Phase  ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel, v_SALES_GROUP,v_G_Line,v_COMB_TYPE,'Standard_Indexe');
# Fin VRT 

#Différents cas d'erreur
If(v_Customer @= '' % v_Planning_Material @= '' % v_Target_Material @= '');
	If(SCAN(v_G_Line, e_Message_Data) = 0);
		e_Message_Data = e_Message_Data | 'An error occured on line ' | v_G_Line | ' : Missing Customer or Planning Material. / ';
    	CellPutS(e_Message_Data,'zPROCESS_ADMINISTRATION', vPRO_NAME, 'Message_Echec', 'Comment');
     EndIf;
ElseIf(v_Shipping_Point @= '' % v_Shipping_Plant @= '' % v_Production_Plant @= '' % v_Vendor @= '');
	If(SCAN(v_G_Line, e_Message_Data) = 0);
		e_Message_Data = e_Message_Data | 'An error occured on line ' | v_G_Line | ' : Incomplete logisticial combination. / ';
    	CellPutS(e_Message_Data,'zPROCESS_ADMINISTRATION', vPRO_NAME, 'Message_Echec', 'Comment');
    EndIf;
Else;
	#Verfication de la combinaison dans le cube Assign
	# le total ligne et total annee nous indique s' il existe des lignes sur la combinaison commerciale 
	vTotal_VolumeAssignPM = CellGetN ( 'SLS_ASSIGN',v_Current_Phase , 'FV', v_Q_HQ , 'CAMP YEAR',v_g_sales_org , v_g_distrib_channel, v_Planning_Material , v_Customer ,'Total_Line','ASSIGN_VOL');
	vTotal_VolumeSalesPM = CellGetN ( 'SLS_ASSIGN',v_Current_Phase , 'FV', v_Q_HQ , 'CAMP YEAR',v_g_sales_org , v_g_distrib_channel, v_Planning_Material , v_Customer ,'Total_Line','SLS_VOL');
EndIf;

error = 1;
#ItemReject(NumberToString(vTotal_VolumeAssignPM) | ' - ' | 'SLS_ASSIGN'| ' - ' |v_Current_Phase | ' - ' | 'FV'| ' - ' |'CAMP YEAR'| ' - ' |v_g_sales_org | ' - ' | v_g_distrib_channel| ' - ' | v_Planning_Material | ' - ' | v_Customer | ' - ' |'Total_Line'| ' - ' |'ASSIGN_VOL');
if ( vTotal_VolumeAssignPM > 0  & SCAN(v_G_Line, e_Message_Data) = 0);

	MyLine ='L1' ;
	MyEmptyLine = '' ;
    
#------------- boucle pour chercher la ligne a saisir pour la combinasion log avec le planning material source 
	while ( MyEmptyLine @= '' & error <> 0) ;
     #modif Ann : si 2 fois la même ligne : première bien détecté mais passe à la 2e en erreur : switch jamais fait.

#------------- recuperation la comb log de la ligne en cours 
		myShip_Pt =  CellGetS ( 'SLS_ASSIGN',v_Current_Phase , 'FV', v_Q_HQ , 'N/A PERIOD',v_g_sales_org , v_g_distrib_channel, v_Planning_Material , v_Customer ,myLine,'SHIP_PT' ) ;
		myShip_Pl =  CellGetS ( 'SLS_ASSIGN',v_Current_Phase , 'FV', v_Q_HQ , 'N/A PERIOD',v_g_sales_org , v_g_distrib_channel,v_Planning_Material  , v_Customer ,myLine,'SHIP_PLANT' ) ;
		myProd_Pt =  CellGetS ( 'SLS_ASSIGN',v_Current_Phase , 'FV', v_Q_HQ , 'N/A PERIOD',v_g_sales_org , v_g_distrib_channel,v_Planning_Material  , v_Customer ,myLine,'PROD_PLANT' ) ;
		myVendor =  CellGetS ( 'SLS_ASSIGN',v_Current_Phase , 'FV', v_Q_HQ , 'N/A PERIOD',v_g_sales_org , v_g_distrib_channel, v_Planning_Material  , v_Customer ,myLine,'Vendor' ) ;
		myvolPM       =   CellGetN ( 'SLS_ASSIGN',v_Current_Phase , 'FV', v_Q_HQ , v_G_PERIOD,v_g_sales_org , v_g_distrib_channel, v_Planning_Material , v_Customer ,myLine,'ASSIGN_VOL' ) ;
#------------- si c'est la meme comb log MAIS le volume actuel est inférieur à ce qu'on veut switcher
       #if ( v_Shipping_Point @= myShip_Pt  & v_Shipping_Plant @= myShip_Pl & v_Production_Plant @= myProd_Pt  & v_Vendor @= myVendor  &  myvolPM < valeur ) ; 
       diff = myvolPM - valeur;
       if ( v_Shipping_Point @= myShip_Pt  & v_Shipping_Plant @= myShip_Pl & v_Production_Plant @= myProd_Pt  & v_Vendor @= myVendor &  diff < -0.001); 
       	##############
        #asciioutput('..\Tests\switch.csv', numbertostring(diff), numbertostring(myvolPM), numbertostring(valeur), v_g_period, v_Planning_Material, v_Customer);
        ###############
           	e_Message_Data = e_Message_Data | 'An error occured on line ' | v_G_Line | ' : Volume to switch is superior to Assigned Volume. ';
    		CellPutS(e_Message_Data,'zPROCESS_ADMINISTRATION', vPRO_NAME, 'Message_Echec', 'Comment');
        #cas qui fonctionne
        elseif ( v_Shipping_Point @= myShip_Pt  & v_Shipping_Plant @= myShip_Pl & v_Production_Plant @= myProd_Pt  & v_Vendor @= myVendor) ;
		 	error = 0;
 		EndIf;


		MyLine = ATTRS ( D_Line , MyLine , 'Ligne_Suivante' ) ;
        if ( myLine @='' ) ; 
        	MyEmptyLine='Finish' ;
        Endif;
	End; 
    
	#gérer le cas où la comb log n'existe pas en source
    If(error = 1 & SCAN(v_G_Line, e_Message_Data) = 0);
		 e_Message_Data = e_Message_Data | 'An error occured on line ' | v_G_Line | ' : This logistical combination does not exist for this source commercial combination. / ';
    	CellPutS(e_Message_Data,'zPROCESS_ADMINISTRATION', vPRO_NAME, 'Message_Echec', 'Comment');   
    EndIf;

#Cas erreur : il n'y a plus d'Assigned Volume sur cette comb mais il y a du Sales Volume
ElseIf(vTotal_VolumeSalesPM > 0 & SCAN(v_G_Line, e_Message_Data) = 0);
	e_Message_Data = e_Message_Data | 'An error occured on line ' | v_G_Line | ' : No volume is assigned to this combination. / ';
    CellPutS(e_Message_Data,'zPROCESS_ADMINISTRATION', vPRO_NAME, 'Message_Echec', 'Comment'); 
    
#Cas erreur : il n'y a plus pas du tout cette combinaison
ElseIf(SCAN(v_G_Line, e_Message_Data) = 0);
    e_Message_Data = e_Message_Data | 'An error occured on line ' | v_G_Line | ' : This logistical combination does not exist for this source commercial combination. / ';
    CellPutS(e_Message_Data,'zPROCESS_ADMINISTRATION', vPRO_NAME, 'Message_Echec', 'Comment');
    #asciioutput('..\tests\pas_de_comb.csv', v_Planning_Material , v_Customer, v_g_period,v_Shipping_Point, v_Shipping_Plant, v_Production_Plant, v_Vendor, numbertostring(vTotal_VolumeAssignPM), NumberToString( vTotal_VolumeSalesPM ));

Endif ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

If(e_message_Data @= '');
	ExecuteProcess('SLS_CAL_CUB_SLS_ASSIGN_SWITCH_MAT_ERROR', 'p_sales_org', p_sales_org, 'p_distrib_channel', p_distrib_channel);
Else;
itemreject(e_message_data);
EndIf;
#endregion