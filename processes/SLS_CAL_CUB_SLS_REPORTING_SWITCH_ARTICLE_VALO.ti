#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



################################################################
#                      DESCRIPTION DU PROCESSUS                #
#                                                              #
# Date :   17/09/2020                                          #
#                                                              #
# Fait par :   DIMO                                     #
#                                                              #
# Action : Switch Article dans cube Reporting, pour les VALO		   #
################################################################



#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_REPORTING';
C_Cube_Cible = 'SLS_REPORTING';
P_Cube = 'SLS_REPORTING';
C_zPARAM = 'zPARAM';
C_zSELECT = 'zSELECT';

#--------------------Dimensions--------------------#
#On récupère toutes les dimensions du cube en paramètre et on repère laquelle est SLS_MATERIAL_PLAN

#Dimension que l'on connait

D_PHASE = '1_G_PHASE_REP';
D_PERIOD = '1_G_PERIOD';
D_MATERIAL = '1_G_MATERIAL';
D_CHA_SAP_IND = 'SLS_CHA_SAP_IND';
D_IND = 'SLS_REPORTING_IND';

Dim_Planning_Mat = '';
vELEM_Planning_Mat = '';
Nb_Dim = 0;
#Dim1 : Current Phase
cpt = 2;
Dim = TabDim(P_Cube, Cpt);

#Tant que la dimension n'est pas vide
While(Dim @<> '');
	#On vérifie si c'est Material Plan
    If(Dim @= 'SLS_MATERIAL_PLAN');
    	#On garde en mémoire quelle dim est material
		Dim_PLanning_Mat = Dim;
        #On garde son index en mémoire
        Cpt_Mat = Cpt;
	EndIf;
    cpt = cpt + 1;
    Dim = TabDim(P_Cube,cpt);
End;

#On garde le nombre total de dim dans le cube en mémoire
Nb_Dim = cpt - 1;
Cpt_Ind = Cpt - 1;

#--------------------Elements--------------------#

e_Message_Prolog = '';
Phase_En_Cours = CellGetS(C_zPARAM, 'Phase', 'Value');
SLS_VOL = 'SLS_VOL';
PROMO_VOL = 'PROMO_VOL';
CURR_VOL = 'CURR_VOL';
CONTR_VOL = 'CONTR_VOL';
PROSP_VOL = 'PROSP_VOL';
TO_BE_CONTR_VOL = 'TO_BE_CONTR_VOL';
VOL = 'VOL';



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClients = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_temp = 'z_temp_' | vUSER |'_' | vPRO_NAME;

DatasourceASCIIDecimalSeparator=',';
DatasourceASCIIThousandSeparator=' ';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(Dim_Planning_Mat, subset_copy);
subsetdestroy(D_CHA_SAP_IND, subset_copy);
subsetdestroy(D_IND, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
SubsetCreate(D_PHASE, subset_copy);
IF ( Phase_En_Cours @= 'Current Rolling Forecast');
   SubsetElementInsert(D_PHASE,subset_copy, 'RFC_Sales', 1);
  ELSE;
 SubsetElementInsert(D_PHASE, subset_copy, 'CURR_PHASE', 1);
 SubsetElementInsert( D_PHASE, subset_copy, 'CURR_PHASE_SALES', 1);
 SubsetElementInsert( D_PHASE,subset_copy, 'CURR_PHASE_CS', 1);
  ENDIF;

#D_PERIOD
SubsetCreate(D_PERIOD, subset_copy);
MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}';
SubsetMDXSet( D_PERIOD, subset_copy, MDX_PERIOD );

#Dim_Planning_Mat
SubsetCreate(Dim_Planning_Mat, subset_copy);
MDX_MATERIAL_PLAN = 'FILTER({TM1SUBSETALL([SLS_MATERIAL_PLAN])},[SLS_MATERIAL_PLAN].[Switch_Article_Cas_n2] =1)';
SubsetMDXSet( Dim_Planning_Mat, subset_copy, MDX_MATERIAL_PLAN );

#D_IND
SubsetCreate(D_IND, subset_copy);
MDX_IND = '{
	{FILTER({TM1FILTERBYLEVEL({TM1SUBSETALL(['|D_IND|'])},0)},['|D_IND|'].[Type_Indicateur]@="Valo")}
            }';
SubsetMDXSet( D_IND, subset_copy, MDX_IND );


#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy,D_IND,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PERIOD, subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,Dim_Planning_Mat,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#
DatasourceNameForServer = C_Cube_Source;
DatasourceCubeview= view_copy ;


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

# Récupération du parent du MATERIAL PLAN dans la dimension Material
Nv_PM = ELPAR ( D_MATERIAL , PLANNING_MATERIAL | '.' , 1 ) ;

# Si la cellule est calculé par règle (donc si la fonction CellIsUpdateable renvoie 0), la suite est ignoré
IF ( CellIsUpdateable ( P_Cube , PHASE , PERIOD , SALES_ORG , DISTRIB_CHANNEL , VOLUME_UNIT , SALES_GROUP , CUSTOMER , Nv_PM , PAYER , SOLD_TO , SHIP_POINT , SHIP_PLANT , PROD_PLANT , VENDOR , MAT_FREIGHT_GROUP , INCOTERM , Q_HQ , MESURE ) = 0 ) ;
 ItemSkip ;
ENDIF ;

CellPutN ( Value , P_Cube , PHASE , PERIOD , SALES_ORG , DISTRIB_CHANNEL , VOLUME_UNIT , SALES_GROUP , CUSTOMER , Nv_PM , PAYER , SOLD_TO , SHIP_POINT , SHIP_PLANT , PROD_PLANT , VENDOR , MAT_FREIGHT_GROUP , INCOTERM , Q_HQ , MESURE ) ;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ViewZeroOut(C_Cube_Source,view_copy);
#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(Dim_Planning_Mat, subset_copy);
subsetdestroy(D_CHA_SAP_IND, subset_copy);
#subsetdestroy(D_IND, subset_copy);
SubsetDestroy(D_IND, subset_temp);

#====================================#
#    Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion