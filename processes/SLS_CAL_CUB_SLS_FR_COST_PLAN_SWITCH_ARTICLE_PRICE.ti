#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



################################################################
#                      DESCRIPTION DU PROCESSUS                #
#                                                              #
# Date :   07/05/2019                                          #
#                                                              #
# Fait par :   Ann BESNARD                                     #
#                                                              #
# Action : Switch Article dans un cube (en paramètre)		   #
################################################################



#====================================#
#         Déclaration des variables  #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_FR_COST_PLAN';
C_Cube_Cible = 'SLS_FR_COST_PLAN';
C_zPARAM = 'zPARAM';
C_zSELECT = 'zSELECT';

#--------------------Dimensions--------------------#
#On récupère toutes les dimensions du cube en paramètre et on repère laquelle est SLS_MATERIAL_PLAN

#Dimension que l'on connait
D_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_MATERIAL = '1_G_MATERIAL';
D_CHA_SAP_IND = 'SLS_CHA_SAP_IND';
D_IND = 'SLS_FR_COST_PLAN_IND';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR';
D_MAT_FREIGHT_GP = 'SLS_MAT_FREIGHT_GROUP';

#--------------------Elements--------------------#

e_Message_Prolog = '';
Phase_En_Cours = CellGetS(C_zPARAM, 'Phase', 'Value');
SLS_VOL = 'SLS_VOL';
PROMO_VOL = 'PROMO_VOL';
CURR_VOL = 'CURR_VOL';
CONTR_VOL = 'CONTR_VOL';
PROSP_VOL = 'PROSP_VOL';
TO_BE_CONTR_VOL = 'TO_BE_CONTR_VOL';
VOL = 'VOL';

TOT_SHIP_POINT = 'Total Shipping Point';
TOT_SHIP_PLANT = 'Total Ship Plant';
TOT_PROD_PLANT = 'Total Prod Plant';
TOT_VENDOR = 'Total Vendor';
TOT_MAT_FR_GP = 'Total Mat Freight Group';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClients = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_temp = 'z_temp_' | vUSER |'_' | vPRO_NAME;

DatasourceASCIIDecimalSeparator=',';
DatasourceASCIIThousandSeparator=' ';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_MATERIAL_PLAN, subset_copy);
subsetdestroy(D_CHA_SAP_IND, subset_copy);
subsetdestroy(D_IND, subset_copy);
subsetdestroy(D_SHIP_POINT, subset_copy);
subsetdestroy(D_SHIP_PLANT, subset_copy);
subsetdestroy(D_PROD_PLANT, subset_copy);
subsetdestroy(D_VENDOR, subset_copy);
subsetdestroy(D_MAT_FREIGHT_GP, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
SubsetCreate(D_PHASE, subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, Phase_En_Cours, 1);

#D_PERIOD
SubsetCreate(D_PERIOD, subset_copy);
MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}';
SubsetMDXSet( D_PERIOD, subset_copy, MDX_PERIOD );

#Dim_Planning_Mat
SubsetCreate(D_MATERIAL_PLAN, subset_copy);
MDX_MATERIAL_PLAN = 'FILTER({TM1SUBSETALL([SLS_MATERIAL_PLAN])},[SLS_MATERIAL_PLAN].[Switch_Article_Cas_n2] =1)';
SubsetMDXSet( D_MATERIAL_PLAN, subset_copy, MDX_MATERIAL_PLAN );

#D_SHIP_POINT
SubsetCreate( D_SHIP_POINT, subset_copy);
SubsetElementInsert( D_SHIP_POINT, subset_copy, 'N/A Shipping Point', 1 );

#D_SHIP_PLANT
SubsetCreate( D_SHIP_PLANT, subset_copy);
SubsetElementInsert( D_SHIP_PLANT, subset_copy, 'N/A Ship Plant', 1 );

#D_PROD_PLANT
SubsetCreate( D_PROD_PLANT, subset_copy);
SubsetElementInsert( D_PROD_PLANT, subset_copy, 'N/A Prod Plant', 1 );

#D_VENDOR
SubsetCreate( D_VENDOR, subset_copy);
SubsetElementInsert( D_VENDOR, subset_copy, 'N/A Vendor', 1 );

#D_MAT_FREIGHT_GP
SubsetCreate( D_MAT_FREIGHT_GP, subset_copy);
SubsetElementInsert( D_MAT_FREIGHT_GP, subset_copy, 'N/A Mat Freight Group', 1 );

#D_IND
SubsetCreate(D_IND, subset_copy);
MDX_IND = '{
			{FILTER({TM1FILTERBYLEVEL({TM1SUBSETALL(['|D_IND|'])},0)},['|D_IND|'].[Type_Indicateur]@="Prix_Unit")},
            {FILTER({TM1FILTERBYLEVEL({TM1SUBSETALL(['|D_IND|'])},0)},['|D_IND|'].[Type_Indicateur]@="Valo")}
            }';
SubsetMDXSet( D_IND, subset_copy, MDX_IND );


#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy,D_IND,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PERIOD, subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_MATERIAL_PLAN,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_SHIP_POINT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_SHIP_PLANT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PROD_PLANT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_VENDOR,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_MAT_FREIGHT_GP,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#
DatasourceNameForServer = C_Cube_Source;
DatasourceCubeview= view_copy ;


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#On prend son parent dans la dimension Material
Nv_PM = ELPAR(D_MATERIAL, vELEM_MATERIAL_PLAN|'.', 1);
Valo_Associée= '';

#On récupère le volume et la valo de l'article source
IF ( DIMIX ( D_CHA_SAP_IND,vELEM_IND) >0 ) ;
Valo_Associée = AttrS(D_CHA_SAP_IND,vELEM_IND,'Valo_Associée');
ENDIF;
IF( Valo_Associée @= '');
#ASCIIOUTPUT (' ..\cce\FRCOSTPLAN.csv'  , vELEM_IND , Valo_Associée, numbertostring (value) , vELEM_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, vELEM_MAT_FREIGHT_GROUP, 
#	vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR ) ;

ENDIF;


IF( Valo_Associée @= '');
 CellPutN (Value, C_Cube_Cible, vELEM_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, vELEM_MAT_FREIGHT_GROUP, 
	vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR, vELEM_IND);

ELSE;

Valo_Source = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_MATERIAL_PLAN, vELEM_CUSTOMER, 
	vELEM_MAT_FREIGHT_GROUP, vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR, Valo_Associée);

Vol_Source = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_MATERIAL_PLAN, vELEM_CUSTOMER, TOT_MAT_FR_GP, 
	TOT_SHIP_POINT, TOT_SHIP_PLANT, TOT_PROD_PLANT, TOT_VENDOR, SLS_VOL);

#On récupère le volume et la valo de l'article cible

Valo_Cible = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, 
	vELEM_MAT_FREIGHT_GROUP, vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR, Valo_Associée);

Vol_Cible = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, 
	TOT_MAT_FR_GP, TOT_SHIP_POINT, TOT_SHIP_PLANT, TOT_PROD_PLANT, TOT_VENDOR, SLS_VOL);

Value = (Valo_Source + Valo_Cible)\(Vol_Source + Vol_Cible);


# If(vELEM_PERIOD @= '2019.04');
# 	ItemREject( NumberToString(Valo_Source) | ' - ' | NumberToString(Valo_Cible) | ' - ' | NumberToString(Vol_Source) | ' - ' | NumberToString(Vol_Cible) 
#     | ' - ' |NumberToString(Value));
# EndIf;

CellPutN(Value, C_Cube_Cible, vELEM_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, vELEM_MAT_FREIGHT_GROUP, 
	vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR, vELEM_IND);

ENDIF;



#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ViewZeroOut(C_Cube_Source,view_copy);
#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_MATERIAL_PLAN, subset_copy);
subsetdestroy(D_CHA_SAP_IND, subset_copy);
subsetdestroy(D_IND, subset_copy);
subsetdestroy(D_SHIP_POINT, subset_copy);
subsetdestroy(D_SHIP_PLANT, subset_copy);
subsetdestroy(D_PROD_PLANT, subset_copy);
subsetdestroy(D_VENDOR, subset_copy);
subsetdestroy(D_MAT_FREIGHT_GP, subset_copy);
SubsetDestroy(D_IND, subset_temp);

#====================================#
#    Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion