#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   12/04/2019                                                       #
#                                                                            #
# Fait par :    Elisabeth Mounier                                                 #
#                                                                            #
# Action : Processus de copie des ventes prev de Sales Plan vers Reporting. #
#		Pour un Sales Group donné.																	 #
##############################################################################

#Reporting provisoire : copie sur Current Phase

#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_SALES_PLAN';
C_Cube_Cible = 'SLS_REPORTING';
C_zSELECT = 'zSELECT';
C_Convert = 'SLS_VOL_CONVERT';
C_Convert_Currency = 'SLS_CURRENCY_RATE';

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';

D_PHASE_REP = '1_G_PHASE_REP';
D_PAYER = 'SLS_PAYER';
D_SOLD_TO = 'SLS_SOLD_TO';
D_MAT_FR_GROUP = 'SLS_MAT_FREIGHT_GROUP';
D_INCOTERM = 'SLS_INCOTERM';
D_QUOTA = 'SLS_Q_HQ';
D_REPORTING_IND = 'SLS_REPORTING_IND';
D_MATERIAL = '1_G_MATERIAL';

D_SALES_PLAN_IND = 'SLS_SALES_PLAN_IND';
D_VOLUME_UNIT_IND = 'SLS_VOL_CONVERT_IND';

#--------------------Elements--------------------#
e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

#--------------------- Paramètres -----------#
Phase = CellGetS(C_zSelect, AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'), 'Current Phase');
#P_PHASE = 'Current Phase Sales';
Current_Phase = DimensionElementPrincipalName( D_PHASE_REP, Phase );
Current_Phase_Cap = ATTRS(D_PHASE_REP, Current_Phase, 'Caption');
#CCE modif du 04/02/21 phase cible on inclut la copie sur rolling forecast.
Phase_Cible = CellGetS ( 'SECURITY_CUBES', 'SLS_SALES_REPORTING', 'security' ) ;

P_SALES_GROUP = CellGetS(C_zSelect, AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'), 'Sales Group');
If(P_SALES_GROUP @= '' % DimensionElementPrincipalName(D_SALES_GROUP, P_SALES_GROUP) @= 'TOTAL_SALES_GROUP');
	P_SALES_GROUP = 'TOTAL_SALES_GROUP';
EndIf;

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


subset_volume_unit = 'subset volume unit' | vUSER |'_' | vPRO_NAME;
Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);

#------------Création d'un subset contenant tous les éléments fins----------
ASCIIOUTPUT ( '../temp/Verif_subset_' | vPRO_NAME | vLocalTime | '.csv' , 'UserTM1' , 'DATE' ) ;
ASCIIOUTPUT (  '../temp/Verif_subset_' | vPRO_NAME | vLocalTime | '.csv' , TM1User , vDATE ) ;

MDX = '{{[1_G_VOLUME_UNIT].[TO]},{TM1FILTERBYLEVEL( {TM1SUBSETALL( [1_G_VOLUME_UNIT] )}, 0)}}';
SubsetCreatebyMDX(subset_volume_unit, MDX);
SubsetElementDelete(D_VOLUME_UNIT,subset_volume_unit, 1);
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);
#endregion