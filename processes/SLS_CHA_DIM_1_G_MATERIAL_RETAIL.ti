#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#################################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   29/08/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :   Anne BESNARD                                                                                                       #
#                                                                                                                                                   #
# Action : Processus de chargement de le hiérarchie RETAIL pour la dim Planning Mat             #
#                                                                                                                                                   #
#################################################################

SetInputCharacterSet('TM1CS_UTF8');

#====================================#
#             Déclaration des variables                   #
#====================================#

#--------------------Cubes--------------------#
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';
C_Attribut = '}ElementAttributes_1_G_MATERIAL';

#--------------------Dimensions--------------------#
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_MATERIAL = '1_G_MATERIAL'; 
D_MATERIAL_PRICE = 'SLS_MATERIAL_PLAN_PRICE';


#DimensionDeleteAllElements(D_MATERIAL_PLAN);
#ProcessBreak();


#--------------------Elements--------------------#
TOT_PM = 'TOTAL_RETAIL';
TOT_MAT = 'TOTAL_RETAIL'; 

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#============================================#
#     Initialisation de la vue à supprimer   #
#============================================#
####VUE 1_G_MATERIAL###

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Attribut,view_erase);
subsetdestroy('}ElementAttributes_1_G_MATERIAL',subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Attribut,view_erase);
subsetcreate('}ElementAttributes_1_G_MATERIAL',subset_erase);
SubsetElementInsert('}ElementAttributes_1_G_MATERIAL',subset_erase, 'Precedent Retail', 1);

ViewSubsetAssign( C_Attribut, view_erase,'}ElementAttributes_1_G_MATERIAL',subset_erase);
ViewZeroOut( C_Attribut, view_erase );

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Attribut,view_erase);
subsetdestroy('}ElementAttributes_1_G_MATERIAL',subset_erase);

#--------------------Sources de données--------------------#
DatasourceNameForServer= CellGetS(C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'DATASOURCE_NAME_FOR_SERVER', 'Comment');


# Init des totaux
If( DIMIX( D_MATERIAL_PLAN, TOT_PM) = 0);
	DimensionElementInsert(D_MATERIAL_PLAN, '', TOT_PM, 'N');
EndIf;

If( DIMIX( D_MATERIAL_PLAN, 'N/A_RETAIL') = 0);
	DimensionElementInsert(D_MATERIAL_PLAN, '', 'N/A_RETAIL', 'N');
	DimensionElementComponentAdd(D_MATERIAL_PLAN, TOT_PM, 'N/A_RETAIL', 1);
EndIf;

#Init des totaux
If( DIMIX( D_MATERIAL_PRICE, TOT_PM) = 0);
	DimensionElementInsert(D_MATERIAL_PRICE, '', TOT_PM, 'N');
EndIf;

If( DIMIX( D_MATERIAL_PRICE, 'N/A_RETAIL') = 0);
	DimensionElementInsert(D_MATERIAL_PRICE, '', 'N/A_RETAIL', 'N');
	DimensionElementComponentAdd(D_MATERIAL_PRICE, TOT_PM, 'N/A_RETAIL', 1);
EndIf;

# Init des totaux
If( DIMIX( D_MATERIAL, TOT_MAT) = 0);
	DimensionElementInsert(D_MATERIAL, '', TOT_MAT, 'N');
EndIf;

If( DIMIX( D_MATERIAL, 'N/A_RETAIL') = 0);
	DimensionElementInsert(D_MATERIAL, '', 'N/A_RETAIL', 'N');
	DimensionElementComponentAdd(D_MATERIAL, TOT_MAT, 'N/A_RETAIL', 1);
EndIf;

#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****


# On exclue tout ce qui est hors périmètre : hors RBIG57NIGIENP2OU8OAA6YWQG
If(Perimetre @<> 'RBIG57NIGIENP2OU8OAA6YWQG');
	ItemSkip;
EndIf;


# On créé les élements consolidés dans la dimension
If( Type @= '0HIER_NODE');
    If( DIMIX(D_MATERIAL_PLAN, Material) = 0);
		DimensionElementInsert(D_MATERIAL_PLAN, TOT_PM, Material, 'C');
	EndIf;
EndIf;

# idem SLS_MATERIAL_PLAN_PRICE
If( Type @= '0HIER_NODE');
    If( DIMIX(D_MATERIAL_PRICE, Material) = 0);
		DimensionElementInsert(D_MATERIAL_PRICE, TOT_PM, Material, 'C');
	EndIf;
EndIf;

#idem Material

# On créé les élements consolidés dans la dimension
If( Type @= '0HIER_NODE');
	If( DIMIX(D_MATERIAL, Material) = 0);
		DimensionElementInsert(D_MATERIAL, TOT_MAT, Material, 'C');
	EndIf;
EndIf;


#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****


If(Perimetre @<> 'RBIG57NIGIENP2OU8OAA6YWQG');
	ItemSkip;
EndIf;

# On se place sur l'élement courant
If( Type @= '0HIER_NODE');
	#Code_Elem = Id;
    Code_Elem = Material;
    If(DIMIX(D_MATERIAL_PLAN, Id) <> DIMIX(D_MATERIAL_PLAN, Code_Elem));
    	AttrPutS(Id, D_MATERIAL_PLAN, Code_Elem, 'Code_Retail');
	EndIf;
    AttrPutS(Suivant, D_MATERIAL_PLAN, Code_Elem, 'Suivant Retail');
    AttrPutS(Parent, D_MATERIAL_PLAN, Code_Elem, 'Parent Retail');
    If(DIMIX(D_MATERIAL_PLAN, Suivant)<>0 );
		AttrPutS(Id, D_MATERIAL_PLAN, Suivant, 'Precedent Retail');
    EndIf;
Else; 
	# Remise au format SAP
	Longueur_Material = LONG(Material);
	Code_Elem = SUBST(Material, Longueur_Material-7, Longueur_Material);

	#Vérification que l'élément fin existe bien dans la dimension
	If(DIMIX(D_MATERIAL_PLAN, Code_Elem) = 0);
		ItemSkip;
	EndIf;
    If(DIMIX(D_MATERIAL_PLAN, Id) <> DIMIX(D_MATERIAL_PLAN, Code_Elem));
    	AttrPutS(Id, D_MATERIAL_PLAN, Code_Elem, 'Code_Retail');
	EndIf;
    AttrPutS(Suivant, D_MATERIAL_PLAN, Code_Elem, 'Suivant Retail');
    AttrPutS(Parent, D_MATERIAL_PLAN, Code_Elem, 'Parent Retail');
    If(DIMIX(D_MATERIAL_PLAN, Suivant)<>0 );
    	AttrPutS(Id, D_MATERIAL_PLAN, Suivant, 'Precedent Retail');
    EndIf;
EndIf; 

#MAJ Type Retail
AttrPutS(Type, D_MATERIAL_PLAN, Code_Elem, 'Type_Retail');


# On se place sur l'élement courant
If( Type @= '0HIER_NODE');
    Code_Elem = Material;
    AttrPutS(Id, D_MATERIAL_PRICE, Code_Elem, 'Code_Retail');
    AttrPutS(Suivant, D_MATERIAL_PRICE, Code_Elem, 'Suivant Retail');
    AttrPutS(Parent, D_MATERIAL_PRICE, Code_Elem, 'Parent Retail');
    If(DIMIX(D_MATERIAL_PLAN, Suivant)<>0 );
    	AttrPutS(Id, D_MATERIAL_PRICE, Suivant, 'Precedent Retail');
    EndIf;
Else; 
	# Remise au format SAP
	Longueur_Material = LONG(Material);
	Code_Elem = SUBST(Material, Longueur_Material-7, Longueur_Material);

	#Vérification que l'élément fin existe bien dans la dimension
	If(DIMIX(D_MATERIAL_PRICE, Code_Elem) = 0);
		ItemSkip;
	EndIf;
    AttrPutS(Id, D_MATERIAL_PRICE, Code_Elem, 'Code_Retail');
    AttrPutS(Suivant, D_MATERIAL_PRICE, Code_Elem, 'Suivant Retail');
    AttrPutS(Parent, D_MATERIAL_PRICE, Code_Elem, 'Parent Retail');
    If(DIMIX(D_MATERIAL_PRICE, Suivant)<>0 );
    	AttrPutS(Id, D_MATERIAL_PRICE, Suivant, 'Precedent Retail');
    EndIf;
EndIf; 

#MAJ Type Retail
AttrPutS(Type, D_MATERIAL_PRICE, Code_Elem, 'Type_Retail');

#idem pour MATERIAL
# On se place sur l'élement courant
If( Type @= '0HIER_NODE');
	Code_Elem = Material;
    AttrPutS(Id, D_MATERIAL, Code_Elem, 'Code_Retail');
    AttrPutS(Suivant, D_MATERIAL, Code_Elem, 'Suivant Retail');
    AttrPutS(Parent, D_MATERIAL, Code_Elem, 'Parent Retail');
    If(DIMIX(D_MATERIAL_PLAN, Suivant)<>0 );
    	AttrPutS(Id, D_MATERIAL, Suivant, 'Precedent Retail');
   	EndIf;
Else; 
	# Remise au format SAP
	Longueur_Material = LONG(Material);
	Code_Elem = SUBST(Material, Longueur_Material-7, Longueur_Material);

	#Vérification que l'élément fin existe bien dans la dimension
	If(DIMIX(D_MATERIAL, Code_Elem) = 0);
		ItemSkip;
	EndIf;
    AttrPutS(Id, D_MATERIAL, Code_Elem, 'Code_Retail');
    AttrPutS(Suivant, D_MATERIAL, Code_Elem, 'Suivant Retail');
    AttrPutS(Parent, D_MATERIAL, Code_Elem, 'Parent Retail');
    If(DIMIX(D_MATERIAL, Suivant)<>0 );
	    AttrPutS(Id, D_MATERIAL, Suivant, 'Precedent Retail');
    EndIf;
EndIf; 

#MAJ Type Retail
AttrPutS(Type, D_MATERIAL, Code_Elem, 'Type_Retail');


AttrPutN(1, D_MATERIAL, Code_Elem, 'Hierarchie Retail');
AttrPutN(1, D_MATERIAL_PRICE, Code_Elem, 'Hierarchie Retail');
AttrPutN(1, D_MATERIAL_PLAN, Code_Elem, 'Hierarchie Retail');
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#Alias MATERIAL_PLAN
#Alias Total Retail
AttrPutS('Total Retail', D_MATERIAL_PLAN, TOT_PM, 'Caption');
AttrPutS('Total Retail', D_MATERIAL_PLAN, TOT_PM, 'Code - Caption');
AttrPutN(1, D_MATERIAL_PLAN, TOT_PM, 'Hierarchie Retail');

#Alias N/A Retail
AttrPutS('N/A Retail', D_MATERIAL_PLAN, 'N/A_RETAIL', 'Caption');
AttrPutS('NA Retail', D_MATERIAL_PLAN, 'N/A_RETAIL', 'Code - Caption');
AttrPutN(1, D_MATERIAL_PLAN, 'N/A_RETAIL', 'Hierarchie Retail');

#Alias MATERIAL
#Alias Total Retail
AttrPutS('Total Retail', D_MATERIAL, TOT_MAT, 'Caption');
AttrPutS('Total Retail', D_MATERIAL, TOT_MAT, 'Code - Caption');
AttrPutN(1, D_MATERIAL_PLAN, TOT_MAT, 'Hierarchie Retail');

#Alias N/A Retail
AttrPutS('N/A Retail', D_MATERIAL, 'N/A_RETAIL', 'Caption');
AttrPutS('NA Retail', D_MATERIAL, 'N/A_RETAIL', 'Code - Caption');
AttrPutN(1, D_MATERIAL_PLAN, 'N/A_RETAIL', 'Hierarchie Retail');

#endregion