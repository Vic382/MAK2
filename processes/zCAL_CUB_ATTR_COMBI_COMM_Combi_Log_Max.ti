#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   16/10/2019                                                        #
#                                                                            #
# Fait par :    JM BESNARD                                                  #
#                                                                            #
# Action : Processus de calcul des combinaison logistiques MAX               #
#																			 #
##############################################################################


#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_INIT';
C_Cube_Cible = 'zATTR_COMBI_COMM';
C_zSelect = 'zSELECT';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';
C_zPARAM = 'zPARAM';

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_INIT_IND='SLS_INIT_IND';

D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SALES_PLAN_IND = 'SLS_SALES_PLAN_IND';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
Curr_Phase = CellGetS('zSELECT', vClient, 'Current Phase');
Curr_Phase_Cap = ATTRS(D_CURRENT_PHASE, Curr_Phase, 'Caption');
vElem_Tot_Period = 'subset_cal_fisc_camp';

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#                  Vérification des paramètres                #
#============================================#

# Récupération de la sales org sélectionnée
P_SALES_ORG = CellGetS(C_zSelect,vClient, 'Sales Organisation');
If(P_SALES_ORG @= '');
	P_SALES_ORG = 'TOTAL SALES ORG';
EndIf;

# Récupération de la distrib channel sélectionnée
P_DISTRIB_CHANNEL = CellGetS(C_zSelect,vClient, 'Distrib Channel');
If(P_DISTRIB_CHANNEL @= '');
	P_DISTRIB_CHANNEL = 'Total Distribution Channel';
EndIf;

# Récupération du Sales Group sélectionné
P_SALES_GROUP = CellGetS(C_zSelect,vClient, 'Sales Group');
If(P_SALES_GROUP @= '');
	P_SALES_GROUP = 'TOTAL_SALES_GROUP';
EndIf;


#Distrib_Channel
P_Distrib_Channel = DimensionElementPrincipalName( D_DISTRIB_CHANNEL, P_Distrib_Channel );
If(P_DISTRIB_CHANNEL @= '');
	P_distrib_channel = 'Total Distribution Channel';
EndIf;

#Sales Org
P_SAles_Org = DimensionElementPrincipalName( D_DISTRIB_CHANNEL, P_Sales_Org );
If(P_Sales_Org @= '');
	P_Sales_Org = 'TOTAL SALES ORG';
EndIf;
Curr_Phase = DimensionElementPrincipalName( D_CURRENT_PHASE, Curr_Phase );
P_Division = 'All Divisions';


#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#

ViewDestroy(C_Cube_Cible,view_erase);
ViewCreate(C_Cube_Cible,view_erase);
ViewZeroOut(C_Cube_Cible,view_erase);
ViewDestroy(C_Cube_Cible,view_erase);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_SHIP_POINT, subset_copy);
SubsetDestroy(D_SHIP_PLANT, subset_copy);
SubsetDestroy(D_PROD_PLANT, subset_copy);
SubsetDestroy(D_VENDOR, subset_copy);
SubsetDestroy(D_INIT_IND, subset_copy);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Source,view_copy);
#D_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, Curr_Phase, 1);
#D_PERIOD
subsetcreate(D_PERIOD,subset_copy);
SubsetElementInsert(D_PERIOD, subset_copy, vElem_Tot_Period, 1);
#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({DESCENDANTS({[1_G_SALES_ORG].['|P_Sales_Org|']})},0)}}';
SubsetCreateByMDX(subset_copy,MDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_copy, 1);
#D_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[Total Distribution Channel]},{TM1FILTERBYLEVEL({DESCENDANTS({[1_G_DISTRIB_CHANNEL].['|P_Distrib_Channel|']})},0)}}';
SubsetCreateByMDX(subset_copy, MDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_copy, 1);
#D_VOLUME_UNIT
MDX_VOL = '{{[1_G_VOLUME_UNIT].[KG]},{TM1FILTERBYLEVEL({TM1SUBSETALL([1_G_VOLUME_UNIT])},0)}}';
SubsetCreateByMDX(subset_copy,MDX_VOL);
SubsetElementDelete(D_VOLUME_UNIT, subset_copy, 1);
#D_MATERIAL_PLAN
MDX_DIVISION = '{{[SLS_MATERIAL_PLAN].[Total Planning Material]},{TM1FILTERBYLEVEL({DESCENDANTS({[SLS_MATERIAL_PLAN].['|P_Division|']})},0)}}';
SubsetCreateByMDX(subset_copy,MDX_DIVISION);
SubsetElementDelete(D_MATERIAL_PLAN, subset_copy, 1);
#D_CUSTOMER
MDX_CUSTOMER = '{{[SLS_CUSTOMER].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_CUSTOMER])},0)}}';
SubsetCreateByMDX(subset_copy,MDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_copy, 1);
#D_SHIP_POINT
MDX_SHIP_POINT = '{{[SLS_SHIP_POINT].[TOTAL_SHIP_POINT]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_SHIP_POINT])},0)}}';
SubsetCreateByMDX(subset_copy,MDX_SHIP_POINT);
SubsetElementDelete(D_SHIP_POINT, subset_copy, 1);
#D_SHIP_PLANT
MDX_SHIP_PLANT = '{{[SLS_SHIP_PLANT].[TOTAL_SHIP_PLANT]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_SHIP_PLANT])},0)}}';
SubsetCreateByMDX(subset_copy,MDX_SHIP_PLANT);
SubsetElementDelete(D_SHIP_PLANT, subset_copy, 1);
#D_PROD_PLANT
MDX_PROD_PLANT = '{{[SLS_PROD_PLANT].[TOTAL_PROD_PLANT]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_PROD_PLANT])},0)}}';
SubsetCreateByMDX(subset_copy,MDX_PROD_PLANT);
SubsetElementDelete(D_PROD_PLANT, subset_copy, 1);
#D_VENDOR
MDX_VENDOR = '{{[SLS_VENDOR].[TOTAL_VENDOR]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_VENDOR])},0)}}';
SubsetCreateByMDX(subset_copy,MDX_VENDOR);
SubsetElementDelete(D_VENDOR, subset_copy, 1);
#D_INIT_IND
subsetcreate(D_INIT_IND,subset_copy);
SubsetElementInsert(D_INIT_IND, subset_copy, 'Sales Volume', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_MATERIAL_PLAN,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_VOLUME_UNIT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_VENDOR,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PROD_PLANT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SHIP_PLANT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SHIP_POINT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_INIT_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 0);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#
DatasourceCubeview= view_copy ;

#endregion
#region Data
# On récupère le max courant
vMax = cellGetN(C_Cube_Cible,vELEM_CUSTOMER,vELEM_MATERIAL_PLAN,'Valeur Max SLS_INIT');

# Si la valeur est supérieure au MAX
IF(Value > vMax);
CellPutN(Value,C_Cube_Cible,vELEM_CUSTOMER,vELEM_MATERIAL_PLAN,'Valeur Max SLS_INIT');
CellPutS(vELEM_SHIP_POINT,C_Cube_Cible,vELEM_CUSTOMER,vELEM_MATERIAL_PLAN,'Ship Point Max SLS_INIT');
CellPutS(vELEM_SHIP_PLANT,C_Cube_Cible,vELEM_CUSTOMER,vELEM_MATERIAL_PLAN,'Ship Plant Max SLS_INIT');
CellPutS(vELEM_PROD_PLANT,C_Cube_Cible,vELEM_CUSTOMER,vELEM_MATERIAL_PLAN,'Prod Plant Max SLS_INIT');
CellPutS(vELEM_VENDOR,C_Cube_Cible,vELEM_CUSTOMER,vELEM_MATERIAL_PLAN,'Vendor Max SLS_INIT');
ENDIF;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****


#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_VENDOR, subset_copy);
SubsetDestroy(D_PROD_PLANT, subset_copy);
SubsetDestroy(D_SHIP_PLANT, subset_copy);
SubsetDestroy(D_SHIP_POINT, subset_copy);
SubsetDestroy(D_INIT_IND, subset_copy);

#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion