#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****



##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   14/05/2019                                                        #
#                                                                            #
# Fait par :    Elisabeth Mounier                                            #
#                                                                            #
# Action : Processus de copie du réel vers Reporting.					 #																 #
##############################################################################

#process incrémentant le volume
#appelé en premier dans le master


#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_CHA_SAP';
C_Cube_Cible = 'SLS_REPORTING';
C_Convert = 'SLS_VOL_CONVERT';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_CHA_SAP_IND = 'SLS_CHA_SAP_IND';

D_PHASE_REP = '1_G_PHASE_REP';
D_PAYER = 'SLS_PAYER';
D_SOLD_TO = 'SLS_SOLD_TO';
D_MAT_FR_GROUP = 'SLS_MAT_FREIGHT_GROUP';
D_INCOTERM = 'SLS_INCOTERM';
D_QUOTA = 'SLS_Q_HQ';
D_REPORTING_IND = 'SLS_REPORTING_IND';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';

#D_VOLUME_UNIT_IND = 'SLS_VOL_CONVERT_IND';

#--------------------Elements--------------------#
e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

# vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
# #--------------------- Paramètres -----------#
# #P_PHASE = 'ACT';
# Current_Phase = CellGetS('zSelect', vClient ,'Current Phase');
# Phase_Cap = ATTRS('1_G_CURRENT_PHASE', Current_Phase, 'Caption');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#permet de réutiliser le subset des périodes qui viennent d'être chargées dans CHA_SAP
process_master = 'SLS_CHA_CUB_SLS_CHA_SAP';
subset_erase_master = 'z_erase_master_' | vUSER |'_' | process_master;


subset_volume_unit = 'subset volume unit' | vUSER |'_' | vPRO_NAME;
Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);

#------------Création d'un subset contenant tous les éléments fins----------
MDX = '{{[1_G_VOLUME_UNIT].[TO]},{TM1FILTERBYLEVEL( {TM1SUBSETALL( [1_G_VOLUME_UNIT] )}, 0)}}';
SubsetCreatebyMDX(subset_volume_unit, MDX);
SubsetElementDelete(D_VOLUME_UNIT,subset_volume_unit, 1);

subset_volume_unit_size = SubsetGetsize(D_VOLUME_UNIT, subset_volume_unit );


DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#        Initialisation de la vue à supprimer#
#============================================#

#--------------------Destruction des objets--------------------#
#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE_REP,subset_erase);
#Subsetdestroy(D_MAT_FR_GROUP,subset_erase);
Subsetdestroy(D_REPORTING_IND,subset_erase);
Subsetdestroy(D_PERIOD,subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE_REP,subset_erase);
SubsetElementInsert(D_PHASE_REP, subset_erase, P_PHASE, 1);

#D_MAT_FR_GROUP
# subsetcreate(D_MAT_FR_GROUP,subset_erase);
# SubsetElementInsert(D_MAT_FR_GROUP, subset_erase, 'N/A_MAT_FR_GROUP', 1);

#D_REPORTING_IND
MDX_IND = '{{[SLS_REPORTING_IND].[Sales Volume]}, {TM1FILTERBYLEVEL(DESCENDANTS([SLS_REPORTING_IND].[Sales Volume]) , 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_IND);
SubsetElementDelete( D_REPORTING_IND, subset_erase, 1);

#Modif EMO le 19/11/2019 : ce process sert également à copier le réel de Current Phase
MDX_PERIOD = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_PERIOD].[subset_act_cal_fisc_camp]) , 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_erase, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE_REP,subset_erase);
#On copie le réel sur la période qui vient d'être chargée
#On copie le réel sur la période qui vient d'être chargée
If( DimensionElementPrincipalName(D_PHASE, P_PHASE) @= 'ACT');
	ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD, subset_erase_master);
Else; 
	ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD, subset_erase);
EndIf;
#ViewSubsetAssign(C_Cube_Cible,view_erase, D_MAT_FR_GROUP,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_REPORTING_IND,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE_REP,subset_erase);
#Subsetdestroy(D_MAT_FR_GROUP,subset_erase);
Subsetdestroy(D_REPORTING_IND,subset_erase);
Subsetdestroy(D_PERIOD,subset_erase);

#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy( D_PHASE, subset_copy );
SubsetDestroy( D_CHA_SAP_IND, subset_copy );
SubsetDestroy( D_PERIOD, subset_copy );

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
subsetcreate(D_PHASE,subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, 'ACT', 1);

#D_CHA_SAP_IND
MDX_IND = '{{[SLS_CHA_SAP_IND].[Sales Volume]}, {TM1FILTERBYLEVEL(DESCENDANTS([SLS_CHA_SAP_IND].[Sales Volume]) , 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_IND);
SubsetElementDelete( D_CHA_SAP_IND, subset_copy, 1);

#Modif EMO le 19/11/2019 : ce process sert également à copier le réel de Current Phase
MDX_PERIOD = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_PERIOD].[subset_act_cal_fisc_camp]) , 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_copy, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PHASE, subset_copy);
#On copie le réel sur la période qui vient d'être chargée
If( DimensionElementPrincipalName(D_PHASE, P_PHASE) @= 'ACT');
	ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD, subset_erase_master);
Else;
	ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD, subset_copy);
EndIf;
ViewSubsetAssign(C_Cube_Source,view_copy, D_CHA_SAP_IND, subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy ;
#endregion
#region Data
#Pour chaque Material, récupérer l'unité par défaut
#Puis convertir dans toutes les unités de reporting concernées

Division = ELPAR(D_MATERIAL, ELPAR(D_MATERIAL, vMaterial, 1), 1);
Division_Name = ATTRS(D_MATERIAL_PLAN, Division, 'Caption');
Default_Unit = ATTRS(D_MATERIAL, Division, 'Volume_Unit');


#############
#modif EMO le 05/12/2019 : on ne convertit pas car dans ce processus seulement du réel est copié, donc on prend dans chaque unité
#############

# If(Default_Unit @<> vVolume_Unit);
# 	itemskip;
# EndIf;

#Donnée source sur 1_G_MATERIAL, donnée cible sur SLS_MATERIAL_PLAN
#donc CellIncrement sur les volumes, moyenne pondérée sur les prix

# cpt = 1;
# while(cpt <= subset_volume_unit_size); 
# 	Volume_Unit = SubsetGetElementName( D_VOLUME_UNIT, subset_volume_unit, cpt);
    
#     #Si les unités de volume du reporting sont définies pour la Division
# 	If(DIMIX('}ElementAttributes_1_G_VOLUME_UNIT', Division_Name | '_Report') <> 0 );
#     	If(ATTRN(D_VOLUME_UNIT, Volume_Unit, Division_Name | '_Report') = 1);
#      		Value_Default_Unit = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel,Default_Unit, vCustomer, vMaterial, vSales_Group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota, Indicateur);
#             Convert = CellGetN(C_Convert, ELPAR(D_MATERIAL, vMaterial, 1), Volume_Unit, Default_Unit);
#         	Converted_Value = Value_Default_Unit \ Convert;
           


#             CellIncrementN(Converted_Value, C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, Volume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, Indicateur);

#         EndIf;
        
#     #Copie sur l'unité par défaut seulement si le subset de reporting n'est pas défini      
#     ElseIf(Volume_Unit @= Default_Unit);
#            Value_Default_Unit = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel,Default_Unit, vCustomer, vMaterial, vSales_Group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota, Indicateur);
#            CellIncrementN(Value_Default_Unit, C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, Default_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, Indicateur);
		
#     EndIf;
#  	cpt = cpt + 1;
#  End;
 
CellIncrementN(ROUNDP(Value, 3), C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, Indicateur);

 
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy( D_PHASE, subset_copy );
SubsetDestroy( D_CHA_SAP_IND, subset_copy );
SubsetDestroy( D_PERIOD, subset_copy );

#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);

#endregion