#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   26/05/2019                                                        #
#                                                                            #
# Fait par :    JM 		                                                 #
#                                                                            #
# Action : Processus copie du cube ressource vers reconciliation		  	 #
#           																 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#

##### 29/09/2022 Modif VRT : Ticket 481022 changement des PAX en bouton WS   #######

# Définition des cubes
sCubeSelect = 'zSELECT' ;

# Récupération du User lancant le processus
sUser = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue') ;

# Récupération des éléments dans le cube zSelect
p_Distrib_Channel = CellGetS ( sCubeSelect , sUser , 'Distrib Channel' ) ;
p_Sales_org = CellGetS ( sCubeSelect , sUser , 'Sales org' ) ;

##### Fin 29/09/2022 Modif VRT : Ticket 481022 changement des PAX en bouton WS   #######

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_RESSOURCES_PLAN';
C_Cube_Cible = 'SLS_RECONCIL';


#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_MATERIAL_EXT = 'SLS_MATERIAL_EXT';
D_LINE = '1_G_LINE';
D_SALES_ORG = '1_G_SALES_ORG';
D_RESS_PLAN_IND='SLS_RESS_PLAN_IND';

D_VERSION = 'SLS_VERSION';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR';
D_RECONCIL_IND = 'SLS_RECONCIL_IND';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

# Récupération de la phase en cours et des paramètres de cette phase
P_Phase = CellGetS('zSelect', vClient ,'Current Phase');

#PARAMETRES
If(p_Sales_org @= ''); 
	p_Sales_org = 'TOTAL SALES ORG';
EndIf;
If(p_Distrib_Channel @= ''); 
	p_Distrib_Channel = 'TOTAL_DISTRIB_CHANNEL';
EndIf;



As_Temporary = 1 ;
#--------------------Création des objets Source--------------------#
ViewCreate(C_Cube_Source ,view_copy, As_Temporary );
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy ,As_Temporary);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, P_Phase, 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);

# 1_G_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_SALES_ORG, As_Temporary);
SubsetElementDelete( D_SALES_ORG, subset_copy, 1);

ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);

# 1_G_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib_Channel |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_DISTRIB_CHANNEL, As_Temporary);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_copy, 1 );

ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);


#SLS_RESS_PLAN_ID
subsetcreate(D_RESS_PLAN_IND,subset_copy ,As_Temporary);
SubsetElementInsert(D_RESS_PLAN_IND, subset_copy, 'RESS_VOL', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_RESS_PLAN_IND,subset_copy);


#--------------------Suppression des cellules vides, consolidées, calculées pour la vue source--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);


#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Source;
DatasourceCubeview=view_copy;

#--------------------Création des objets cible--------------------#
ViewCreate(C_Cube_cible ,view_erase, As_Temporary );
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_erase ,As_Temporary);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase, P_Phase, 1);
ViewSubsetAssign(C_Cube_cible,view_erase, D_CURRENT_PHASE,subset_erase);

# 1_G_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_SALES_ORG, As_Temporary);
SubsetElementDelete( D_SALES_ORG, subset_erase, 1);

ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_ORG,subset_erase);

# 1_G_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib_Channel |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_DISTRIB_CHANNEL, As_Temporary);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_erase, 1 );

ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);

#SLS_RESS_PLAN_ID
subsetcreate(D_RECONCIL_IND,subset_erase ,As_Temporary);
SubsetElementInsert(D_RECONCIL_IND, subset_erase, 'RESS_VOL', 1);
ViewSubsetAssign(C_Cube_cible,view_erase, D_RECONCIL_IND,subset_erase);

ViewZeroOut( C_Cube_cible,view_erase);

CellPutS('','zPARAM','zMessage_Err_Upd_Ressources','Value');


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

cellPutN(0,C_Cube_Source,v_Current_Phase,'N/A PERIOD',v_g_sales_org,v_g_distrib_channel,v_G_Line,'Doublon');

v_ShipPoint = CellGetS( C_Cube_Source,v_Current_Phase ,'N/A PERIOD', v_g_sales_org , v_g_distrib_channel,v_G_Line,'SHIP_PT' ) ;
v_ShipPlant = CellGetS( C_Cube_Source,v_Current_Phase , 'N/A PERIOD', v_g_sales_org , v_g_distrib_channel,v_G_Line,'SHIP_PLANT' ) ;
v_ProdPlant = CellGetS( C_Cube_Source,v_Current_Phase , 'N/A PERIOD',v_g_sales_org , v_g_distrib_channel,v_G_Line,'PROD_PLANT' ) ;
v_Vendor = CellGetS( C_Cube_Source,v_Current_Phase , 'N/A PERIOD',v_g_sales_org , v_g_distrib_channel,v_G_Line,'VENDOR' ) ;
v_SLS_MATERIAL_EXT= CellGetS( C_Cube_Source,v_Current_Phase ,'N/A PERIOD',v_g_sales_org , v_g_distrib_channel,v_G_Line,'MAT_EXT' ) ;

If(v_ShipPoint @= '');
	v_ShipPoint = 'N/A_SHIP_POINT';
EndIf;
If(v_ShipPlant @= '');
	v_ShipPlant = 'N/A_SHIP_PLANT';
EndIf;
If(v_ProdPlant @= '');
	v_ProdPlant = 'N/A_PROD_PLANT';
EndIf;
If(v_Vendor @= '');
	v_Vendor = 'N/A_VENDOR';
EndIf;
If(v_SLS_MATERIAL_EXT @= '');
	v_SLS_MATERIAL_EXT = 'N/A_MATERIAL_EXT';
EndIf;

vValue_Cible = CellGetN(C_Cube_Cible,v_Current_Phase , v_G_Period,v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_EXT, v_ShipPoint,v_ShipPlant,v_ProdPlant ,v_Vendor,'RESS_VOL');
IF(vValue_Cible <> 0);
cellPutN(1,C_Cube_Source,v_Current_Phase,'N/A PERIOD',v_g_sales_org,v_g_distrib_channel,v_G_Line,'Doublon');
CellPutS('Duplicates detected in Ressources. Related data has not been refreshed.','zPARAM','zMessage_Err_Upd_Ressources','Value');
itemreject('Des doublons ont été détectées dans la vue source. Les données associées n''ont pas été copiées.');
ENDIF;

CellIncrementN( Value,C_Cube_Cible,v_Current_Phase , v_G_Period,v_g_sales_org , v_g_distrib_channel, v_SLS_MATERIAL_EXT, v_ShipPoint,v_ShipPlant,v_ProdPlant ,v_Vendor,'RESS_VOL');
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion