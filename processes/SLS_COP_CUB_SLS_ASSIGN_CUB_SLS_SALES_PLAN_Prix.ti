#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   09/05/2019                                                        #
#                                                                            #
# Fait par :    JMB 		                                                 #
#                                                                            #
# Action : Processus copie des prix de SLS_SALES_PLAN vers SLS_ASSIGN		 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_SALES_PLAN';
C_Cube_Cible = 'SLS_ASSIGN';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';
C_zPARAM = 'zPARAM';
C_zSelect = 'zSELECT';
C_Convert_Currency = 'SLS_CURRENCY_RATE';

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_SALES_IND = 'SLS_SALES_PLAN_IND';
D_VERSION = 'SLS_VERSION';
D_LINE = '1_G_LINE';
D_ASSIGN_IND = 'SLS_ASSIGN_IND';

#--------------------Elements--------------------#
vElem_Unit_4Net = 'Unitary 4Net';
vElem_4Net = '4Net';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#===============================#
#	Vérification des paramètres	#
#===============================#

# Initialisation du message d'erreur
e_Message_Prolog = '';

# Récupération de la phase en cours et des paramètres de cette phase
Curr_Phase = CellGetS(C_zPARAM,'Phase','Value');
P_Phase = CellGetS(C_zSelect, vClient ,'Current Phase');
v_FirstSim = ATTRS(D_CURRENT_PHASE,P_phase, 'First Simulation month');
v_FirstSimInd = ATTRS(D_PERIOD,v_FirstSim, 'Index');

# Récupération de la devise sélectionnée
P_Currency = CellGetS(C_zSelect, vClient ,'Currency');

# Récupération de la sales org sélectionnée
P_SALES_ORG = CellGetS(C_zSelect,vClient, 'Sales Organisation');

# Récupération de la distrib channel sélectionnée
P_DISTRIB_CHANNEL = CellGetS(C_zSelect,vClient, 'Distrib Channel');

# Récupération du Sales Group sélectionné
P_SALES_GROUP = CellGetS(C_zSelect,vClient, 'Sales Group');
If(P_SALES_GROUP @= '');
	P_SALES_GROUP = 'TOTAL_SALES_GROUP';
EndIf;

#=======================================#
#	Désactivation de la consignation	#
#=======================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#===========================#
#	Calcul des variables	#
#===========================#

#--------------------Requêtes MDX--------------------#
# Périodes prévisionnelles
vMDX_PERIOD = '{{[' | D_PERIOD | '].[Campaign]},{TM1SubsetToSet([' | D_PERIOD | '] , "Current Phase Periods")}}';
# Sales org
IF(P_SALES_ORG @= ''); P_SALES_ORG = 'TOTAL SALES ORG'; ENDIF;
vMDX_SALES_ORG = '{{[' | D_SALES_ORG | '].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SALES_ORG | '].[' | P_SALES_ORG | '])},0)}}';
# Distrib channel
IF(P_DISTRIB_CHANNEL @= ''); P_DISTRIB_CHANNEL = 'Total Distribution Channel'; ENDIF;
vMDX_DISTRIB_CHANNEL = '{{[' | D_DISTRIB_CHANNEL | '].[Total Distribution Channel]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_DISTRIB_CHANNEL | '].[' | P_DISTRIB_CHANNEL | '])},0)}}';
# Material plan
vMDX_MATERIAL_PLAN = '{{[' | D_MATERIAL_PLAN | '].[TOTAL_PLANNING_MATERIAL]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_MATERIAL_PLAN | '].[TOTAL_PLANNING_MATERIAL])},0)}}';
# Customer
#modif EMO le 11/12/2019 : on se base uniquement sur l'attribut sales group (vue source ET vue cible)
IF(P_SALES_GROUP @= 'TOTAL_SALES_GROUP');
	vMDX_CUSTOMER = '{{[' | D_CUSTOMER | '].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_CUSTOMER | '].[TOTAL_CUSTOMER])},0)}}';
ELSE;
	vMDX_CUSTOMER = '{{[' | D_CUSTOMER | '].[TOTAL_CUSTOMER]},{FILTER(TM1FILTERBYLEVEL({DESCENDANTS([' | D_CUSTOMER | '].[TOTAL_CUSTOMER])},0), [SLS_CUSTOMER].[Sales Group Name] = "' | P_SALES_GROUP | '"")}}';
ENDIF;

# Indicateurs
vMDX_IND_SALES = '{{[' | D_SALES_IND | '].[Sales Volume]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SALES_IND | '].[' | vElem_Unit_4Net | '])},0)},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SALES_IND | '].[' | vElem_4Net | '])},0)}}';
vMDX_IND_ASSIGN = '{{[' | D_ASSIGN_IND | '].[Sales Volume]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_ASSIGN_IND | '].[' | vElem_Unit_4Net | '])},0)},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_ASSIGN_IND | '].[' | vElem_4Net | '])},0)}}';

# Sales Group
# IF(P_SALES_GROUP @= ''); P_SALES_GROUP = 'TOTAL_SALES_GROUP'; ENDIF;
# vMDX_SALES_GROUP = '{{[' | D_SALES_GROUP | '].[TOTAL_SALES_GROUP]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SALES_GROUP | '].[' | P_SALES_GROUP | '])},0)}}';


#===============================================#
#	Initialisation de la vue à réinitialiser	#
#===============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
SubsetDestroy(D_SALES_ORG, subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase);
SubsetDestroy(D_ASSIGN_IND, subset_erase);
SubsetDestroy(D_CUSTOMER, subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_erase);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase, P_Phase, 1);
# 1_G_PERIOD
subsetcreateByMdx(subset_erase,vMDX_PERIOD);
SubsetElementDelete(D_PERIOD, subset_erase, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_erase,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_erase, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_erase,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_erase, 1);
# SLS_ASSIGN_IND
subsetcreateByMdx(subset_erase,vMDX_IND_ASSIGN);
SubsetElementDelete(D_ASSIGN_IND, subset_erase, 1);
#SLS_CUSTOMER
subsetcreateByMdx(subset_erase,vMDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_erase, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CURRENT_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_ORG,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_ASSIGN_IND,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CUSTOMER,subset_erase);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);
 
#--------------------Suppression des valeurs de la vue--------------------#
ViewZeroOut( C_Cube_Cible, view_erase );

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
SubsetDestroy(D_SALES_ORG, subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase);
SubsetDestroy(D_ASSIGN_IND, subset_erase);
SubsetDestroy(D_CUSTOMER, subset_erase);


#===================================================#
#	Initialisation de la vue à copier/vue source	#
#===================================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CURRENCY, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
#SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_SALES_IND, subset_copy);
 
#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Source,view_copy);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, P_Phase, 1);
# 1_G_PERIOD
subsetcreateByMdx(subset_copy,vMDX_PERIOD);
SubsetElementDelete(D_PERIOD, subset_copy, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_copy,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_copy, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_copy,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_copy, 1);
# 1_G_CURRENCY
SubsetCreate(D_CURRENCY, subset_copy);
SubsetElementInsert(D_CURRENCY, subset_copy, 'EUR', 1);
SubsetElementInsert(D_CURRENCY, subset_copy, 'USD', 1);
# 1_G_VOLUME_UNIT
SubsetCreate(D_VOLUME_UNIT, subset_copy);
SubsetElementInsert(D_VOLUME_UNIT, subset_copy, 'TO', 1);
SubsetElementInsert(D_VOLUME_UNIT, subset_copy, 'TSP', 1);
SubsetElementInsert(D_VOLUME_UNIT, subset_copy, 'HLAP', 1);
# SLS_CUSTOMER
subsetcreateByMdx(subset_copy,vMDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_copy, 1);
# SLS_MATERIAL_PLAN
subsetcreateByMdx(subset_copy,vMDX_MATERIAL_PLAN);
SubsetElementDelete(D_MATERIAL_PLAN, subset_copy, 1);

# SLS_SALES_GROUP
# subsetcreateByMdx(subset_copy,vMDX_SALES_GROUP);
# SubsetElementDelete(D_SALES_GROUP, subset_copy, 1);

# SLS_SALES_PLAN_IND
subsetcreateByMdx(subset_copy,vMDX_IND_SALES);
SubsetElementDelete(D_SALES_IND, subset_copy, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENCY,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_VOLUME_UNIT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_MATERIAL_PLAN,subset_copy);
#ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_GROUP,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_IND,subset_copy);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,0);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 0);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Source;
DatasourceCubeview=view_copy;
#endregion
#region Data
Division = ELPAR( D_MATERIAL_PLAN, vMATERIAL_PLAN, 1);
Default_Unit = ATTRS('1_G_MATERIAL', Division, 'Volume_Unit');
If(vVOLUME_UNIT @<> Default_Unit);
	itemskip;
EndIf;

Converted_Value = vValue;

#Currency = USD si Export Sucre
If(vDISTRIB_CHANNEL @= '40' & Division @= 'D_10');
	If(vCURRENCY @<> 'USD');
    	itemskip;
    Else;
    	Convert_Currency = CellGetN(C_Convert_Currency, vCurrent_Phase, vSales_Org, 'USD', 'EUR');
		Converted_Value = Converted_Value * Convert_Currency;
    EndIf;
Else; 
	If(vCURRENCY @<> 'EUR');
    	itemskip;
    EndIf;
EndIf;

# Copie des prix sur SLS_ASSIGN (Actual et Final version)
CellPutN(Converted_Value,C_Cube_Cible,vCURRENT_PHASE,'Actual Version',vPERIOD,vSALES_ORG,vDISTRIB_CHANNEL,vMATERIAL_PLAN,vCUSTOMER,'1',vSALES_PLAN_IND);
CellPutN(Converted_Value,C_Cube_Cible,vCURRENT_PHASE,'Final Version',vPERIOD,vSALES_ORG,vDISTRIB_CHANNEL,vMATERIAL_PLAN,vCUSTOMER,'1',vSALES_PLAN_IND);

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#=======================================#
#	Destruction des objets temporaires	#
#=======================================#

#--------------------Vue source--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CURRENCY, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
#SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_SALES_IND, subset_copy);
#endregion