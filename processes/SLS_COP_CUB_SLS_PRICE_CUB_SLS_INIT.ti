#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#################################################################################
#                         DESCRIPTION DU PROCESSUS                           	#
#                                                                            	#
# Date :   21/03/2019                                                        	#
#                                                                            	#
# Fait par :    Ann BESNARD                                                  	#
#                                                                            	#
# Action : Processus d'initialisation de la grille tarifaire pour un indicateur #
#		La phase a été initialisée dans le cube SLS_INIT	                 	#
#																			 	#
#################################################################################

# ELH - 28/03/2023
# Pas de contrat indexé dans le cube SLS_PRICE
# Si l'indicateur correspond à un contrat indexé, rien ne sera réalisé
# Dimension indicateur du cube source (SLS_INIT)
D_INIT_IND = 'SLS_INIT_IND';
# Attribut Standard / Indexé de l'indicateur
sIndexeStandard = AttrS ( D_INIT_IND , P_Indicateur , 'Indexé_Standard' ) ;
IF ( sIndexeStandard @= 'Z' ) ;

#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_INIT';
C_Cube_Cible = 'SLS_PRICE';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';
C_zPARAM = 'zPARAM';
C_CURRENCY_RATE = 'SLS_CURRENCY_RATE';

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_MATERIAL_PLAN_PRICE = 'SLS_MATERIAL_PLAN_PRICE';
D_CUSTOMER = 'SLS_CUSTOMER';
D_CUSTOMER_PRICE = 'SLS_CUSTOMER_PRICE';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR';
D_PRICE_IND = 'SLS_PRICE_IND';

#--------------------Elements--------------------#
e_Message_Prolog = '';

Curr_Phase = CellGetS(C_zPARAM,'Phase','Value');



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';



#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;



DatasourceASCIIThousandSeparator='';


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Création des objets--------------------#
SubsetDeleteAllElements( D_PERIOD, subset_copy );
#D_PERIOD
If(P_Perimetre @= 'GMS' & (P_Indicateur @= 'RPP_UNIT' % P_Indicateur @= 'CPV_UNIT' % P_Indicateur @= 'NIP_UNIT') & P_Period @<>'' & SubsetElementGetIndex( D_PERIOD, 'Input_RPP_CPV', P_Period,1)=0);
 	#On laisse vide => pas de copie (la période sélectionnée est plus fine que la période à initialiser)
ElseIf(P_PERIOD @<> '');
    MDX_PERIOD = 'INTERSECT({{[1_G_PERIOD].[Campaign]},{FILTER({EXCEPT({EXCEPT({TM1SUBSETALL( [1_G_PERIOD] )}, {TM1FILTERBYPATTERN( {TM1SUBSETALL( [1_G_PERIOD] )}, "N/A*")})},{TM1FILTERBYPATTERN( {TM1SUBSETALL( [1_G_PERIOD] )}, "CUMUL*")})}, [1_G_PERIOD].[Flag_Tec] = 0.000000)}},{TM1FILTERBYLEVEL({DESCENDANTS({[1_G_PERIOD].['|P_Period|']})},0)})';
	SubsetMDXSet( D_PERIOD, subset_copy, MDX_PERIOD );
ElseIf(P_Indicateur @= 'NIP_UNIT' % P_Indicateur @= 'RPP_UNIT' % P_Indicateur @= 'CPV_UNIT');
	MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD],"RPP_CPV","public")}';
    SubsetMDXSet( D_PERIOD, subset_copy, MDX_PERIOD );
Else;
	MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}';
    SubsetMDXSet( D_PERIOD, subset_copy, MDX_PERIOD );
EndIf;

#D_MATERIAL_PLAN
SubsetDeleteAllElements( D_MATERIAL_PLAN, subset_copy );
If(P_Indicateur @= 'BASE_UNIT' % P_Indicateur @= 'RPP_UNIT' % P_Indicateur @= 'CPV_UNIT' % P_Indicateur @= 'PROMO_UNIT' % P_Perimetre @= 'GMS');
	MDX_DIVISION = '{TM1FILTERBYLEVEL({DESCENDANTS({[SLS_MATERIAL_PLAN].['|P_Division|']})},0)}';
ElseIf(P_Perimetre @= 'BoulPat_RHF');
	MDX_DIVISION = '{[SLS_MATERIAL_PLAN].[Total Planning Material]}';
EndIf;
SubsetMDXSet( D_MATERIAL_PLAN, subset_copy, MDX_DIVISION );

#D_CUSTOMER
SubsetDeleteAllElements( D_CUSTOMER, subset_copy );
If(P_Perimetre @= 'GMS');
	If(P_Sales_Group @= '' & P_Country @= '');
		MDX_CUSTOMER = '{EXCEPT({TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_CUSTOMER])},0)},DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))}';
	ElseIf(P_Country @= '');
		MDX_CUSTOMER = '{EXCEPT({TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Sales Group] = "'|P_SAles_Group|'")}, 0)},DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))}';
	ElseIf(P_Sales_Group @='');
		MDX_CUSOMER = '{EXCEPT({TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Country] = "'|P_COuntry|'")}, 0)},	DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))}';
	Else;
		MDX_CUSTOMER = '{EXCEPT({TM1FILTERBYLEVEL( {FILTER( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Country] = "'|P_COuntry|'")}, [SLS_CUSTOMER].[Sales Group] = "'|P_Sales_Group|'")}, 0)},	DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))}';
	EndIf;
Else;
	If(P_Sales_Group @= '' & P_Country @= '');
		MDX_CUSTOMER = '{{INTERSECT({TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_CUSTOMER])},0)},DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))},
						{INTERSECT({TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_CUSTOMER])},0)},DESCENDANTS([SLS_CUSTOMER].[IC1 - E00070]))}}';
	ElseIf(P_Country @= '');
		MDX_CUSTOMER = '{{INTERSECT({TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Sales Group] = "'|P_SAles_Group|'")}, 0)},{DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))}}, 
        				{INTERSECT({TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Sales Group] = "'|P_SAles_Group|'")}, 0)},{DESCENDANTS([SLS_CUSTOMER].[IC1 - E00070]))}}}';
	ElseIf(P_Sales_Group @='');
		MDX_CUSOMER = '{{INTERSECT({TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Country] = "'|P_COuntry|'")}, 0)},{DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))}}, 
        				{INTERSECT({TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Country] = "'|P_COuntry|'")}, 0)},{DESCENDANTS([SLS_CUSTOMER].[IC1 - E00070]))}}}';
	Else;
		MDX_CUSTOMER = '{{INTERSECT({TM1FILTERBYLEVEL( {FILTER( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Country] = "'|P_COuntry|'")}, [SLS_CUSTOMER].[Sales Group] = "'|P_Sales_Group|'")}, 0)},{DESCENDANTS([SLS_CUSTOMER].[IC1 - E00095]))}}, 
        				{INTERSECT({TM1FILTERBYLEVEL( {FILTER( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER] )}, [SLS_CUSTOMER].[Country] = "'|P_COuntry|'")}, [SLS_CUSTOMER].[Sales Group] = "'|P_Sales_Group|'")}, 0)},{DESCENDANTS([SLS_CUSTOMER].[IC1 - E00070]))}}}';
	EndIf;
EndIf;
SubsetMDXSet( D_CUSTOMER, subset_copy, MDX_CUSTOMER );

#D_INIT_IND
SubsetDeleteAllElements( D_INIT_IND, subset_copy );
SubsetElementInsert( D_INIT_IND, subset_copy, P_Indicateur, 1 );


# définition de la vue source#

DatasourceCubeview= view_copy ;

#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#
#Définit après pour le subset contenant les lab office de SLS_MATERIAL_PLAN_PRICe

#--------------------Création des objets--------------------#
#D_PERIOD
SubsetDeleteAllElements( D_PERIOD, subset_erase );
If(P_Perimetre @= 'GMS' & (P_Indicateur @= 'RPP_UNIT' % P_Indicateur @= 'CPV_UNIT' % P_Indicateur @= 'NIP_UNIT') & P_Period @<>'' & SubsetElementGetIndex( D_PERIOD, 'Input_RPP_CPV', P_Period,1)=0);
 	#Pas de copie donc pas de RAZ
ElseIf(P_PERIOD @<> '');
    MDX_PERIOD = 'INTERSECT({{[1_G_PERIOD].[Campaign]},{FILTER({EXCEPT({EXCEPT({TM1SUBSETALL( [1_G_PERIOD] )}, {TM1FILTERBYPATTERN( {TM1SUBSETALL( [1_G_PERIOD] )}, "N/A*")})},{TM1FILTERBYPATTERN( {TM1SUBSETALL( [1_G_PERIOD] )}, "CUMUL*")})}, [1_G_PERIOD].[Flag_Tec] = 0.000000)}},{TM1FILTERBYLEVEL({DESCENDANTS({[1_G_PERIOD].['|P_Period|']})},0)})';
	SubsetMDXSet( D_PERIOD, subset_erase, MDX_PERIOD );
ElseIf(P_Indicateur @= 'NIP_UNIT' % P_Indicateur @= 'RPP_UNIT' % P_Indicateur @= 'CPV_UNIT');
	MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD],"Input_RPP_CPV","public")}';
    SubsetMDXSet( D_PERIOD, subset_erase, MDX_PERIOD );
Else;
	MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}';
    SubsetMDXSet( D_PERIOD, subset_erase, MDX_PERIOD );
EndIf;

#D_MATERIAL_PLAN_PRICE
SubsetDeleteAllElements( D_MATERIAL_PLAN_PRICE, subset_erase );
If(P_Indicateur @= 'BASE_UNIT' % P_Indicateur @= 'RPP_UNIT' % P_Indicateur @= 'CPV_UNIT' % P_Indicateur @= 'PROMO_UNIT');
	MDX_DIVISION = '{TM1SUBSETALL([SLS_MATERIAL_PLAN_PRICE])}';
ElseIf(P_Perimetre @= 'GMS');
	MDX_DIVISION = '{{[SLS_MATERIAL_PLAN_PRICE].[N/A Material Plan]}';
    SubSize_Mat_Plan = SubsetGetSize( D_MATERIAL_PLAN, subset_copy );
	nb = 1;
    While( nb <= SubSize_Mat_Plan);
    	MDX_Division = MDX_Division | ',{[SLS_MATERIAL_PLAN_PRICE].['|SubsetGetElementName( D_MATERIAL_PLAN, subset_copy, nb )|']}';
    	nb = nb + 1;
    End;
    MDX_Division = MDX_Division | '}';
ElseIf(P_Perimetre @= 'BoulPat_RHF');
	MDX_Division = '{[SLS_MATERIAL_PLAN_PRICE].[N/A Material Plan]}';
EndIf;
SubsetMDXSet( D_MATERIAL_PLAN_PRICE, subset_erase, MDX_DIVISION );

#D_SALES_GROUP
SubsetDeleteAllElements( D_SALES_GROUP, subset_erase );
If(P_Perimetre @= 'GMS');
    SubsetElementInsert( D_SALES_GROUP, subset_erase, 'Admin Retail', 1 );
Else;
	MDX_SALES_GROUP = 'EXCEPT( {TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_SALES_GROUP])},0)},{[SLS_SALES_GROUP].[Admin Retail]} )'; 
	SubsetMDXSet( D_SALES_GROUP, subset_erase, MDX_SALES_GROUP );
EndIf;

#D_PRICE_IND
SubsetDeleteAllElements( D_PRICE_IND, subset_erase );
MDX_IND = '{FILTER(
{TM1SUBSETALL([SLS_PRICE_IND])},
[SLS_PRICE_IND].[Paramètre]@= "'|P_Indicateur|'"
)}';
SubsetMDXSet( D_PRICE_IND, subset_erase, MDX_IND );

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

# Fin contrôle Standard / Indexé
ENDIF ;
# Fin ELH - 28/03/2023
#endregion
#region Data
# ELH - 28/03/2023
# Pas de contrat indexé dans le cube SLS_PRICE
# Si l'indicateur correspond à un contrat indexé, rien ne sera réalisé       
IF ( sIndexeStandard @= 'Z' ) ;

If(P_Perimetre @= 'GMS');
	vELEM_SALES_GROUP = 'Admin Retail';
Else;
	vELEM_SALES_GROUP = AttrS(D_CUSTOMER, vELEM_CUSTOMER, 'Sales Group');
EndIf; 

#Détermination du Planning Material Cible
If(vELEM_MATERIAL_PLAN @='TOTAL_PLANNING_MATERIAL');
	vELEM_MATERIAL_PLAN_CIBLE = 'N/A_PLANNING_MATERIAL';
Else;
	vELEM_MATERIAL_PLAN_CIBLE = vELEM_MATERIAL_PLAN;
EndIf;


#Détermination de la période cible
If(ELLEV(D_PERIOD, vELEM_PERIOD)<>0);
	vELEM_PERIOD = AttrS(D_PERIOD, vELEM_PERIOD, 'Caption');
	vELEM_PERIOD_CIBLE = vELEM_PERIOD | ' Input';
Else;
	vELEM_PERIOD_CIBLE = vELEM_PERIOD;
EndIf;

#On se place au Lab Office pour les éléments saisis dans PRICE au lab office et on récupère la valeur associée au lab Office dans la hiérarchie connexe
If((P_Indicateur @<> 'BASE_UNIT' & P_Indicateur @<> 'RPP_UNIT' & P_Indicateur @<> 'CPV_UNIT' & P_Indicateur @<> 'PROMO_UNIT') & P_Perimetre @= 'GMS');
	Lab = AttrS(D_MATERIAL_PLAN, vELEM_MATERIAL_PLAN, 'Lab');
	Value = CellGetN( C_Cube_Source, vELEM_CURRENT_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_VOLUME_UNIT, 'Lab:'|Lab,
    	vELEM_CUSTOMER, vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR, vELEM_IND);
    vELEM_MATERIAL_PLAN_CIBLE = Lab;
EndIf;

#On copie la valeur unitaire
If(DIMIX(D_PRICE_IND,vELEM_IND|'_CDG')<>0);
    	CellPutN(Value, C_Cube_Cible, vELEM_CURRENT_PHASE, vELEM_PERIOD_CIBLE, vELEM_SALES_ORG, 
			vELEM_DISTRIB_CHANNEL, vELEM_CUSTOMER, vELEM_MATERIAL_PLAN_CIBLE, vELEM_SALES_GROUP, vELEM_IND|'_CDG');

EndIf;

#On calcul et affecte la valeur en pourcentage
If(DIMIX(D_PRICE_IND,vELEM_IND|'_PER_CDG')<>0);
	#Si on est au Lab Office on va chercher unit base price sur le lab office dans la hiérarchie connexe lab office
	If((P_Indicateur @<> 'BASE_UNIT' & P_Indicateur @<> 'RPP_UNIT' & P_Indicateur @<> 'CPV_UNIT' & P_Indicateur @<> 'PROMO_UNIT') & P_Perimetre @= 'GMS');
    	Unit_Base_Price = CellGetN( C_Cube_Source, vELEM_CURRENT_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_VOLUME_UNIT, 'Lab:'|Lab,
    		vELEM_CUSTOMER, vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR, 'BASE_UNIT');
	#Sinon on va la chercher sur l'élément en cours
	Else;
		Unit_Base_Price = CellGetN(C_Cube_Source, vELEM_CURRENT_PHASE, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_VOLUME_UNIT, vELEM_MATERIAL_PLAN, vELEM_CUSTOMER, vELEM_SHIP_POINT, vELEM_SHIP_PLANT, vELEM_PROD_PLANT, vELEM_VENDOR, 'BASE_UNIT');
	EndIf;
    
	Value = Value \ Unit_Base_Price;
	CellPutN(Value, C_Cube_Cible, vELEM_CURRENT_PHASE, vELEM_PERIOD_CIBLE, vELEM_SALES_ORG, 
		vELEM_DISTRIB_CHANNEL, vELEM_CUSTOMER, vELEM_MATERIAL_PLAN_CIBLE, vELEM_SALES_GROUP, vELEM_IND|'_PER_CDG');
        
EndIf;


    ####################################      
#		AsciiOutput('..\Tests\cop_init_Price.csv','RPP - UNit Base Price',NumberToString(Value), C_Cube_Cible, 
#	    	vELEM_CURRENT_PHASE, vELEM_PERIOD_CIBLE, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_CUSTOMER, 
#	        vELEM_MATERIAL_PLAN_CIBLE, vELEM_SALES_GROUP, vELEM_IND|'_PER_CDG');
	#################################### 
    
# Fin contrôle Standard / Indexé
ENDIF ;
# Fin ELH - 28/03/
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****









#endregion