#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   09/05/2019                                                        #
#                                                                            #
# Fait par :    Elisabeth Mounier                                            #
#                                                                            #
# Action : Processus de copie des commandes vers Reporting.					 #																 #
##############################################################################

#Reporting provisoire : copie sur Current Phase

#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_ORDER';
C_Cube_Cible = 'SLS_REPORTING';
C_Convert = 'SLS_VOL_CONVERT';

#--------------------Dimensions--------------------#
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_ORDER_NB = 'SLS_ORDER_NB';
D_ORDER_STATUS = 'SLS_ORDER_STATUS';
D_ORDER_ITEM = 'SLS_ORDER_ITEM';
D_ORDER_IND = 'SLS_ORDER_IND';

D_PHASE_REP = '1_G_PHASE_REP';
D_PAYER = 'SLS_PAYER';
D_SOLD_TO = 'SLS_SOLD_TO';
D_MAT_FR_GROUP = 'SLS_MAT_FREIGHT_GROUP';
D_INCOTERM = 'SLS_INCOTERM';
D_QUOTA = 'SLS_Q_HQ';
D_REPORTING_IND = 'SLS_REPORTING_IND';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';

#D_VOLUME_UNIT_IND = 'SLS_VOL_CONVERT_IND';

#--------------------Elements--------------------#
e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

#--------------------- Paramètres -----------#
P_PHASE = 'Current Phase';

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


subset_volume_unit = 'subset volume unit';
Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);

#------------Création d'un subset contenant tous les éléments fins----------
MDX = '{{[1_G_VOLUME_UNIT].[TO]},{TM1FILTERBYLEVEL( {TM1SUBSETALL( [1_G_VOLUME_UNIT] )}, 0)}}';
SubsetCreatebyMDX(subset_volume_unit, MDX);
SubsetElementDelete(D_VOLUME_UNIT,subset_volume_unit, 1);

subset_volume_unit_size = SubsetGetsize(D_VOLUME_UNIT, subset_volume_unit );


DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#        Initialisation de la vue à supprimer#
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE_REP,subset_erase);
Subsetdestroy(D_QUOTA,subset_erase);
Subsetdestroy(D_MAT_FR_GROUP,subset_erase);
Subsetdestroy(D_PAYER,subset_erase);
Subsetdestroy(D_INCOTERM,subset_erase);
Subsetdestroy(D_PROD_PLANT,subset_erase);
Subsetdestroy(D_REPORTING_IND,subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE_REP,subset_erase);
SubsetElementInsert(D_PHASE_REP, subset_erase, P_PHASE, 1);

#D_QUOTA
# subsetcreate(D_QUOTA,subset_erase);
# SubsetElementInsert(D_QUOTA, subset_erase, 'HORS_QUOTA', 1);
SubsetCreatebyMDX( subset_erase , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| D_QUOTA |'] )}, 0)}') ;

#D_MAT_FR_GROUP
subsetcreate(D_MAT_FR_GROUP,subset_erase);
SubsetElementInsert(D_MAT_FR_GROUP, subset_erase, 'N/A_MAT_FR_GROUP', 1);

#D_PAYER
subsetcreate(D_PAYER,subset_erase);
SubsetElementInsert(D_PAYER, subset_erase, 'N/A_PAYER', 1);

#D_INCOTERM
subsetcreate(D_INCOTERM,subset_erase);
SubsetElementInsert(D_INCOTERM, subset_erase, 'N/A_INCOTERM', 1);

#D_PROD_PLANT
subsetcreate(D_PROD_PLANT,subset_erase);
SubsetElementInsert(D_PROD_PLANT, subset_erase, 'N/A_PROD_PLANT', 1);

#D_REPORTING_IND
MDX_IND = '{{[SLS_REPORTING_IND].[Sales Volume Order]}, {TM1FILTERBYLEVEL(DESCENDANTS([SLS_REPORTING_IND].[Sales Volume Order]) , 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_IND);
SubsetElementDelete( D_REPORTING_IND, subset_erase, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE_REP,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD, 'Current Phase Periods');
ViewSubsetAssign(C_Cube_Cible,view_erase, D_QUOTA,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_MAT_FR_GROUP,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PAYER,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_INCOTERM,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PROD_PLANT,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_REPORTING_IND,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE_REP,subset_erase);
Subsetdestroy(D_QUOTA,subset_erase);
Subsetdestroy(D_MAT_FR_GROUP,subset_erase);
Subsetdestroy(D_PAYER,subset_erase);
Subsetdestroy(D_INCOTERM,subset_erase);
Subsetdestroy(D_PROD_PLANT,subset_erase);
Subsetdestroy(D_REPORTING_IND,subset_erase);

#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy( D_ORDER_IND, subset_copy );

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_ORDER_IND
MDX_IND = '{{[SLS_ORDER_IND].[Sales Volume]}, {TM1FILTERBYLEVEL(DESCENDANTS([SLS_ORDER_IND].[Sales Volume]) , 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_IND);
SubsetElementDelete( D_ORDER_IND, subset_copy, 1);


#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,'Current Phase Periods');
ViewSubsetAssign(C_Cube_Source,view_copy, D_ORDER_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy ;
#endregion
#region Data
#Pour chaque Material, récupérer l'unité par défaut
#Puis convertir dans toutes les unités de reporting concernées

Division = ELPAR(D_MATERIAL, ELPAR(D_MATERIAL, vMaterial, 1), 1);
Division_Name = ATTRS(D_MATERIAL_PLAN, Division, 'Caption');
Default_Unit = ATTRS(D_MATERIAL, Division, 'Volume_Unit');

If(Default_Unit @<> vVolume_Unit);
	itemskip;
EndIf;

Sold_To = CellGetS(C_Cube_Source, vPeriod, vSales_Org, vDistrib_Channel,'N/A_VOLUME_UNIT', vMaterial, vCustomer,vSales_Group, vOrder_NB, vOrder_Status, vOrder_Item, 'Sold-to');
Shipping_Point = CellGetS(C_Cube_Source, vPeriod, vSales_Org, vDistrib_Channel,'N/A_VOLUME_UNIT', vMaterial, vCustomer,vSales_Group, vOrder_NB, vOrder_Status, vOrder_Item, 'Shipping Point');
Shipping_Plant = CellGetS(C_Cube_Source, vPeriod, vSales_Org, vDistrib_Channel,'N/A_VOLUME_UNIT', vMaterial, vCustomer,vSales_Group, vOrder_NB, vOrder_Status, vOrder_Item, 'Shipping Plant');
Vendor = CellGetS(C_Cube_Source, vPeriod, vSales_Org, vDistrib_Channel,'N/A_VOLUME_UNIT', vMaterial, vCustomer,vSales_Group, vOrder_NB, vOrder_Status, vOrder_Item, 'Vendor');
If(Sold_To @= '');
	Sold_To = 'N/A_SOLD_TO';
EndIf;
If(Shipping_Point @= '');
	Shipping_Point = 'N/A_SHIP_POINT';
EndIf;
If(Shipping_Plant @= '');
	Shipping_Plant = 'N/A_SHIP_PLANT';
EndIf;
If(Vendor @= '');
	Vendor = 'N/A_VENDOR';
EndIf;

Value_Default_Unit = CellGetN(C_Cube_Source, vPeriod, vSales_Org, vDistrib_Channel,Default_Unit, vMaterial, vCustomer,vSales_Group, vOrder_NB, vOrder_Status, vOrder_Item, Indicateur);

cpt = 1;
while(cpt <= subset_volume_unit_size); 
	Volume_Unit = SubsetGetElementName( D_VOLUME_UNIT, subset_volume_unit, cpt);
    
	If(DIMIX('}ElementAttributes_1_G_VOLUME_UNIT', Division_Name | '_Report') <> 0 );
    	If(ATTRN(D_VOLUME_UNIT, Volume_Unit, Division_Name | '_Report') = 1);
     	#conversion pour les volumes
        Convert = CellGetN(C_Convert, ELPAR(D_MATERIAL, vMaterial, 1), Volume_Unit, Default_Unit);
        Converted_Value = Value_Default_Unit \ Convert;
        CellIncrementN(ROUNDP(Converted_Value\2,2), C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, Volume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), 'N/A_PAYER', Sold_To, Shipping_Point, Shipping_Plant, 'N/A_PROD_PLANT', Vendor, 'N/A_MAT_FR_GROUP', 'N/A_INCOTERM', 'Z', Indicateur | '_ORDER');
        CellIncrementN(ROUNDP(Converted_Value\2,2), C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, Volume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), 'N/A_PAYER', Sold_To, Shipping_Point, Shipping_Plant, 'N/A_PROD_PLANT', Vendor, 'N/A_MAT_FR_GROUP', 'N/A_INCOTERM', 'I', Indicateur | '_ORDER'); 
     	EndIf;
    ElseIf(Volume_Unit @= Default_Unit);
    	
		#Copie sur l'unité par défaut seulement si le subset de reporting n'est pas défini
     
		#On incrémente car on n'a pas les notions de Order_item, order_status etc dans reporting
		CellIncrementN(ROUNDP(Value_Default_Unit\2,2), C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, Default_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), 'N/A_PAYER', Sold_To, Shipping_Point, Shipping_Plant, 'N/A_PROD_PLANT', Vendor, 'N/A_MAT_FR_GROUP', 'N/A_INCOTERM', 'Z', Indicateur | '_ORDER');
        CellIncrementN(ROUNDP(Value_Default_Unit\2,2), C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, Default_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), 'N/A_PAYER', Sold_To, Shipping_Point, Shipping_Plant, 'N/A_PROD_PLANT', Vendor, 'N/A_MAT_FR_GROUP', 'N/A_INCOTERM', 'I', Indicateur | '_ORDER');
    EndIf;
 	cpt = cpt + 1;
 End;
 
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);

SubsetDestroy( D_ORDER_IND, subset_copy );

#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion