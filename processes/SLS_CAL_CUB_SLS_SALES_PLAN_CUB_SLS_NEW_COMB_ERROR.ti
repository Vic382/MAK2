#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   28/03/2019                                                        #
#                                                                            #
# Fait par :    Elisabeth Mounier                                                  #
#                                                                            #
# Action : Processus de copie des nouvelles combinaisons commerciales 
#		de SLS_NEW_COMB vers SLS_SALES_PLAN, suite à la saisie en masse des 
#		commerciaux
#																			 #
##############################################################################



#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_NEW_COMBINATION';
C_Cube_Cible = 'SLS_SALES_PLAN';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';
C_zPARAM = 'zPARAM';
C_zSelect = 'zSELECT';

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CUSTOMER = 'SLS_CUSTOMER';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_LINE = '1_G_LINE';
D_COMB_TYPE = 'SLS_COMB_TYPE';
D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_PLAN_IND = 'SLS_SALES_PLAN_IND';
D_NEW_COMB_IND = 'SLS_NEW_COMBINATION_IND';

#--------------------Elements--------------------#
e_Message_Prolog = '';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_erase = 'z_erase_new_comb_' | vUSER |'_' | vPRO_NAME;
#view_erase_cible = 'z_erase_sales_plan_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_new_comb_' | vUSER |'_' | vPRO_NAME;
#subset_erase_cible = 'z_erase_sales_plan' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;



DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#        Désactivation de la consignation             #
#====================================#

# OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
# CUBESETLOGCHANGES(C_Cube_Cible, 0);

P_Sales_Group = CellGetS(C_zSelect,vClient, 'Sales Group');
P_Phase = CellGetS(C_zSelect, vClient ,'Current Phase Sales');

#la saisie des commerciaux se fait seulement sur les PM de la division sélectionnée
P_Division = CellGetS(C_zSelect, vClient ,'Division');

e_message_Data = '';

#=========================================#
# Initialisation de la vue à supprimer # REINIT de NEW COMB, ce n'est pas la vue cible
#=========================================#

#pas de restriction sur les périodes à faire car on supprime la vue à la fin de ce process. 

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_SALES_GROUP, subset_erase);
SubsetDestroy(D_COMB_TYPE, subset_erase);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_erase);

#D_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_erase);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase, P_Phase, 1);

#D_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_erase);
SubsetElementInsert(D_SALES_GROUP, subset_erase, P_Sales_Group, 1);

#D_COMB_TYPE
subsetcreate(D_COMB_TYPE, subset_erase);
SubsetElementInsert(D_COMB_TYPE, subset_erase, 'Sales', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_erase, D_CURRENT_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Source,view_erase, D_SALES_GROUP,subset_erase);
ViewSubsetAssign(C_Cube_Source,view_erase, D_COMB_TYPE,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_erase,1);
ViewSetSkipCalcs(C_Cube_Source,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Source,view_erase, 1);




#=========================================#
# Initialisation de la vue à copier/vue source #
#=========================================#

#pas de restriction sur les périodes à faire car on supprime la vue à la fin de ce process. 

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_COMB_TYPE, subset_copy);
SubsetDestroy(D_NEW_COMB_IND, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, P_Phase, 1);

#D_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_copy);
SubsetElementInsert(D_SALES_GROUP, subset_copy, P_Sales_Group, 1);

#D_COMB_TYPE
subsetcreate(D_COMB_TYPE, subset_copy);
SubsetElementInsert(D_COMB_TYPE, subset_copy, 'Sales', 1);

#D_NEW_COMB_IND
subsetcreate(D_NEW_COMB_IND, subset_copy);
SubsetElementInsert(D_NEW_COMB_IND, subset_copy, 'Volume', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_GROUP,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_COMB_TYPE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_NEW_COMB_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy ;

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

Customer = CellGetS(C_Cube_Source, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, vSalesGroup, vLine, vCombType, 'Customer');
Material_Plan = CellGetS(C_Cube_Source, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, vSalesGroup, vLine, vCombType, 'Planning Material');

#Unité par défaut de l'activité en cours
Division = ELPAR(D_MATERIAL_PLAN, Material_Plan, 1);
Default_Unit = AttrS(D_MATERIAL, Division, 'Volume_Unit');


#Volume

#Retail RHF
If(vDistrib @= '10' & AttrS(D_CUSTOMER,Customer, 'IC1')@= 'IC1 - E00095');
	#copie du volume sur CURR_VOL
    CellPutN(Valeur, C_Cube_Cible, vPhase, vPeriod, vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CURR_VOL');
    #pas de flag sur les inds de prix car saisie dans le cube Price

    #flag N/A_PERIOD
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CURR_VOL');
    
#Retail GMS Article Promo
ElseIf(vDistrib @= '10' & AttrN(D_MATERIAL, Material_Plan | '.', 'Vol_Promo') = 1);
	#copie du volume sur PROMO_VOl
    CellPutN(Valeur, C_Cube_Cible, vPhase, vPeriod, vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PROMO_VOL');
 
    #flag sur les inds volume et prix pertinents
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CURR_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PROMO_VOL');
    #pas de flag sur les inds de prix car saisie dans le cube Price
    
#Retail GMS Article Hors Promo
ElseIf(vDistrib @= '10');
	#copie du volume sur CURR_VOl
    CellPutN(Valeur, C_Cube_Cible, vPhase, vPeriod, vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CURR_VOL');

    #flag sur les inds volume et prix pertinents
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PROMO_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CURR_VOL');
    #pas de flag sur les inds de prix car saisie dans le cube Price
    
#Export Sucre
ElseIf(vDistrib @= '40' & ELPAR(D_MATERIAL_PLAN, Material_Plan, 1) @= 'D_10');
	#copie du volume sur CONTR_VOl
    CellPutN(Valeur, C_Cube_Cible, vPhase, vPeriod, vSalesOrg, vDistrib, 'USD', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CONTR_VOL');

    #flag sur les inds volume et prix pertinents
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'USD', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PROSP_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'USD', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CONTR_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'USD', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PREMIUM_UNIT');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'USD', Default_Unit, Customer, Material_Plan, vSalesGroup, 'BASE_UNIT');
    
#B2B Sucre BoulPat
ElseIf(vDistrib @= '20' & ELPAR(D_MATERIAL_PLAN, Material_Plan, 1) @= 'D_10' & AttrS(D_CUSTOMER,Customer, 'IC1')@= 'IC1 - E00070');
	#copie du volume sur CONTR_VOl
    CellPutN(Valeur, C_Cube_Cible, vPhase, vPeriod, vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CONTR_VOL');

    #flag sur les inds volume et prix pertinents
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CONTR_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PROSP_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'TO_BE_CONTR_VOL');
    #pas de flag sur les inds de prix car saisie dans le cube Price
    
#B2B Sucre/Mélasses / Stevia    
ElseIf(vDistrib @= '20' & (ELPAR(D_MATERIAL_PLAN, Material_Plan, 1) @= 'D_10' % ELPAR(D_MATERIAL_PLAN, Material_Plan, 1) @= 'D_40'% ELPAR(D_MATERIAL_PLAN, Material_Plan, 1) @= 'D_85'));
	#copie du volume sur CONTR_VOl
    CellPutN(Valeur, C_Cube_Cible, vPhase, vPeriod, vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CONTR_VOL');

    #flag sur les inds volume et prix pertinents
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CONTR_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PROSP_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'TO_BE_CONTR_VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'PREMIUM_UNIT');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'BASE_UNIT');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CUST_REBATE_UNIT');
#B2B/Export Alcool/Biothanol 
Else;
    #copie du volume sur VOl
    CellPutN(Valeur, C_Cube_Cible, vPhase, vPeriod, vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'VOL');

    #flag sur les inds volume et prix pertinents
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'VOL');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'BASE_UNIT');
    CellPutN(1, C_Cube_Cible, vPhase, 'N/A PERIOD', vSalesOrg, vDistrib, 'EUR', Default_Unit, Customer, Material_Plan, vSalesGroup, 'CUST_REBATE_UNIT');
EndIf;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ViewZeroOut( C_Cube_Source, view_erase );
#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_SALES_GROUP, subset_erase);
SubsetDestroy(D_COMB_TYPE, subset_erase);

ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_COMB_TYPE, subset_copy);
SubsetDestroy(D_NEW_COMB_IND, subset_copy);
#endregion