#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


#-----------Dimensions----------------------#
D_Attr_MATERIAL = '}ElementAttributes_1_G_MATERIAL';
D_MATERIAL = '1_G_MATERIAL';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';

#-----------Hiérarchies----------------------#
Stt_PM = 'Status_PM';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';



#--------------------Sous-ensembles--------------------#
subset_temp = 'z_temp_' | vUSER |'_' | vPRO_NAME;


#Création d'un subset avec tous les attributs
SubsetDestroy(D_Attr_MATERIAL, subset_temp);
MDX_Attr = '{{['|D_Attr_MATERIAL|'].[Caption]},{TM1SUBSETALL(['|D_Attr_MATERIAL|'])}}';
SubsetCreatebyMDX( subset_temp, MDX_Attr, 1 );
SubsetElementDelete(D_Attr_MATERIAL, subset_temp, 1);
Subsize = SubsetGetSize(D_Attr_MATERIAL, subset_temp);




#Parcours du subset
elem_nb = 1;
While(elem_nb<=Subsize);
	#Vérification du flag pour chacun des éléments du subset
    elem = SubsetGetElementName( D_Attr_MATERIAL, subset_temp, elem_nb);
    Flag = AttrN(D_Attr_MATERIAL, elem,'Flag_Hier');
    #Si l'attr doit être une hiérarchie : suppression de la hiérarchie le temps de la construction de la hiérarchie principale pour éviter les collisions
    If(Flag = 1);
        HierarchyDestroy( D_MATERIAL, elem );
        HierarchyDestroy( D_MATERIAL_PLAN, elem );
	EndIf;    
	elem_nb = elem_nb + 1;
End;

#Hiérarchie Status basée sur les PLanning Materials 
HierarchyDestroy(D_MATERIAL, 'Status_PM');


#--------------------Processus--------------------#
ExecuteProcess('SLS_CHA_DIM_1_G_MATERIAL');

#chargement de la hiérarchie retail en 2 fois car certains parents sont définis après les enfants dans le fichier source
ExecuteProcess('SLS_CHA_DIM_1_G_MATERIAL_RETAIL');
ExecuteProcess('SLS_CHA_DIM_1_G_MATERIAL_RETAIL_SORT');
#Modif 22/09/2020 pour gestion rattachement pas au même niveau.
ExecuteProcess('SLS_CHA_DIM_1_G_MATERIAL_RETAIL_SORT');


ExecuteProcess('SLS_CAL_CUB_ELEMENTATTRIBUTES_1_G_MATERIAL');
ExecuteProcess('SLS_CLEAN_DIM_1_G_MATERIAL');

ExecuteProcess( 'SLS_CHA_HIER_1_G_MATERIAL');
ExecuteProcess( 'SLS_CHA_HIER_1_G_MATERIAL_Status_PM');

ExecuteProcess( 'zSecu_Material_Plan' );
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion