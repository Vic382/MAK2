#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


#################################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   09/10/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :    Elisabeth MOUNIER                                                                                                #
#                                                                                                                                                   #
# Action : Processus de chargement du cube SLS_ORDER                                                        #
#                 
#Modifié le 15/03/2019 par Elisabeth Mounier
# Action : ajout des dimensions SLS_ORDER_ITEM et SLS_ORDER_STATUS dans le cube SLS_ORDER
#################################################################


#====================================#
#             Déclaration des variables                   #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Cible = 'SLS_ORDER';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

#--------------------Dimensions--------------------#
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_ORDER_NB = 'SLS_ORDER_NB';
D_ORDER_IND = 'SLS_ORDER_IND';
D_ORDER_STATUS = 'SLS_ORDER_STATUS';
D_ORDER_ITEM = 'SLS_ORDER_ITEM';

TOT_ORDER = 'TOTAL_ORDER_NB';
TOT_ORDER_ITEM = 'TOTAL_ORDER_ITEM';



#Activate_Security = 'SLS_CAL_DIM_1_G_PERIOD_SECURITY_READ';
#Desactivate_Security = 'SLS_CAL_DIM_1_G_PERIOD_SECURITY_WRITE';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

DatasourceASCIIDecimalSeparator=',';
DatasourceASCIIThousandSeparator=' ';

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;


#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);


#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);


#--------------------Sources de données--------------------#
DatasourceNameForServer = CellGetS( C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'DATASOURCE_NAME_FOR_SERVER', 'Comment');


# Init des totaux

If( DIMIX( D_ORDER_NB, TOT_ORDER) = 0);
	DimensionElementInsert(D_ORDER_NB, '', TOT_ORDER, 'N');
EndIf;

If( DIMIX( D_ORDER_ITEM, TOT_ORDER_ITEM) = 0);
	DimensionElementInsert(D_ORDER_ITEM, '', TOT_ORDER_ITEM, 'N');
EndIf;

#Désactivation de la sécurité sur la dim Période (on repasse tous les mois en WRITE)
#ExecuteProcess( Desactivate_Security);


#endregion
#region Metadata
#===============================================#
#             Chargement de la dimension ORDER_NB                 #
#===============================================#


If( DIMIX(D_ORDER_NB, ORDER_NB) = 0);
	DimensionElementInsert(D_ORDER_NB, '', ORDER_NB, 'N');
EndIf;

#Création de la hiérarchie Tot > Order_nb

DimensionElementComponentAdd(D_ORDER_NB, TOT_ORDER, ORDER_NB, 1);

#===============================================#
#          Chargement de la dimension ORDER_ITEM#
#===============================================#


If( DIMIX( D_ORDER_ITEM, ORDER_ITEM) = 0);
	DimensionElementInsert(D_ORDER_ITEM, '', ORDER_ITEM, 'N');
EndIf;

#Création de la hiérarchie Tot > Order_item

DimensionElementComponentAdd(D_ORDER_ITEM, TOT_ORDER_ITEM, ORDER_ITEM, 1);

#endregion
#region Data
#===================================#
#             Chargement du cube SLS_ORDER  #
#===================================#

Mat= MATERIAL|'.';

ShipTo = SHIP_TO| '_' | Sales_Org | DISTRIB_CHANNEL | Division;

LONGUEUR_Mois = LONG(vMois);
If(LONGUEUR_Mois < 2);
	vMois = '0'|vMois;
EndIf;
Period_F =  vAnnee | '.' | vMois;


#BASE_UNIT
CellPutS(BASE_UNIT, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'BASE_UNIT');

#SOLD_TO
CellPutS(SOLD_TO, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'SOLD_TO');

#SHIP_PT
CellPutS(SHIP_PT, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'SHIP_PT');

#SHIP_PLANT
CellPutS(SHIP_PLANT, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'SHIP_PLANT');

#VENDOR
CellPutS(VENDOR, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'VENDOR');

#SLS_UNIT
CellPutS(SLS_UNIT, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'SLS_UNIT');

#CONTRACT
CellPutS(CONTRACT, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTRACT');

#CONTRACT_ITEM
CellPutS(CONTRACT_ITEM, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'N/A_VOLUME_UNIT', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTRACT_ITEM');


###############Chargement des Volumes################

If(DISTRIB_CHANNEL @= '10');

	#Si code attribut spécifique promo, on charge le volume sur l'indicateur 'PROMO_VOL'
	If( ATTRN(D_MATERIAL, Mat, 'Vol_Promo') = 1);

		#QTY_TO
		CellPutN(QTY_TO, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TO', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'PROMO_VOL');

		#QTY_TSP
		CellPutN(QTY_TSP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TSP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'PROMO_VOL');

		#QTY_UC
		CellPutN(QTY_UC, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'UC', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'PROMO_VOL');

		#QTY_HL
		CellPutN(QTY_HL, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'PROMO_VOL');

		#QTY_HL2
		CellPutN(QTY_HL2, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL2', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'PROMO_VOL');

		#QTY_HLP
		CellPutN(QTY_HLP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HLAP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'PROMO_VOL');
	

	#Sinon, on charge le volume sur l'indicateur CURR_VOL	
	Else;

		#QTY_TO
		CellPutN(QTY_TO, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TO', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CURR_VOL');

		#QTY_TSP
		CellPutN(QTY_TSP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TSP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CURR_VOL');

		#QTY_UC
		CellPutN(QTY_UC, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'UC', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CURR_VOL');

		#QTY_HL
		CellPutN(QTY_HL, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CURR_VOL');

		#QTY_HL2
		CellPutN(QTY_HL2, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL2', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CURR_VOL');

		#QTY_HLP
		CellPutN(QTY_HLP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HLAP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CURR_VOL');

	EndIf;


Elseif(Division @= '20' % Division @= '30');

		#QTY_TO
		CellPutN(QTY_TO, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TO', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'VOL');

		#QTY_TSP
		CellPutN(QTY_TSP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TSP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'VOL');

		#QTY_UC : chargé sur PC pour toutes activités hors Sugar
		CellPutN(QTY_UC, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'PC', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'VOL');

		#QTY_HL
		CellPutN(QTY_HL, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'VOL');

		#QTY_HL2
		CellPutN(QTY_HL2, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL2', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'VOL');

		#QTY_HLP
		CellPutN(QTY_HLP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HLAP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'VOL');
        
Else;

		#QTY_TO
		CellPutN(QTY_TO, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TO', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTR_VOL');

		#QTY_TSP
		CellPutN(QTY_TSP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'TSP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTR_VOL');

		#QTY_UC : chargé sur PC pour toutes activités hors Sugar
        If(Division @= '10');
			CellPutN(QTY_UC, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'UC', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTR_VOL');
		Else; 
    		CellPutN(QTY_UC, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'PC', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTR_VOL');
		EndIf;
        
		#QTY_HL
		CellPutN(QTY_HL, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTR_VOL');

		#QTY_HL2
		CellPutN(QTY_HL2, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HL2', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTR_VOL');

		#QTY_HLP
		CellPutN(QTY_HLP, C_Cube_Cible, Period_F, SALES_ORG, DISTRIB_CHANNEL, 'HLAP', Mat, ShipTo, SALES_GROUP, ORDER_NB, ORDER_STAT, ORDER_ITEM, 'CONTR_VOL');

EndIf;


#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#Copie vers Reporting
ExecuteProcess( 'SLS_COP_CUB_SLS_REPORTING_CUB_SLS_ORDER');

#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion