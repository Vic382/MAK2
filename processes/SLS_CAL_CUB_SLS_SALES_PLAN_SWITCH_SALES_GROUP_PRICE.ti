#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



################################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   19/04/2019                                                                                                                #
#                                                                                                                                                   #
# Fait par :   Elisabeth MOUNIER                                                                                              #
#                                                                                                                                                   #
# Action : Switch Sales Group dans le cube SLS_SALES_PLAN
# Lancé à la demande par le CDG pour changement de la valeur lorsque Sales Group histo différent de l'attribut du client
#################################################################


#====================================#
#         Déclaration des variables #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_SALES_PLAN';
C_Cube_Cible = 'SLS_SALES_PLAN';
C_zPARAM = 'zPARAM';
C_zSELECT = 'zSELECT';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_SALES_PLAN_IND='SLS_SALES_PLAN_IND';
#--------------------Elements--------------------#

e_Message_Prolog = '';



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClients = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
#------------------Paramètres zSelect ---------------#
P_DISTRIB = CellGetS(C_zSELECT, vClients, 'Distribution Channel');
If(P_DISTRIB @= '');
	P_DISTRIB = 'TOTAL_DISTRIB_CHANNEL';
EndIf;

P_SALES_ORG = CellGetS(C_zSELECT, vClients, 'Sales Organisation');
If(P_SALES_ORG @= '');
	P_SALES_ORG = 'TOTAL SALES ORG';
EndIf;

#modif DIMO le 25/11/2021 on cherche la phase en cours dans zselect pour les RFC
# Phase_En_Cours = CellGetS(C_zPARAM, 'Phase', 'Value');
Phase_En_Cours = CellGetS(C_zSELECT, vClients, 'Current Phase Sales');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_SALES_ORG, subset_copy);
subsetdestroy(D_DISTRIB_CHANNEL, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
SubsetCreate(D_PHASE, subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, Phase_En_Cours, 1);

#D_DISTRIB_CHANNEL
MDX_DISTRIB = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL({DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | P_DISTRIB | '])}, 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_DISTRIB);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_copy, 1);

#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({DESCENDANTS([1_G_SALES_ORG].[' | P_SALES_ORG | '])}, 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_SALES_ORG);
SubsetElementDelete( D_SALES_ORG, subset_copy, 1);

#D_SALES_PLAN_IND
MDX_IND = '{{[SLS_SALES_PLAN_IND].[SLS_VOL]},{TM1FILTERBYLEVEL({DESCENDANTS([SLS_SALES_PLAN_IND].[4NET_UNIT])}, 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_IND);
SubsetElementDelete( D_SALES_PLAN_IND, subset_copy, 1);

#D_PERIOD
MDX_PERIOD = '{{[1_G_PERIOD].[1_G_PERIOD].[FISC_ACT_N-1]},
	{[1_G_PERIOD].[1_G_PERIOD].[FISC_ACT_N]},
	{[1_G_PERIOD].[1_G_PERIOD].[CAMP_ACT_N-1]},
	{[1_G_PERIOD].[1_G_PERIOD].[CAMP_ACT_N]},
	{[1_G_PERIOD].[1_G_PERIOD].[CAL_ACT_N-1]},
	{[1_G_PERIOD].[1_G_PERIOD].[CAL_ACT_N]},
    {[1_G_PERIOD].[1_G_PERIOD].[6_M_AVG]},
    {[1_G_PERIOD].[1_G_PERIOD].[N/A PERIOD]},
    {[1_G_PERIOD].[Campaign]},{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}, 
    {TM1SubsetToSet([1_G_PERIOD] , "Input_RPP_CPV")}}';
SubsetCreatebyMDX( subset_copy, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_copy, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy,D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PERIOD, subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_SALES_PLAN_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewExtractSkipRuleValuesSet(C_Cube_Source,view_copy,1);
ViewExtractSkipCalcsSet(C_Cube_Source,view_copy, 1);
ViewExtractSkipZeroesSet(C_Cube_Source,view_copy, 1);


# définition de la vue source#

DatasourceCubeview= view_copy ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
 
Sales_Group_client = ATTRS(D_CUSTOMER, vCustomer, 'Sales Group');
If(Sales_Group_client @<> vSales_Group);
   	    ### PRIX ###
    	#moyenne pondérée
    	
    	#on récupère l'ancienne valo + l'ancien volume
        Indicateur_Valo = ATTRS('SLS_CHA_SAP_IND', Indicateur, 'Valo_Associée');
        Old_Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCurrency, vVolume_Unit, vCustomer, vMaterial_Plan, vSales_Group, Indicateur_Valo);
    	Old_Volume = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCurrency, vVolume_Unit, vCustomer, vMaterial_Plan, vSales_Group, 'Sales Volume');
    	
    	#RAZ de l'ancien prix unitaire associé à la valo qu'on a récupéré
    	CellPutN(0, C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCurrency, vVolume_Unit, vCustomer, vMaterial_Plan, vSales_Group, Indicateur);
    
    	#on récupère la valo s'il y a, sur le nouveau croisement
        Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCurrency, vVolume_Unit, vCustomer, vMaterial_Plan, Sales_Group_client, Indicateur_Valo);
    
    	#on récupère le total volume
        Volume = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCurrency, vVolume_Unit, vCustomer, vMaterial_Plan, Sales_Group_client, 'Sales Volume');
    
    	#calcul du nouveau prix unitaire sur le nouveau croisement
        New_Prix_Unit = (Old_Valo + Valo)/(Old_Volume + Volume);
        #Ajout Ann suite à erreur "try to insert an undefined value to cell" 
        Vol_Total = Old_Volume + Volume;
        If(Vol_Total <> 0);
			CellPutN(New_Prix_Unit, C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCurrency, vVolume_Unit, vCustomer, vMaterial_Plan, Sales_Group_client, Indicateur);
    	EndIf;
        #asciioutput('..\Tests\switch_prix.csv', Indicateur_Valo, Numbertostring(Old_Valo), numbertostring(Valo), numbertostring(Old_Volume), numbertostring(New_Prix_Unit));
    	
      
 
EndIf;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_SALES_ORG, subset_copy);
subsetdestroy(D_DISTRIB_CHANNEL, subset_copy);
subsetdestroy(D_SALES_PLAN_IND, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);



#====================================#
#    Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion