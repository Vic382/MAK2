#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


###############################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   18/10/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :    Elisabeth MOUNIER                                                                                                #
#                                                                                                                                                   #
# Action : Processus de calcul des ACT N et ACT N-1 pour chaque type d'année             		       	     #
#									      #
#   Modifié le 20/03/2019 par Elisabeth Mounier
# Action : Adapter le process à la nouvelle modélisation : Calcul dans le cube SLS_INIT.
# Phase source et phase cible identiques car le réel est copié avant le premier mois de simulation.
# on garde un paramètre car choix entre 'Current Phase' et 'Current Rolling Forecast'
#################################################################



#====================================#
#             Déclaration des variables                   #
#====================================#

#Volume_F = 0;

#--------------------Cubes--------------------#
#C_Cube_Source = 'SLS_INIT';
C_Cube_Source = 'SLS_CHA_SAP';
C_Cube_Cible = 'SLS_INIT';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

#--------------------Dimensions--------------------#
D_PHASE_CHA_SAP = '1_G_PHASE';
D_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_MATERIAL_CHA_SAP = '1_G_MATERIAL';
D_MATERIAL = 'SLS_MATERIAL_PLAN';
D_CUSTOMER = 'SLS_CUSTOMER';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_INIT_IND='SLS_INIT_IND';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_PAYER = 'SLS_PAYER';
D_SOLD_TO = 'SLS_SOLD_TO';
D_INCOTERM = 'SLS_INCOTERM';
D_Q_HQ = 'SLS_Q_HQ';
D_CHA_SAP_IND = 'SLS_CHA_SAP_IND';


#--------------------Elements--------------------#

e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#Vider le 'Message_Echec'
CellPutS('', C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'Message_Echec', 'Comment');


#Récupérer le premier mois de simulation en fonction de la phase budgétaire cible
vFirst_Simulation_Month = ATTRS (D_PHASE, P_PHASE, 'First simulation month'); 

#Si l'attribut n'est pas rempli : stop le processus
If( vFirst_Simulation_Month @= '' );
	e_Error_Prolog = 1;
	e_Message_Prolog = 'L''attribut First simulation month est vide dans la dimension '|D_PHASE; 
	CellPutS(e_Message_Prolog, C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'Message_Echec', 'Comment');
	
EndIf;

#--------------------Interruption du processus--------------------#
IF(e_Error_Prolog <> 0);
	itemReject(e_Message_Prolog);
ENDIF;


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
subsetdestroy(D_PHASE,subset_erase);
subsetdestroy(D_PERIOD,subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE,subset_erase);
SubsetElementInsert(D_PHASE, subset_erase, P_PHASE, 1);

#D_PERIOD
subsetcreate(D_PERIOD,subset_erase);

SubsetElementInsert(D_PERIOD, subset_erase,'Fiscal_ACT_N-1', 1);
SubsetElementInsert(D_PERIOD, subset_erase,'Calendar_ACT_N-1', 1);
SubsetElementInsert(D_PERIOD, subset_erase,'Campaign_ACT_N-1', 1);
SubsetElementInsert(D_PERIOD, subset_erase,'Fiscal_ACT_N', 1);
SubsetElementInsert(D_PERIOD, subset_erase,'Calendar_ACT_N', 1);
SubsetElementInsert(D_PERIOD, subset_erase,'Campaign_ACT_N', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
subsetdestroy(D_PHASE,subset_erase);
subsetdestroy(D_PERIOD,subset_erase);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source, view_copy);
subsetdestroy(D_PHASE_CHA_SAP, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_CHA_SAP_IND,subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_CHA_SAP, subset_copy);
SubsetDestroy(D_VENDOR, subset_copy);
SubsetDestroy(D_PROD_PLANT, subset_copy);
SubsetDestroy(D_SHIP_PLANT, subset_copy);
SubsetDestroy(D_SHIP_POINT, subset_copy);
SubsetDestroy(D_PAYER, subset_copy);
SubsetDestroy(D_SOLD_TO, subset_copy);
SubsetDestroy(D_Q_HQ, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_INCOTERM, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
subsetcreate(D_PHASE_CHA_SAP,subset_copy);
SubsetElementInsert(D_PHASE_CHA_SAP, subset_copy,'ACT', 1);


#D_PERIOD

subsetcreate(D_PERIOD,subset_copy);
SubsetElementInsert(D_PERIOD, subset_copy,ATTRS(D_PERIOD, vFirst_Simulation_Month, 'FISC_N-1'), 1);
SubsetElementInsert(D_PERIOD, subset_copy,ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Calendar_N-1'), 1);
SubsetElementInsert(D_PERIOD, subset_copy,ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Campaign_N-1'), 1);
SubsetElementInsert(D_PERIOD, subset_copy,ATTRS(D_PERIOD, vFirst_Simulation_Month, 'FISC_N'), 1);
SubsetElementInsert(D_PERIOD, subset_copy,ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Calendar_N'), 1);
SubsetElementInsert(D_PERIOD, subset_copy,ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Campaign_N'), 1);


#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]}, {TM1FILTERBYLEVEL({TM1SUBSETALL([1_G_SALES_ORG])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_copy, 1);

#D_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL({TM1SUBSETALL([1_G_DISTRIB_CHANNEL])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_copy, 1);
# subsetcreate(D_DISTRIB_CHANNEL,subset_copy);
# SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy,'Retail', 1);


#D_CUSTOMER
MDX_CUSTOMER = '{{[SLS_CUSTOMER].[TOTAL_CUSTOMER]}, {TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_CUSTOMER])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_copy, 1);

#D_MATERIAL
MDX_MATERIAL = '{{[1_G_MATERIAL].[TOTAL_MATERIAL]}, {TM1FILTERBYLEVEL({TM1SUBSETALL([1_G_MATERIAL])},1)}}';
SubsetCreateByMDX(subset_copy, MDX_MATERIAL);
SubsetElementDelete(D_MATERIAL_CHA_SAP, subset_copy, 1);

#D_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_copy);
SubsetElementInsert(D_SALES_GROUP, subset_copy,'TOTAL_SALES_GROUP', 1);


#D_VENDOR
MDX_VENDOR = '{{[SLS_VENDOR].[TOTAL_VENDOR]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_VENDOR])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_VENDOR);
SubsetElementDelete(D_VENDOR, subset_copy, 1);

#D_PROD_PLANT
MDX_PROD = '{{[SLS_PROD_PLANT].[TOTAL_PROD_PLANT]}, {TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_PROD_PLANT])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_PROD);
SubsetElementDelete(D_PROD_PLANT, subset_copy, 1);

#D_SHIP_PLANT
MDX_SHIP_PLANT = '{{[SLS_SHIP_PLANT].[TOTAL_SHIP_PLANT]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_SHIP_PLANT])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_SHIP_PLANT);
SubsetElementDelete(D_SHIP_PLANT, subset_copy, 1);

#D_SHIP_POINT
MDX_SHIP_POINT = '{{[SLS_SHIP_POINT].[TOTAL_SHIP_POINT]},{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_SHIP_POINT])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_SHIP_POINT);
SubsetElementDelete(D_SHIP_POINT, subset_copy, 1);

#D_PAYER
subsetcreate(D_PAYER,subset_copy);
SubsetElementInsert(D_PAYER, subset_copy,'TOTAL_PAYER', 1);

#D_SOLD_TO
subsetcreate(D_SOLD_TO,subset_copy);
SubsetElementInsert(D_SOLD_TO, subset_copy,'TOTAL_SOLD_TO', 1);

#D_INCOTERM
subsetcreate(D_INCOTERM,subset_copy);
SubsetElementInsert(D_INCOTERM, subset_copy,'TOTAL_INCOTERM', 1);

#D_Q_HQ
# VRT : Modification 30/01/2023
# Mise en place des contrats indéxé
MDX_QUOTA = '{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_Q_HQ])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_QUOTA);

#D_INDICATEUR
SubsetCreateByMDX( subset_copy, '{{[SLS_CHA_SAP_IND].[SLS_VOL]},{TM1FILTERBYLEVEL( {DESCENDANTS([SLS_CHA_SAP_IND].[SLS_VOL])}, 0)}, {TM1FILTERBYLEVEL( {DESCENDANTS([SLS_CHA_SAP_IND].[4NET])}, 0)}}');
SubsetElementDelete(D_CHA_SAP_IND, subset_copy, 1);


#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PHASE_CHA_SAP,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_MATERIAL_CHA_SAP,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_VENDOR,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PROD_PLANT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SHIP_PLANT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SHIP_POINT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CHA_SAP_IND,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PAYER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SOLD_TO,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_INCOTERM,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_Q_HQ,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_GROUP,subset_copy);



#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,0);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 0);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy ;

#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

# Préfixe de la mesure si le contrat est un contrat indexé
IF ( vQuota @= 'INDEXE' ) ;
 vIndicateurCible = 'I_' | vIndicateur ;
ELSE ;
 vIndicateurCible = vIndicateur ;
ENDIF ;

#FR_SAMP par exemple n'existe pas dans Init
If(DIMIX(D_INIT_IND, vIndicateur) = 0);
	itemskip;
EndIf;

#on parcourt deja le Planning Material
Division = ELPAR(D_MATERIAL_CHA_SAP, vMaterial, 1);
Volume_Unit = ATTRS(D_MATERIAL_CHA_SAP, Division, 'Volume_Unit');

#Copie seulement sur l'unité par défaut
If(vVol_Unit @<> Volume_Unit);
	itemskip;
EndIf;

################ COPIE ACT N1 et ACT TO DATE #################################


##Copie sur l'ACT N-1

#Volume 
If(ATTRS(D_CHA_SAP_IND, vIndicateur, 'Type_Indicateur') @= 'Volume' & vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'FISC_N-1')));

    # Modif VRT : 30/01/2023
    # Mise en place des contrats indéxé. Vérification de l'élément de la dimenion SLS_Q_HQ ( indexe ou non_indexe ) pour alimenter le bon indicateur
	FISC_ACT_N1 = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
    
     CellIncrementN(FISC_ACT_N1, C_Cube_Cible, P_PHASE, 'FISC_ACT_N-1', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible);

    #On calcul le prix unitaire à partir de la valo
ElseIf(vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'FISC_N-1')));
	FISC_ACT_N1_Vol = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  'SLS_VOL');
	FISC_ACT_N1_Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
    If(FISC_ACT_N1_Vol = 0);
    	itemskip;
    EndIf;

    CellPutN(FISC_ACT_N1_Valo/FISC_ACT_N1_Vol, C_Cube_Cible, P_PHASE, 'FISC_ACT_N-1', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible|'_UNIT');
EndIf;

#Volume 
If(ATTRS(D_CHA_SAP_IND, vIndicateur, 'Type_Indicateur') @= 'Volume' & vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Campaign_N-1')));

    # Modif VRT : 30/01/2023
    # Mise en place des contrats indéxé. Vérification de l'élément de la dimenion SLS_Q_HQ ( indexe ou non_indexe ) pour alimenter le bon indicateur
    
	CAMP_ACT_N1 = CellGetN(C_Cube_Source, vPhase,vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
    
    #ASCIIOutput( '..\testvrt.csv', '1' , numbertostring (CAMP_ACT_N1 ) , C_Cube_Source, vPhase,vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);    
    #ASCIIOutput( '..\testvrt.csv', '2' , numbertostring (CAMP_ACT_N1 ) , C_Cube_Cible, P_PHASE, 'CAMP_ACT_N-1', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateur);

      CellIncrementN(CAMP_ACT_N1, C_Cube_Cible, P_PHASE, 'CAMP_ACT_N-1', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible);
    
#On calcul le prix unitaire à partir de la valo
ElseIf(vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Campaign_N-1')));
	CAMP_ACT_N1_Vol = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  'SLS_VOL');
	CAMP_ACT_N1_Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
    If(CAMP_ACT_N1_Vol = 0);
    	itemskip;
    EndIf;
    CellPutN(CAMP_ACT_N1_Valo/CAMP_ACT_N1_Vol, C_Cube_Cible, P_PHASE, 'CAMP_ACT_N-1', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible|'_UNIT');
EndIf;

#Volume 
If(ATTRS(D_CHA_SAP_IND, vIndicateur, 'Type_Indicateur') @= 'Volume' & vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Calendar_N-1')));

    # Modif VRT : 30/01/2023
    # Mise en place des contrats indéxé. Vérification de l'élément de la dimenion SLS_Q_HQ ( indexe ou non_indexe ) pour alimenter le bon indicateur
    
	CAL_ACT_N1 = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);   

      CellIncrementN(CAL_ACT_N1, C_Cube_Cible, P_PHASE, 'CAL_ACT_N-1', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible);
    
#On calcul le prix unitaire à partir de la valo
ElseIf( vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Calendar_N-1')));
	CAL_ACT_N1_Vol = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  'SLS_VOL');
	CAL_ACT_N1_Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
	If(CAL_ACT_N1_Vol = 0);
    	itemskip;
    EndIf;
   CellPutN(CAL_ACT_N1_Valo/CAL_ACT_N1_Vol, C_Cube_Cible, P_PHASE, 'CAL_ACT_N-1', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible|'_UNIT');
EndIf;

##Copie sur l'ACT N

#Volume 
If(ATTRS(D_CHA_SAP_IND, vIndicateur, 'Type_Indicateur') @= 'Volume' & vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'FISC_N')));

    # Modif VRT : 30/01/2023
    # Mise en place des contrats indéxé. Vérification de l'élément de la dimenion SLS_Q_HQ ( indexe ou non_indexe ) pour alimenter le bon indicateur
    
	FISC_ACT_N = CellGetN(C_Cube_Source, vPhase, vPeriod,  vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
        
      CellIncrementN(FISC_ACT_N, C_Cube_Cible, P_PHASE, 'FISC_ACT_N', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible);
    
#On calcul le prix unitaire à partir de la valo
ElseIf(vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'FISC_N')));
	FISC_ACT_N_Vol = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  'SLS_VOL');
	FISC_ACT_N_Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
	If(FISC_ACT_N_Vol = 0);
    	itemskip;
    EndIf;
    CellPutN(FISC_ACT_N_Valo/FISC_ACT_N_Vol, C_Cube_Cible, P_PHASE, 'FISC_ACT_N', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible|'_UNIT');
EndIf;

#Volume 
If(ATTRS(D_CHA_SAP_IND, vIndicateur, 'Type_Indicateur') @= 'Volume' & vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Campaign_N')));

    # Modif VRT : 30/01/2023
    # Mise en place des contrats indéxé. Vérification de l'élément de la dimenion SLS_Q_HQ ( indexe ou non_indexe ) pour alimenter le bon indicateur
    
	CAMP_ACT_N = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
    
      CellIncrementN(CAMP_ACT_N, C_Cube_Cible, P_PHASE, 'CAMP_ACT_N', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible);
    
#On calcul le prix unitaire à partir de la valo
ElseIf(vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Campaign_N')));
	CAMP_ACT_N_Vol = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  'SLS_VOL');
	CAMP_ACT_N_Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
    If(CAMP_ACT_N_Vol = 0);
    	itemskip;
    EndIf;
    CellPutN(CAMP_ACT_N_Valo/CAMP_ACT_N_Vol, C_Cube_Cible, P_PHASE, 'CAMP_ACT_N', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible|'_UNIT');
EndIf;

#Volume 
If(ATTRS(D_CHA_SAP_IND, vIndicateur, 'Type_Indicateur') @= 'Volume' & vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Calendar_N')));

    # Modif VRT : 30/01/2023
    # Mise en place des contrats indéxé. Vérification de l'élément de la dimenion SLS_Q_HQ ( indexe ou non_indexe ) pour alimenter le bon indicateur
    
	CAL_ACT_N = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
    
      CellIncrementN(CAL_ACT_N, C_Cube_Cible, P_PHASE, 'CAL_ACT_N', vSales_Org, vDistrib,vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible);
    
#On calcul le prix unitaire à partir de la valo
ElseIf(vPeriod @= DimensionElementPrincipalName(D_PERIOD, ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Calendar_N')));
	CAL_ACT_N_Vol = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  'SLS_VOL');
	CAL_ACT_N_Valo = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib, vVol_Unit, vCustomer,  vMaterial, vSales_group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQuota,  vIndicateur);
	If(CAL_ACT_N_Vol = 0);
    	itemskip;
    EndIf;
    CellPutN(CAL_ACT_N_Valo/CAL_ACT_N_Vol, C_Cube_Cible, P_PHASE, 'CAL_ACT_N', vSales_Org, vDistrib, vVol_Unit, vMaterial, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateurCible|'_UNIT');
EndIf;



#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source, view_copy);
subsetdestroy(D_PHASE_CHA_SAP, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_CHA_SAP_IND,subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_CHA_SAP, subset_copy);
SubsetDestroy(D_VENDOR, subset_copy);
SubsetDestroy(D_PROD_PLANT, subset_copy);
SubsetDestroy(D_SHIP_PLANT, subset_copy);
SubsetDestroy(D_SHIP_POINT, subset_copy);
SubsetDestroy(D_PAYER, subset_copy);
SubsetDestroy(D_SOLD_TO, subset_copy);
SubsetDestroy(D_Q_HQ, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_INCOTERM, subset_copy);

#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion