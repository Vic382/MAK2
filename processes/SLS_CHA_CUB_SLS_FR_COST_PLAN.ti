#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   03/03/2023                                                        #
#                                                                            #
# Fait par :    ELH		                                                     #
#                                                                            #
# Action : Processus permettant l'import des données Logistique              #
#          depuis le fichier exporté via book 09 Admin et modifié par        #
#		   recherchev. Import dans le cube SLS_FR_COST_PLAN.				 #
#          Appeler par le processus MASTER du même nom						 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#


#--------------------Cubes--------------------#
C_Cube_Logistique = 'SLS_FR_COST_PLAN';
# Cube param
zCubeParam = 'zPROCESS_ADMINISTRATION' ;

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_STANDARD_INDEXE = 'SLS_Q_HQ' ;
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_MATERIAL_PLAN =' SLS_MATERIAL_PLAN' ; 
D_CUSTOMER = 'SLS_CUSTOMER';
D_MAT_FREIGHT_GROUP = 'SLS_MAT_FREIGHT_GROUP' ;
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR' ;
D_LOGISTIQUE_IND = 'SLS_FR_COST_PLAN_IND';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

e_message_data = '';

# Elément CURR_PHASE pour la dimension 1_G_CURRENT_PHASE
sPhase = 'CURR_PHASE' ;
# Eléments NA pour les dimensions SLS_SHIP_PLANT, SLS_PROD_PLANT et SLS_VENDOR
sShipPlant = 'N/A_SHIP_PLANT' ;
sProdPlant = 'N/A_PROD_PLANT' ;
sVendor = 'N/A_VENDOR' ;
# Dimension indicateur : récupération des volumes
sRecupMesure = 'zSLS_VOL' ;
# Dimension indicateur : copie de la donnée sur le manuel freight
sInsersionMesure = 'MAN_FR_COST' ;

# Variables pour compter le nombre de lignes
nLignesModifiees = 0 ;
nLignesCibe = 0 ;

# Fichier d'export des lignes modifiées
sFichier = CellGetS ( zCubeParam , vPRO_NAME , 'OUT_FILE' , 'Value' ) ;
sDossier = CellGetS ( zCubeParam , vPRO_NAME , 'OUT_FOLDER' , 'Value' ) ;
sFichierExport = sDossier | '/' | sFichier ;
# Ligne d'en-tête dans le fichier
nEntete = 1 ;

# Paramètre issu du fichier d'import : p_sales_org, p_distrib_channel et p_mat_freight_group
p_sales_org = CellGetS ( p_param , 'p_sales_org' , 'Value' ) ;
p_distrib_channel = CellGetS ( p_param , 'p_distrib_channel' , 'Value' ) ;
# p_mat_freight_group = CellGetS ( p_param , 'p_mat_freight_group' , 'Value' ) ;
p_debut_periode = DIMIX ( D_PERIOD , CellGetS ( p_param , 'p_debut_periode' , 'Value' ) ) ;
p_fin_periode = DIMIX ( D_PERIOD , CellGetS ( p_param , 'p_fin_periode' , 'Value' ) ) ;

#--------------------Vues--------------------#
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
# Sous-ensemble de la dimension PERIODE
sTemporaryNamePeriod = 'Period_' | vUSER | '_Verification_Volumes_Assign_Sales_Plan' ;

#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer = C_Cube_Logistique ;
DatasourceCubeview = view_copy ;

#As_Temporary = 1;
ViewDestroy ( C_Cube_Logistique , view_copy ) ;
SubsetDestroy ( D_CURRENT_PHASE , subset_copy ) ;
SubsetDestroy ( D_STANDARD_INDEXE , subset_copy ) ;
SubsetDestroy ( D_PERIOD , subset_copy ) ;
SubsetDestroy ( D_SALES_ORG , subset_copy ) ;
SubsetDestroy ( D_DISTRIB_CHANNEL , subset_copy ) ;
SubsetDestroy ( D_MATERIAL_PLAN , subset_copy ) ;
SubsetDestroy ( D_CUSTOMER , subset_copy ) ;
SubsetDestroy ( D_MAT_FREIGHT_GROUP , subset_copy ) ;
SubsetDestroy ( D_SHIP_POINT , subset_copy ) ;
SubsetDestroy ( D_SHIP_PLANT , subset_copy ) ;
SubsetDestroy ( D_PROD_PLANT , subset_copy ) ;
SubsetDestroy ( D_VENDOR , subset_copy ) ;
SubsetDestroy ( D_LOGISTIQUE_IND , subset_copy ) ;
 
#--------------------Création des objets Source--------------------#
ViewCreate(C_Cube_Logistique ,view_copy);

# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, sPhase , 1);
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_CURRENT_PHASE,subset_copy);

# SLS_STANDARD/INDEXE
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_STANDARD_INDEXE |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_STANDARD_INDEXE,subset_copy);

# 1_G_PERIOD
# StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_PERIOD |'] )}, 0)}' ;
# SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
# Insertion des périodes, en fonction de celles présentes dans l'export initial, via un boucle

subsetcreate(D_PERIOD,subset_copy);

nPosition = 1 ;
WHILE ( p_debut_periode <= p_fin_periode ) ;
 # Récupération de l'élément de la dimension 1_G_PERIOD
 sElement = DimNm ( D_PERIOD , p_debut_periode ) ;
 # Si l'élément est de niveau 0, insertion de celui-ci dans le sous-ensemble
 IF ( ELLEV ( D_PERIOD , sElement ) = 0 ) ;
  SubsetElementInsert ( D_PERIOD , subset_copy, sElement, nPosition );
  nPosition = nPosition + 1 ;
 ENDIF ;
 # Incrémentation de la variable de boucle
 p_debut_periode = p_debut_periode + 1 ;
END ;
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_PERIOD,subset_copy);

# 1_G_SALES_ORG
subsetcreate(D_SALES_ORG,subset_copy);
SubsetElementInsert(D_SALES_ORG, subset_copy, p_Sales_org, 1);
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_SALES_ORG,subset_copy);

# 1_G_DISTRIB_CHANNEL
subsetcreate(D_DISTRIB_CHANNEL,subset_copy );
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy, p_Distrib_Channel, 1);
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_DISTRIB_CHANNEL,subset_copy);

#SLS_MATERIAL_PLAN
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_MATERIAL_PLAN |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_MATERIAL_PLAN,subset_copy);

#SLS_CUSTOMER
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_CUSTOMER |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_CUSTOMER,subset_copy);

# SLS_MAT_FREIGHT_GROUP
# subsetcreate(D_MAT_FREIGHT_GROUP,subset_copy);
# SubsetElementInsert(D_MAT_FREIGHT_GROUP, subset_copy, p_mat_freight_group , 1);
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_MAT_FREIGHT_GROUP |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_MAT_FREIGHT_GROUP,subset_copy);

# SLS_SHIP_POINT
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_SHIP_POINT |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_SHIP_POINT,subset_copy);

# SLS_SHIP_PLANT
subsetcreate(D_SHIP_PLANT,subset_copy);
SubsetElementInsert(D_SHIP_PLANT, subset_copy, sShipPlant , 1);
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_SHIP_PLANT,subset_copy);

# SLS_PROD_PLANT
subsetcreate(D_PROD_PLANT,subset_copy);
SubsetElementInsert(D_PROD_PLANT, subset_copy, sProdPlant , 1);
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_PROD_PLANT,subset_copy);

# SLS_VENDOR
subsetcreate(D_VENDOR,subset_copy);
SubsetElementInsert(D_VENDOR, subset_copy, sVendor , 1);
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_VENDOR,subset_copy);

#LOGISTIQUE_IND
subsetcreate(D_LOGISTIQUE_IND,subset_copy );
SubsetElementInsert(D_LOGISTIQUE_IND, subset_copy, sRecupMesure , 1);
ViewSubsetAssign(C_Cube_Logistique,view_copy, D_LOGISTIQUE_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées pour la vue source--------------------#
ViewExtractSkipRuleValuesSet (C_Cube_Logistique,view_copy,0);
ViewExtractSkipCalcsSet (C_Cube_Logistique,view_copy, 1);
ViewExtractSkipZeroesSet (C_Cube_Logistique,view_copy, 1);

# Pas de vue RAZ
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
# Comptage, sur le croissement, de la ligne Cible
CellPutN ( 1 , p_cube , v_mat_freight_group , v_ship_point , v_period , v_customer , 'NbLignesCible' ) ;

# Récupération, dans le cube temporaire contenant les données du fichier source, du MANUEL_FREIGHT
nManuelFreight = CellGetN ( p_cube , v_mat_freight_group , v_ship_point , v_period , v_customer , 'Mesure' ) ;
nFreightCube = CellGetN ( C_Cube_Logistique , v_curr_phase , v_standard_indexe , v_period , v_sales_org , v_distrib_channel , v_material_plan , v_customer , v_mat_freight_group , v_ship_point , v_ship_plant , v_prod_plant , v_vendor , sInsersionMesure ) ;

# Insertion du MANUEL_FREIGHT sur l'ensemble des articles ayant un volume, donc sur chaque ligne de la source si le ManuelFreight n'est pas vide
IF ( nManuelFreight <> 0  & nManuelFreight <> nFreightCube ) ;
 CellPutN ( nManuelFreight , C_Cube_Logistique , v_curr_phase , v_standard_indexe , v_period , v_sales_org , v_distrib_channel , v_material_plan , v_customer , v_mat_freight_group , v_ship_point , v_ship_plant , v_prod_plant , v_vendor , sInsersionMesure ) ;
 # Comptage, sur le croissement, d'une ligne modifiée
 CellPutN ( 1 , p_cube , v_mat_freight_group , v_ship_point , v_period , v_customer , 'NbLignesModif' ) ;
 # Export de la modification
 IF ( nEntete = 1 ) ;
  nEntete = 2 ;
  ASCIIOUTPUT ( sFichierExport , 'CURRENT_PHASE' , 'STANDARD/INDEXE' , 'PERIOD' , 'SALES_ORG' , 'DISTRIB_CHANNEL' , 'MATERIAL_PLAN' , 'CUSTOMER' , 'MAT_FREIGHT_GROUP' , 'SHIP_POINT' , 'SHIP_PLANT' , 'PROD_PLANT' , 'VENDOR' , 'Mesure' , 'ANCIENNE_VALEUR' , 'NOUVELLE_VALEUR' ) ;
 ENDIF ;
 ASCIIOUTPUT ( sFichierExport , v_curr_phase , v_standard_indexe , v_period , v_sales_org , v_distrib_channel , v_material_plan , v_customer , v_mat_freight_group , v_ship_point , v_ship_plant , v_prod_plant , v_vendor , sInsersionMesure , NumberToString ( nFreightCube ) , NumberToString ( nManuelFreight ) ) ;
ENDIF ;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

# Suppression de la vue source
ViewDestroy ( C_Cube_Logistique , view_copy ) ;
# Suppression des sous-ensembles pour la vue source
SubsetDestroy ( D_CURRENT_PHASE , subset_copy ) ;
SubsetDestroy ( D_STANDARD_INDEXE , subset_copy ) ;
SubsetDestroy ( D_PERIOD , subset_copy ) ;
SubsetDestroy ( D_SALES_ORG , subset_copy ) ;
SubsetDestroy ( D_DISTRIB_CHANNEL , subset_copy ) ;
SubsetDestroy ( D_MATERIAL_PLAN , subset_copy ) ;
SubsetDestroy ( D_CUSTOMER , subset_copy ) ;
SubsetDestroy ( D_MAT_FREIGHT_GROUP , subset_copy ) ;
SubsetDestroy ( D_SHIP_POINT , subset_copy ) ;
SubsetDestroy ( D_SHIP_PLANT , subset_copy ) ;
SubsetDestroy ( D_PROD_PLANT , subset_copy ) ;
SubsetDestroy ( D_VENDOR , subset_copy ) ;
SubsetDestroy ( D_LOGISTIQUE_IND , subset_copy ) ;
#endregion