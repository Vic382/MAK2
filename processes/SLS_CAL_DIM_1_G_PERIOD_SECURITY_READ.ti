#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

###########################################################################################
#                                 DESCRIPTION DU PROCESSUS                                 #
#                                                                                          #
# Date :   08/04/2019                                                                       #
#                                                                                           #
# Fait par :   Elisabeth MOUNIER                                                             #
#                                                                                            #
# Action : Mise à jour de la sécurité sur la dimension 1_G_PERIOD : 						#
# 			lecture seule pour tous les moins inférieurs au 1er mois de simulation 			#
#                                                                                           #
###############################################################################################



#====================================#
#             Déclaration des variables                   #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Cible = '}ElementSecurity_1_G_PERIOD';
C_Cube_Source = '}ElementSecurity_1_G_PERIOD';
C_zParam = 'zPARAM';
C_Current_Phase = '}ElementAttributes_1_G_CURRENT_PHASE';


#--------------------Dimensions--------------------#

D_PERIOD = '1_G_PERIOD';
D_GROUPS = '}Groups';

#--------------------Eléments--------------------#

Phase_En_Cours = CellGetS(C_zPARAM, 'Phase', 'Value');
First_sim_month = CellGetS(C_Current_Phase, Phase_En_Cours , 'First simulation month');

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

DatasourceASCIIDecimalSeparator=',';
DatasourceASCIIThousandSeparator=' ';

#--------------------Vues--------------------#
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Subsets--------------------#
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME; 



#====================================#
#    Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#     Initialisation de la vue à supprimer   #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);


#============================================#
#     Initialisation de la vue à copier		 #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_copy);
subsetDestroy(D_PERIOD, subset_copy);
subsetDestroy(D_GROUPS, subset_copy);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_copy);

#MDX_PERIOD
MDX_PERIOD = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1SUBSETALL([1_G_PERIOD].[1_G_PERIOD])}}';
SubsetCreatebyMDX(subset_copy, MDX_PERIOD);
SubsetElementDelete(D_PERIOD, subset_copy,1);

#MDX_GROUPS
MDX_GROUPS = '{{[}Groups].[ADMIN]}, {EXCEPT(EXCEPT(EXCEPT(EXCEPT(TM1SUBSETALL([}Groups].[}Groups]), {[}Groups].[ADMIN]}), {[}Groups].[SecurityAdmin]}), {[}Groups].[DataAdmin]}), {[}Groups].[OperationsAdmin]})}}';
SubsetCreateByMDX(subset_copy, MDX_GROUPS);
SubsetElementDelete(D_GROUPS, subset_copy, 1);

ViewSubsetAssign( C_Cube_Source, view_copy, D_PERIOD, subset_copy);
ViewSubsetAssign( C_Cube_Source, view_copy, D_GROUPS, subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 0);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 0);

DatasourceCubeView = view_copy;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

If(vPeriod @= 'Tech_flag');
	CellPutS('WRITE', C_Cube_Cible, vPeriod, vGroups);
EndIf;

If(ATTRS(D_PERIOD, vPeriod, 'Index') @= 'T' % ATTRS(D_PERIOD, vPeriod, 'Index') @= 'C');
	CellPutS('WRITE', C_Cube_Cible, vPeriod, vGroups);
    itemskip;
EndIf;

If(StringToNumber(ATTRS(D_PERIOD, vPeriod, 'Index')) < StringToNumber(ATTRS(D_PERIOD, First_sim_month, 'Index')));
	CellPutS('READ', C_Cube_Cible, vPeriod, vGroups);
    Trimestre_Campagne = ELPAR( D_PERIOD, vPeriod, 1);
    Trimestre_Fiscal = ELPAR( D_PERIOD, vPeriod, 2);
    Trimestre_Calendar = ELPAR( D_PERIOD, vPeriod, 3);
    Annee_Campagne = ELPAR( D_PERIOD, Trimestre_Campagne, 1);
    Annee_Fiscal = ELPAR( D_PERIOD, Trimestre_Fiscal, 2);
    Annee_Calendar = ELPAR( D_PERIOD, Trimestre_Calendar, 3);
    If(Trimestre_Campagne @<> '');
    	CellPutS('READ', C_Cube_Cible, Trimestre_Campagne, vGroups);
    EndIf;
    If(Trimestre_Fiscal @<> '');
    	CellPutS('READ', C_Cube_Cible, Trimestre_Fiscal, vGroups);
    EndIf;
    If(Trimestre_Calendar @<> '');
    	CellPutS('READ', C_Cube_Cible, Trimestre_Calendar, vGroups);
    EndIf;
    If(Annee_Campagne @<> '');
    	CellPutS('READ', C_Cube_Cible, Annee_Campagne, vGroups);
    EndIf;
    If(Annee_Fiscal @<> '');
    	CellPutS('READ', C_Cube_Cible, Annee_Fiscal, vGroups);
    EndIf;
    If(Annee_Calendar @<> '');
    	CellPutS('READ', C_Cube_Cible, Annee_Calendar, vGroups);
    EndIf;
	
Else;
	CellPutS('WRITE', C_Cube_Cible, vPeriod, vGroups);
EndIf;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

  #SecurityRefresh;

#====================================#
#    Activation de la consignation	 #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_copy);
subsetDestroy(D_PERIOD, subset_copy);
subsetDestroy(D_GROUPS, subset_copy);
#endregion