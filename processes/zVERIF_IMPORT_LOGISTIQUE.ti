#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   11/04/2023                                                        #
#                                                                            #
# Fait par :    ELH		                                                     #
#                                                                            #
# Action : Processus permettant de récupérer le nombre de lignes             #
#          modifiées dans le fichier source et le nombre de lignes           #
#		   parcourue dans le cube SLS_FR_COST_PLAN lors de l'import du       #
#          du fichier fourni par la logistique.                              #
#          Appeler par le processus SLS_MASTER_CHA_CUB_SLS_FR_COST_PLAN      #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#


#--------------------Cubes--------------------#
C_Cube = 'zLogistiqueTemp';

#--------------------Dimensions--------------------#
D_MAT_FREIGHT_GROUP = 'SLS_MAT_FREIGHT_GROUP' ;
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_PERIOD = '1_G_PERIOD';
D_CUSTOMER = 'SLS_CUSTOMER';
D_IND = 'zLogistiqueIND';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

e_message_data = '';

# Dimension indicateur : récupération des lignes Cible
sLignesCible = 'NbLignesCible' ;
# Dimension indicateur : récupération des lignes modifiées dans le fichier
sLignesModifiees = 'NbLignesModif' ;

# Stockage des nombres de lignes (Cubes et variables)
C_Cube_Stockage = 'zVERIF_IMPORT_LOGISTIQUE' ;
nLignesCible = 0 ;
nLignesModifiees = 0 ;

#--------------------Vues--------------------#
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer = C_Cube ;
DatasourceCubeview = view_copy ;

#As_Temporary = 1;
ViewDestroy ( C_Cube , view_copy ) ;
SubsetDestroy ( D_MAT_FREIGHT_GROUP , subset_copy ) ;
SubsetDestroy ( D_SHIP_POINT , subset_copy ) ;
SubsetDestroy ( D_PERIOD , subset_copy ) ;
SubsetDestroy ( D_CUSTOMER , subset_copy ) ;
SubsetDestroy ( D_IND , subset_copy ) ;
 
#--------------------Création des objets Source--------------------#
ViewCreate(C_Cube ,view_copy);

# SLS_MAT_FREIGHT_GROUP
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_MAT_FREIGHT_GROUP |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube,view_copy, D_MAT_FREIGHT_GROUP,subset_copy);

# SLS_SHIP_POINT
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_SHIP_POINT |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube,view_copy, D_SHIP_POINT,subset_copy);

# 1_G_PERIOD
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_PERIOD |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube,view_copy, D_PERIOD,subset_copy);

#SLS_CUSTOMER
StringMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| D_CUSTOMER |'] )}, 0)}' ;
SubsetCreatebyMDX ( subset_copy , StringMDX ) ;
ViewSubsetAssign(C_Cube,view_copy, D_CUSTOMER,subset_copy);

#_IND
subsetcreate(D_IND,subset_copy );
SubsetElementInsert(D_IND, subset_copy, sLignesCible , 1);
ViewSubsetAssign(C_Cube,view_copy, D_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées pour la vue source--------------------#
ViewExtractSkipRuleValuesSet (C_Cube,view_copy,1);
ViewExtractSkipCalcsSet (C_Cube,view_copy, 1);
ViewExtractSkipZeroesSet (C_Cube,view_copy, 1);

# Pas de vue RAZ
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
# Comptage, sur le croissement, de la ligne Cible
nLignesCible = nLignesCible + Value ;

# Récupération de l'éventuel comptage de la ligne modifiée du fichier et comptage générale
# L'ordre des dimensions du cube est : Mat_freight_group , Ship_point , Period , Customer, IND
# Mais, les variables renvoient ne correspondent pas à l'attendu :
# v_mesure = mat_freight_group
# v_customer = ship_point
# v_mat_freight_group = period
# v_ship_point = customer
nLignesModifiees = nLignesModifiees + CellGetN ( C_Cube , v_mesure , v_customer , v_mat_freight_group , v_ship_point , sLignesModifiees ) ;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

# Suppression de la vue source
ViewDestroy ( C_Cube , view_copy ) ;
# Suppression des sous-ensembles pour la vue source
SubsetDestroy ( D_MAT_FREIGHT_GROUP , subset_copy ) ;
SubsetDestroy ( D_SHIP_POINT , subset_copy ) ;
SubsetDestroy ( D_PERIOD , subset_copy ) ;
SubsetDestroy ( D_CUSTOMER , subset_copy ) ;
SubsetDestroy ( D_IND , subset_copy ) ;

# Stockage des nombres de lignes
# Nombre de lignes Cible
CellPutN ( nLignesCible , C_Cube_Stockage , 'Nombre de lignes dans la cible' , 'Valeur_N' ) ;
# Nombre de lignes modifiées dans le fichier
CellPutN ( nLignesModifiees , C_Cube_Stockage , 'Nombre de lignes modifiées dans le fichier' , 'Valeur_N' ) ;
#endregion