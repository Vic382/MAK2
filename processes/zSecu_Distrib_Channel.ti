#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

################################################################
#                 DESCRIPTION DU PROCESSUS                     #
#                                                              #
# Date :   11/04/2019                                          #
#                                                              #
# Fait par :   Anne BESNARD                                    #
#                                                              #
# Action : Sécurité sur les distrib channel				       #
#															   #
#                                                              #
################################################################

#====================================#
#     Déclaration des variables      #
#====================================#

#--------------------Cubes--------------------#
C_ElementSecurity_Distrib_Channel = '}ElementSecurity_1_G_Distrib_Channel';

#--------------------Dimensions--------------------#
D_Distrib_Channel = '1_G_DISTRIB_CHANNEL';
D_Groups = '}Groups';

#--------------------Elements--------------------#



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


#vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#=========================================#
#   Initialisation du subset à supprimer  #
#=========================================#

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Distrib_Channel, view_erase );
SubsetDestroy(D_Distrib_Channel, subset_erase);
SubsetDestroy(D_Groups, subset_erase);

#-----------Création des objets-----------#
#Vue
ViewCreate( C_ElementSecurity_Distrib_Channel, view_erase, 1 );


#D_Ditrib_Channel
MDX = '{{[1_G_DISTRIB_CHANNEL].[Total Distribution Channel]},{TM1SUBSETALL([1_G_DISTRIB_CHANNEL])}}';
SubsetCreatebyMDX( subset_erase, MDX, 1 );
SubsetElementDelete( D_Distrib_Channel, subset_erase, 1 );

#D_Groups
MDX = '{
	{[}Groups].[ADMIN]},
	{[}Groups].[Functional_Admin_CDG]},
	{EXCEPT(
		{TM1SUBSETALL([}Groups])} , 		
		TM1FILTERBYPATTERN(
			{TM1SUBSETALL([}Groups])} , 
			"*ADMIN*"
			)
		)
	}
}';
SubsetCreatebyMDX( subset_erase, MDX, 1 );
SubsetElementDelete( D_Groups, subset_erase, 1 );

#-----Affectation des sous-ensembles à la vue---#
ViewSubsetAssign(C_ElementSecurity_Distrib_Channel, view_erase, D_Distrib_Channel, subset_erase);
ViewSubsetAssign(C_ElementSecurity_Distrib_Channel, view_erase, D_Groups, subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_ElementSecurity_Distrib_Channel, view_erase,1);
ViewSetSkipCalcs(C_ElementSecurity_Distrib_Channel,view_erase, 0);
ViewSetSkipZeroes(C_ElementSecurity_Distrib_Channel,view_erase, 0);

#-------définition du subset source-------#
ViewZeroOut( C_ElementSecurity_Distrib_Channel, view_erase );

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Distrib_Channel, view_erase );
SubsetDestroy(D_Distrib_Channel, subset_erase);
SubsetDestroy(D_Groups, subset_erase);


#=========================================#
#   Initialisation du subset à copier     #
#=========================================#

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Distrib_Channel, view_copy );
SubsetDestroy(D_Distrib_Channel, subset_copy);
SubsetDestroy(D_Groups, subset_copy);

#-----------Création des objets-----------#
#Vue
ViewCreate( C_ElementSecurity_Distrib_Channel, view_copy, 1 );


#D_Distrib_Channel
MDX = '{{[1_G_DISTRIB_CHANNEL].[Total Distribution Channel]},{TM1SUBSETALL([1_G_DISTRIB_CHANNEL])}}';
SubsetCreatebyMDX( subset_copy, MDX, 1 );
SubsetElementDelete( D_Distrib_Channel, subset_copy, 1 );

#D_Groups
MDX = '{
	{[}Groups].[ADMIN]},
	{[}Groups].[Functional_Admin_CDG]},
	{EXCEPT(
		{TM1SUBSETALL([}Groups])} , 		
		TM1FILTERBYPATTERN(
			{TM1SUBSETALL([}Groups])} , 
			"*ADMIN*"
			)
		)
	}
}';
SubsetCreatebyMDX( subset_copy, MDX, 1 );
SubsetElementDelete( D_Groups, subset_copy, 1 );

#-----Affectation des sous-ensembles à la vue---#
ViewSubsetAssign(C_ElementSecurity_Distrib_Channel, view_copy, D_Distrib_Channel, subset_copy);
ViewSubsetAssign(C_ElementSecurity_Distrib_Channel, view_copy, D_Groups, subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_ElementSecurity_Distrib_Channel, view_copy,1);
ViewSetSkipCalcs(C_ElementSecurity_Distrib_Channel,view_copy, 0);
ViewSetSkipZeroes(C_ElementSecurity_Distrib_Channel,view_copy, 0);

#-------définition du subset source-------#
DatasourceCubeview = view_copy;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****



If(AttrN(D_DISTRIB_CHANNEL,vELEM_DISTRIB_CHANNEL,'Principal Distrib Channel')=0);
	ItemSkip;
EndIf;

vELEM_DISTRIB_CHANNEL = DimensionElementPrincipalName( D_Distrib_Channel, vELEM_DISTRIB_CHANNEL );
vELEM_Groups = DimensionElementPrincipalName( D_Groups, vELEM_Groups );

# If(SCAN('_'|vELEM_DISTRIB_CHANNEL, vELEM_Groups)<>0 % vELEM_Groups @= 'Agents' % AttrN(D_Groups, vELEM_Groups, 'Sales')=0 % AttrN(D_Groups, vELEM_Groups, 'Sales Org Only')=1);
# 	CellPutS('WRITE', C_ElementSecurity_Distrib_Channel, vELEM_DISTRIB_CHANNEL, vELEM_Groups);
# ElseIf(AttrN(D_Groups, vELEM_Groups, 'Sales') = 1 & AttrN(D_Groups, vELEM_Groups, 'Sales Group') = 0 & vELEM_DISTRIB_CHANNEL @= 'TOTAL_DISTRIB_CHANNEL');
# 	CellPutS('READ', C_ElementSecurity_Distrib_Channel, vELEM_DISTRIB_CHANNEL, vELEM_Groups);
# EndIf;

If(vELEM_DISTRIB_CHANNEL @= 'TOTAL_DISTRIB_CHANNEL' & AttrN(D_Groups, vELEM_Groups, 'Sales Group')=0 );
	CellPutS('READ', C_ElementSecurity_Distrib_Channel, vELEM_DISTRIB_CHANNEL, vELEM_Groups);
EndIf;

If(vELEM_DISTRIB_CHANNEL @<> 'TOTAL_DISTRIB_CHANNEL' & (SCAN('_'|vELEM_DISTRIB_CHANNEL, vELEM_Groups)<>0 % vELEM_Groups @= 'Agents' % AttrN(D_Groups, vELEM_Groups, 'Sales')=0 % AttrN(D_Groups, vELEM_Groups, 'Sales Org Only')=1));
	CellPutS('WRITE', C_ElementSecurity_Distrib_Channel, vELEM_DISTRIB_CHANNEL, vELEM_Groups);
EndIf;


#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****


#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Distrib_Channel, view_copy );
SubsetDestroy(D_Distrib_Channel, subset_copy);
SubsetDestroy(D_Groups, subset_copy);

#endregion