#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



################################################################
#                       DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   19/04/2019                                                                                                                #
#                                                                                                                                                   #
# Fait par :   Elisabeth MOUNIER                                                                                              #
#                                                                                                                                                   #
# Action : Switch Sales Group dans le cube SLS_PRICE
# Lancé à la demande par le CDG pour changement de la valeur lorsque Sales Group histo différent de l'attribut du client
#################################################################

#La grille tarifaire de Retail GMS se fait sur Admin Retail donc pas de switch article
#on fait seulement pour retail RHF et B2B Sucre BOULPAT

#====================================#
#         Déclaration des variables #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_PRICE';
C_Cube_Cible = 'SLS_PRICE';
C_zPARAM = 'zPARAM';
C_zSELECT = 'zSELECT';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CUSTOMER = 'SLS_CUSTOMER_PRICE';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN_PRICE';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_SALES_PLAN_IND='SLS_PRICE_IND';
#--------------------Elements--------------------#

e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClients = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
#------------------Paramètres zSelect ---------------#
P_DISTRIB = CellGetS(C_zSELECT, vClients, 'Distribution Channel');
If(P_DISTRIB @= '');
	P_DISTRIB = 'TOTAL_DISTRIB_CHANNEL';
EndIf;

P_SALES_ORG = CellGetS(C_zSELECT, vClients, 'Sales Organisation');
If(P_SALES_ORG @= '');
	P_SALES_ORG = 'TOTAL SALES ORG';
EndIf;

#modif DIMO le 25/11/2021 on cherche la phase en cours dans zselect pour les RFC
#Phase_En_Cours = CellGetS(C_zPARAM, 'Phase', 'Value');
Phase_En_Cours = CellGetS(C_zSELECT, vClients, 'Current Phase Sales');


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#   Désactivation de la consignation #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_CUSTOMER, subset_copy);
subsetdestroy(D_SALES_ORG, subset_copy);
subsetdestroy(D_DISTRIB_CHANNEL, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
SubsetCreate(D_PHASE, subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, Phase_En_Cours, 1);


#D_CUSTOMER
MDX_CUSTOMER = '{{[SLS_CUSTOMER_PRICE].[N/A_CUSTOMER_PRICE]}, {FILTER(TM1SUBSETALL([SLS_CUSTOMER_PRICE].[SLS_CUSTOMER_PRICE]) , ([SLS_CUSTOMER_PRICE].[SLS_CUSTOMER_PRICE].CURRENTMEMBER.PROPERTIES("IC1") = "IC1 - E00095"))}, {FILTER(TM1SUBSETALL([SLS_CUSTOMER_PRICE].[SLS_CUSTOMER_PRICE]) , ([SLS_CUSTOMER_PRICE].[SLS_CUSTOMER_PRICE].CURRENTMEMBER.PROPERTIES("IC1") = "IC1 - E00070"))}}';
SubsetCreatebyMDX( subset_copy, MDX_CUSTOMER);
SubsetElementDelete( D_CUSTOMER, subset_copy, 1);


#D_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{DESCENDANTS([1_G_DISTRIB_CHANNEL].[1_G_DISTRIB_CHANNEL].[' | P_DISTRIB |'])}}';
SubsetCreatebyMDX( subset_copy, MDX_DISTRIB_CHANNEL);
SubsetElementDelete( D_DISTRIB_CHANNEL,subset_copy, 1);


#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{DESCENDANTS([1_G_SALES_ORG].[1_G_SALES_ORG].[' | P_SALES_ORG |'])}}';
SubsetCreatebyMDX(subset_copy, MDX_SALES_ORG);
SubsetElementDelete( D_SALES_ORG,subset_copy, 1);

#D_PERIOD
MDX_PERIOD = '{{[1_G_PERIOD].[Campaign]},{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}, {TM1SubsetToSet([1_G_PERIOD] , "Calendar Input")}, {TM1SubsetToSet([1_G_PERIOD] , "Fiscal Input")}, {TM1SubsetToSet([1_G_PERIOD] , "Campaign Input")}}';
SubsetCreatebyMDX( subset_copy, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_copy, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy,D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PERIOD, subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_SALES_ORG,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewExtractSkipRuleValuesSet(C_Cube_Source,view_copy,1);
ViewExtractSkipCalcsSet(C_Cube_Source,view_copy, 1);
ViewExtractSkipZeroesSet(C_Cube_Source,view_copy, 1);

DatasourceCubeview= view_copy ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

################################################## ATTENTION PROVISOIRE : attente réponse JM. Comment fait-on si Multiple Sales Group ? ###############
Sales_Group_client = ATTRS(D_CUSTOMER, vCustomer, 'Sales Group');
If(DIMIX(D_SALES_GROUP, Sales_Group_client) = 0);
	itemskip;
EndIf;

###############################################################################################################


If(Sales_Group_client @<> vSales_Group);
	
    #on récupère la valeur à déplacer
    New_Value = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, vSales_Group, Indicateur);
    
    #Nouveau croisement
    Old_Value = CellGetN(C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel,vCustomer, vMaterial_Plan, Sales_Group_client, Indicateur);
    
    #### Dans la grille tarifaire, on ne copie la valeur de l'ancien croisement que si celui-ci est vide ####
    If(Old_Value = 0);
    	#on copie la nouvelle valeur sur l'attribut client
   	 	CellPutN(New_Value, C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, Sales_Group_client, Indicateur);
        #RAZ de l'ancien croisement
   	 	CellPutN(0, C_Cube_Source, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, vSales_Group, Indicateur);
    
    EndIf;

    
EndIf;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_CUSTOMER, subset_copy);
subsetdestroy(D_SALES_ORG, subset_copy);
subsetdestroy(D_DISTRIB_CHANNEL, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);

#====================================#
#    Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion