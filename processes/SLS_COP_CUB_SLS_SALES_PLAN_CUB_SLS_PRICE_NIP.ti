#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****



################################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   31/10/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :    Elisabeth MOUNIER                                                                                                #
#                                                                                                                                                   #
# Action : Processus de copie de la condition commerciale  'NIP' dans le cube des                    #
#	prévisions de vente 							     #
#					                			      #
#      Modifié le 22/03/2019 par Elisabeth Mounier
#	Action : adapter le process aux nouveaux cubes Price et Sales Plan                                                                                                                                                 #
#################################################################


#====================================#
#             Déclaration des variables                   #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_SALES_PLAN';
C_Cube_Cible = 'SLS_SALES_PLAN';
C_Cube_Price = 'SLS_PRICE'; 
C_Cube_Select = 'zSELECT'; 
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_PRICE_IND='SLS_PRICE_IND';

D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_SALES_PLAN_IND = 'SLS_SALES_PLAN_IND';


#--------------------Elements--------------------#
e_Message_Prolog = '';



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#Le type d'année représente un subset mis à jour par le CDG à l'initialisation de la phase
Year_Type = CellGetS(C_Cube_Select, vClient, 'Current_year_type');
Year = ATTRS(D_PERIOD, Period_Input, 'Year');
Parent = Year_Type | Year;

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#-------------------- Elements --------------------#

P_PHASE = CellGetS(C_Cube_Select, vClient, 'Current Phase');
P_SALES_GROUP = CellGetS(C_Cube_Select, vClient, 'Sales Group');


If(P_SALES_GROUP @= '');
	P_SALES_GROUP = 'TOTAL_SALES_GROUP';
EndIf;

P_DISTRIB = '10';

DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE,subset_erase);
Subsetdestroy(D_SALES_GROUP,subset_erase);
Subsetdestroy(D_CURRENCY,subset_erase);
Subsetdestroy(D_VOLUME_UNIT,subset_erase);
Subsetdestroy(D_SALES_PLAN_IND,subset_erase);
Subsetdestroy(D_PERIOD,subset_erase);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_erase);
Subsetdestroy(D_MATERIAL_PLAN,subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE,subset_erase);
SubsetElementInsert(D_PHASE, subset_erase, P_PHASE, 1);

#D_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_erase);
SubsetElementInsert(D_SALES_GROUP, subset_erase, P_SALES_GROUP, 1);

#D_PERIOD
MDX_PERIOD = '{{[1_G_PERIOD].[N/A_PERIOD]},{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {['  | Parent | ']},  ALL, RECURSIVE )}, 0)}}';
SubsetCreateByMDX(subset_erase, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_erase, 1);

#D_MATERIAL_PLAN
MDX_MATERIAL_PLAN =  '{{[SLS_MATERIAL_PLAN].[TOTAL_PLANNING_MATERIAL]},{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {[SLS_MATERIAL_PLAN].[D_10]},  ALL, RECURSIVE )}, 0)}}';
SubsetCreateByMDX(subset_erase, MDX_MATERIAL_PLAN);
SubsetElementDelete( D_MATERIAL_PLAN, subset_erase, 1);

#D_CURRENCY
subsetcreate(D_CURRENCY,subset_erase);
SubsetElementInsert(D_CURRENCY, subset_erase, 'EUR', 1);

#D_VOLUME_UNIT
subsetcreate(D_VOLUME_UNIT,subset_erase);
SubsetElementInsert(D_VOLUME_UNIT, subset_erase, 'TO', 1);

#D_SALES_PLAN_IND
subsetcreate(D_SALES_PLAN_IND,subset_erase);
SubsetElementInsert(D_SALES_PLAN_IND, subset_erase, 'NIP_UNIT', 1);

#Spécifique au Retail
#D_DISTRIB_CHANNEL
subsetcreate(D_DISTRIB_CHANNEL,subset_erase);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_erase,P_DISTRIB, 1);



#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_GROUP,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CURRENCY,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_VOLUME_UNIT,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_PLAN_IND,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_MATERIAL_PLAN,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE,subset_erase);
Subsetdestroy(D_SALES_GROUP,subset_erase);
Subsetdestroy(D_CURRENCY,subset_erase);
Subsetdestroy(D_VOLUME_UNIT,subset_erase);
Subsetdestroy(D_SALES_PLAN_IND,subset_erase);
Subsetdestroy(D_PERIOD,subset_erase);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_erase);
Subsetdestroy(D_MATERIAL_PLAN,subset_erase);



#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

# on veut avoir accès aux consos de la dim Customer
# mais la vue doit commencer aux éléments ShipTO
# donc on ne prend pas les consos dans la vue source, on accèdera au parent depuis le ShipTO

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
Subsetdestroy(D_PHASE,subset_copy);
Subsetdestroy(D_PERIOD,subset_copy);
Subsetdestroy(D_SALES_GROUP,subset_copy);
Subsetdestroy(D_SALES_ORG,subset_copy);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_copy);
Subsetdestroy(D_MATERIAL_PLAN,subset_copy);
Subsetdestroy(D_CUSTOMER,subset_copy);
Subsetdestroy(D_CURRENCY,subset_copy);
Subsetdestroy(D_VOLUME_UNIT,subset_copy);
Subsetdestroy(D_SALES_PLAN_IND,subset_copy);


#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
subsetcreate(D_PHASE,subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, P_PHASE, 1);

#D_PERIOD
MDX_PERIOD = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {['  | Parent | ']},  ALL, RECURSIVE )}, 0)}}';
SubsetCreateByMDX(subset_copy, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_copy, 1);

#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({TM1SUBSETALL([1_G_SALES_ORG])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_SALES_ORG);
SubsetElementDelete( D_SALES_ORG, subset_copy, 1);

#Spécifique au Retail
#D_DISTRIB_CHANNEL
subsetcreate(D_DISTRIB_CHANNEL,subset_copy);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy,P_DISTRIB, 1);

#D_MATERIAL_PLAN
MDX_MATERIAL_PLAN =  '{{[SLS_MATERIAL_PLAN].[TOTAL_PLANNING_MATERIAL]},{TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {[SLS_MATERIAL_PLAN].[D_10]},  ALL, RECURSIVE )}, 0)}}';
SubsetCreateByMDX(subset_copy, MDX_MATERIAL_PLAN);
SubsetElementDelete( D_MATERIAL_PLAN, subset_copy, 1);

#D_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_copy);
SubsetElementInsert(D_SALES_GROUP, subset_copy, P_SALES_GROUP, 1);

#D_CUSTOMER
MDX_CUSTOMER = '{{[SLS_CUSTOMER].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL( {TM1SUBSETALL( [SLS_CUSTOMER] )}, 0)}}';
SubsetCreateByMDX(subset_copy, MDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_copy, 1);

#D_CURRENCY
subsetcreate(D_CURRENCY,subset_copy);
SubsetElementInsert(D_CURRENCY, subset_copy, 'EUR', 1);

#D_VOLUME_UNIT
subsetcreate(D_VOLUME_UNIT,subset_copy);
SubsetElementInsert(D_VOLUME_UNIT, subset_copy, 'TO', 1);

#D_SALES_PLAN_IND
subsetcreate(D_SALES_PLAN_IND,subset_copy);
SubsetElementInsert(D_SALES_PLAN_IND, subset_copy, 'INV_VAL', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_GROUP,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_MATERIAL_PLAN,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENCY,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_VOLUME_UNIT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_PLAN_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);
ViewSetSkipRuleValues(C_Cube_Source,view_copy,0);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 0);


# définition de la vue source#

DatasourceCubeview= view_copy;


#endregion
#region Data
############################# Vue source ne skip pas les 0 : ATTENTION ###################################"
If(Valeur = 0);
	itemskip;
EndIf;

############################################################################
###				   	NIP					          ####
#############################################################################

########### Calcul du N/A_Period du type d'année en cours ###############
#Attention, saisie du NIP sur un total année, soit le N/A de la période en cours

Year_Type = CellGetS(C_Cube_Select, vClient, 'Current_year_type');

Year_Type_N = ATTRS(D_PERIOD, vPeriod, Year_type | '_N');


########### Calcul du N/A_Lab_Office  ###############
#Saisie du NIP sur un Lab Office, soit le N/A du Lab Office sélectionné

Tot_Lab_Office = ATTRS(D_MATERIAL_PLAN, vMaterial_Plan, 'Lab');
#Lab_Office_Input = 'N/A_' | Tot_Lab_Office; 
Lab_Office_Input = Tot_Lab_Office;

#récupérer l'indicateur du cube SLS_PRICE (attention notre vue source est celle de sls_plan)

#CAS 1 : check si des prix sont renseignés à la maille PM/ShipTo


TOT_SHIPTO_NIP = CellGetN(C_Cube_Price, vPhase, Period_Input, vSales_Org, vDistrib_Channel, vCustomer, Lab_Office_Input, 'N/A_SALES_GROUP', 'NIP');
If(TOT_SHIPTO_NIP <> 0);
#pour calculer le poids, on a besoin de l'invoicedValue au croisement NA_Period_Input/NA_Lab_Input/ShipTO
		TOT_INV_VAL = CellGetN(C_Cube_Cible, vPhase, Year_Type_N, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, ('Lab':Tot_Lab_Office),vSales_Group, 'INV_VAL');

		#poids de ce croisement (qui permettra de calculer le pro rata de ce croisement)
		p = Valeur/TOT_INV_VAL;

		#calcul du NIP au prorata sur ce croisement
		Val_NIP = p * TOT_SHIPTO_NIP;

#Si Lab/ShipTo non renseigné, on cher=ck à la maille IC3
Else;
	vIC3 = ELPAR(D_CUSTOMER, vCustomer, 1);
	TOT_IC3_NIP = CellGetN(C_Cube_Price, vPhase, Period_Input, vSales_Org, vDistrib_Channel, vIC3, Lab_Office_Input, 'N/A_SALES_GROUP', 'NIP');
	If(TOT_IC3_NIP <> 0);

		#pour calculer le poids, on a besoin de l'invoicedValue au croisement NA_Period_Input/NA_Lab_Input/IC3
		TOT_INV_VAL = CellGetN(C_Cube_Cible, vPhase, Year_Type_N, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vIC3, ('Lab':Tot_Lab_Office),vSales_Group, 'INV_VAL');

		#poids de ce croisement (qui permettra de calculer le pro rata de ce croisement)
		p = Valeur/TOT_INV_VAL;

		#calcul du NIP au prorata sur ce croisement
		Val_NIP = p * TOT_IC3_NIP;

	#Si PM/IC3 non renseigné, on cher=ck à la maille NA_IC2
	Else;

		vIC2 = ELPAR(D_CUSTOMER, vIC3, 1);
		TOT_IC2_NIP = CellGetN(C_Cube_Price, vPhase, Period_Input, vSales_Org, vDistrib_Channel, vIC2, Lab_Office_Input, 'N/A_SALES_GROUP', 'NIP');
		
		
		If(TOT_IC2_NIP <> 0);

			#pour calculer le poids, on a besoin de l'invoicedValue au croisement TotPeriod/Tot Lab_Input/IC2
			TOT_INV_VAL = CellGetN(C_Cube_Cible, vPhase, Year_Type_N, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vIC2, ('Lab':Tot_Lab_Office), vSales_Group, Indicateur);

			# poids de ce croisement (qui permettra de calculer le pro rata de ce croisement)
			p = Valeur/TOT_INV_VAL;

			#calcul du NIP au prorata sur ce croisement
			Val_NIP = p * TOT_IC2_NIP;

		#Si PM/IC2 non renseigné, on check à la maille NA_IC1
		Else;


			vIC1 = ELPAR(D_CUSTOMER, vIC2, 1);
			TOT_IC1_NIP = CellGetN(C_Cube_Price, vPhase, Period_Input, vSales_Org, vDistrib_Channel, vIC1, Lab_Office_Input, 'N/A_SALES_GROUP', 'NIP');
			
			#pour calculer le poids, on a besoin de l'invoicedValue au croisement NA_Period_Input/NA_Lab_Input/IC1
			TOT_INV_VAL = CellGetN(C_Cube_Cible, vPhase, Year_Type_N, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vIC1, ('Lab':Tot_Lab_Office), vSales_Group, Indicateur);


			# poids de ce croisement (qui permettra de calculer le pro rata de ce croisement)	
			p = Valeur/TOT_INV_VAL;

			#calcul du NIP au prorata sur ce croisement
			Val_NIP = p * TOT_IC1_NIP;


		EndIf;
	EndIf;
EndIf;

#############10/05/2019 : modif car règle Valo sur NIP ###########################################
SHIPTO_VOLUME = CellGetN(C_Cube_Cible, vPhase, vPeriod, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, vMaterial_Plan,vSales_Group, 'SLS_VOL');
#calcul du NIP_UNIT car il y a une règle sur la VALO NIP
Val_NIP_UNIT = Val_NIP/SHIPTO_VOLUME;


########################### fin modif #######################################################

#on a seulement besoin de copier sur la période lue car pas besoin de copier le NIP s'il n'y a pas d'Invoiced Value
CellPutN(Val_NIP_UNIT, C_Cube_Cible, vPhase, vPeriod, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, vMaterial_Plan, vSales_Group, 'NIP_UNIT');

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****


#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
Subsetdestroy(D_PHASE,subset_copy);
Subsetdestroy(D_PERIOD,subset_copy);
Subsetdestroy(D_SALES_GROUP,subset_copy);
Subsetdestroy(D_SALES_ORG,subset_copy);
subsetdestroy(D_DISTRIB_CHANNEL,subset_copy);
Subsetdestroy(D_MATERIAL_PLAN,subset_copy);
Subsetdestroy(D_CUSTOMER,subset_copy);
Subsetdestroy(D_CURRENCY,subset_copy);
Subsetdestroy(D_VOLUME_UNIT,subset_copy);
Subsetdestroy(D_SALES_PLAN_IND,subset_copy);

#====================================#
#     Activation de la consignation  #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion