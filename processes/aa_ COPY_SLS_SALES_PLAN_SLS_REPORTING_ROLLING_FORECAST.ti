#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

################################################################
#                                               DESCRIPTION DU PROCESSUS                                             
#                                                                                                                                                  
# Date :   29/12/2020                                                                                                                
#                                                                                                                                                  
# Fait par :    Clémence COMBRE                                                                                               
#                                                                                                                                                  
# Action : Copie de la phase ROLLING FORECAST du cube SLS_SALES_PLAN          
# vers le cube SLS_REPORTING.                                                                        
#                                                                                                                                                 
#################################################################

# Cube paramètre utilisateur
sCubeUser = 'zSELECT' ;
# Utilisateur lancant le processus
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
#Cube administration
sCubePROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

# Information sur le process
Z_STATUS = 'KO' ;
CellPutS ( Z_STATUS , sCubeUser , vClient , 'ExecuteProcess' ) ;

#--------------------Paramètres utilisateurs--------------------#
# SALES_ORG
p_Sales_Org = CellGetS ( sCubeUser , vClient , 'Sales Organisation' ) ;
# DISTRIB_CHANNEL
p_Distrib_Channel = CellGetS ( sCubeUser , vClient , 'Distribution Channel' ) ;
# PHASE CURRENT PHASE
P_PHASE = CellGetS ( sCubeUser , vClient, 'Current Phase' );
#SALES GROUP
P_SALES_GROUP = CellGetS( sCubeUser , vClient , 'Sales Group' );
#--------------------Cubes--------------------#
sCubeSource = 'SLS_SALES_PLAN' ;
sCubeCible = 'SLS_REPORTING' ;

#-----Désactivation de la consignation-----# 

OldCubeLogChanges = CUBEGETLOGCHANGES( sCubeCible );
CUBESETLOGCHANGES( sCubeCible , 0);

#--------------------Vues--------------------#
sVueSource = 'Source_vue_' | Today (0) | '_' | GetProcessName () ; 
sVueCible = 'Cible_vue_' | Today (0) | '_' | GetProcessName () ; 

#--------------------Sous-ensembles--------------------#
sSubsetSource = 'Source_Subset_' | Today (0) | '_' | GetProcessName () ; 
sSubsetCible = 'Cible_Subset_' | Today (0) | '_' | GetProcessName () ; 


###########################################
## Creation vue source
###########################################

# Destruction pour recréation de la vue
ViewDestroy ( sCubeSource , sVueSource ) ;
ViewCreate ( sCubeSource , sVueSource ) ; 

#--------------------Dimensions-----------#
sDimPHASE = '1_G_CURRENT_PHASE';
sDimPERIOD = '1_G_PERIOD';
sDimSALESORG = '1_G_SALES_ORG';
sDimCHANNEL = '1_G_DISTRIB_CHANNEL';
sDimCURRENCY = '1_G_CURRENCY'; 
sDimVOLUME_UNIT = '1_G_VOLUME_UNIT';
sDimCUSTOMER = 'SLS_CUSTOMER';
sDimMATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
sDimSALES_GROUP = 'SLS_SALES_GROUP';
sDimMesure='SLS_SALES_PLAN_IND';

# Création des sous-ensembles des dimensions du cube

# sDimPHASE
sRFC = 'RFC' ; 
SubsetDestroy ( sDimPHASE , sSubsetSource ) ;
SubsetCreate ( sDimPHASE , sSubsetSource ) ; 
SubsetElementInsert ( sDimPHASE , sSubsetSource , sRFC, 1  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimPHASE , sSubsetSource ) ; 

# sDimPERIOD
SubsetDestroy ( sDimPERIOD , sSubsetSource ) ;
IF ( pMoisDebut @= '' % pMoisFin @= '' ) ;
 SubsetCreatebyMDX(  sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimPERIOD|'] )}, 0)}');
ELSE ;
 SubsetCreate ( sDimPERIOD , sSubsetSource ) ; 
 nDebut = Dimix ( sDimPERIOD , pMoisDebut ) ;
 nFin = Dimix ( sDimPERIOD , pMoisFin ) ;
 WHILE ( nDebut <= nFin ) ;
  sNom = DimNM ( sDimPERIOD , nDebut ) ;
  SubsetElementInsert ( sDimPERIOD , sSubsetSource , sNom , 1  ) ;
  nDebut = nDebut + 1 ;
 END ;
ENDIF ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimPERIOD , sSubsetSource ) ; 

# sDimSALESORG
IF ( p_Sales_Org @= '' ) ;
 SubsetCreatebyMDX( sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimSALESORG |'] )}, 0)}') ;
ELSE ;
 SubsetCreate ( sDimSALESORG , sSubsetSource ) ;
 SubsetElementInsert ( sDimSALESORG , sSubsetSource , p_Sales_Org , 1 ) ;
 ENDIF ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSALESORG , sSubsetSource ) ; 

# sDimCHANNEL
SubsetDestroy ( sDimCHANNEL , sSubsetSource ) ;
IF ( p_Distrib_Channel @= '' ) ;
 SubsetCreatebyMDX( sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimCHANNEL |'] )}, 0)}') ;
ELSE ;
 SubsetCreate ( sDimCHANNEL , sSubsetSource ) ;
 SubsetElementInsert ( sDimCHANNEL , sSubsetSource , p_Distrib_Channel , 1 ) ;
ENDIF ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimCHANNEL , sSubsetSource ) ; 

# sDimCURRENCY
SubsetDestroy ( sDimCURRENCY , sSubsetSource ) ;
SubsetCreate ( sDimCURRENCY , sSubsetSource ) ; 
SubsetElementInsert ( sDimCURRENCY , sSubsetSource , 'EUR',1  ) ;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimCURRENCY , sSubsetSource ) ; 

# sDimVOLUME_UNIT
SubsetDestroy ( sDimVOLUME_UNIT , sSubsetSource ) ;
SubsetCreatebyMDX(  sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimVOLUME_UNIT|'] )}, 0)}' );
ViewSubsetAssign ( sCubeSource , sVueSource , sDimVOLUME_UNIT , sSubsetSource ) ; 

# sDimCUSTOMER
SubsetDestroy (  sDimCUSTOMER , sSubsetSource ) ;
SubsetCreatebyMDX(  sSubsetSource  , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimCUSTOMER|'] )}, 0)}'  );
ViewSubsetAssign ( sCubeSource , sVueSource ,  sDimCUSTOMER , sSubsetSource ) ; 

# sDimMATERIAL_PLAN
SubsetDestroy ( sDimMATERIAL_PLAN , sSubsetSource ) ;
SubsetCreatebyMDX(  sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimMATERIAL_PLAN|'] )}, 0)}' );
ViewSubsetAssign ( sCubeSource , sVueSource ,  sDimMATERIAL_PLAN , sSubsetSource ) ; 

# sDimSALES_GROUP
SubsetDestroy ( sDimSALES_GROUP , sSubsetSource ) ;
IF (P_SALES_GROUP @= '');
 SubsetCreatebyMDX(  sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimSALES_GROUP |'] )}, 0)}'  );
ELSE;
 SubsetCreate ( sDimSALES_GROUP , sSubsetSource  ) ; 
 SubsetElementInsert ( sDimSALES_GROUP , sSubsetSource , P_SALES_GROUP , 1 ) ;
ENDIF;
ViewSubsetAssign ( sCubeSource , sVueSource , sDimSALES_GROUP , sSubsetSource ) ; 

# sDimMesure
SubsetDestroy ( sDimMesure , sSubsetSource ) ;
SubsetCreatebyMDX(  sSubsetSource ,'{{TM1FILTERBYLEVEL(DESCENDANTS([SLS_SALES_PLAN_IND].[Sales Volume] ), 0)}, {TM1FILTERBYLEVEL(DESCENDANTS([SLS_SALES_PLAN_IND].[4NET_UNIT]), 0)}}' ) ;
#SubsetCreatebyMDX(  sSubsetSource , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimMesure|'] )}, 0)}'  );
ViewSubsetAssign ( sCubeSource , sVueSource ,  sDimMesure , sSubsetSource ) ; 

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewExtractSkipCalcsSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipZeroesSet( sCubeSource , sVueSource , 1 );
ViewExtractSkipRuleValuesSet( sCubeSource , sVueSource , 1 );

#Définition de la source
DataSourceNameForServer = sCubeSource ;
DatasourceCubeView = sVueSource ;


###########################################
## Creation vue cible
###########################################

# Destruction pour recréation de la vue
ViewDestroy ( sCubeCible , sVueCible ) ;
ViewCreate ( sCubeCible , sVueCible ) ; 

# Création des sous-ensembles des dimensions du cube

#--------------------Dimensions-----------#
sDimPHASE = '1_G_PHASE_REP';
sDimPERIOD = '1_G_PERIOD';
sDimSALESORG = '1_G_SALES_ORG';
sDimCHANNEL = '1_G_DISTRIB_CHANNEL';
sDimVOLUME_UNIT = '1_G_VOLUME_UNIT';
sDimSALES_GROUP = 'SLS_SALES_GROUP';
sDimCUSTOMER = 'SLS_CUSTOMER';
sDimMATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
sDimPAYER = 'SLS_PAYER' ;
sDimSOLD = 'SLS_SOLD_TO' ;
sDimSHIPPOINT = 'SLS_SHIP_POINT';
sDimSHIPPLANT = 'SLS_SHIP_PLANT' ;
sDimPRODPLANT = 'SLS_PROD_PLANT' ;
sDimVENDOR = 'SLS_VENDOR' ;
sDimMATFREIGHT = 'SLS_MAT_FREIGHT_GROUP' ;
sDimINCOTERM = 'SLS_INCOTERM' ;
sDimQHQ = 'SLS_Q_HQ' ;
sDimMesure1 = 'SLS_REPORTING_IND' ;

# sDimPHASE
sRFCSales = 'RFC_Sales' ;
SubsetDestroy ( sDimPHASE , sSubsetCible ) ;
SubsetCreate ( sDimPHASE , sSubsetCible  ) ; 
SubsetElementInsert ( sDimPHASE , sSubsetCible , sRFCSales , 1 ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimPHASE , sSubsetCible ) ; 

# sDimPERIOD
SubsetDestroy ( sDimPERIOD , sSubsetCible ) ;
IF ( pMoisDebut @= '' % pMoisFin @= '' ) ;
 SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimPERIOD|'] )}, 0)}' );
ELSE ;
 SubsetCreate ( sDimPERIOD , sSubsetCible ) ; 
 nDebut = Dimix ( sDimPERIOD , pMoisDebut ) ;
 nFin = Dimix ( sDimPERIOD , pMoisFin ) ;
 WHILE ( nDebut <= nFin ) ;
  sNom = DimNM ( sDimPERIOD , nDebut ) ;
  SubsetElementInsert ( sDimPERIOD , sSubsetCible , sNom , 1  ) ;
  nDebut = nDebut + 1 ;
 END ;
ENDIF ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimPERIOD , sSubsetCible ) ; 

# sDimSALESORG
IF ( p_Sales_Org @= '' ) ;
 SubsetCreatebyMDX( sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimSALESORG |'] )}, 0)}') ;
ELSE ;
 SubsetCreate ( sDimSALESORG , sSubsetCible ) ;
 SubsetElementInsert ( sDimSALESORG , sSubsetCible , p_Sales_Org , 1 ) ;
 ENDIF ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimSALESORG , sSubsetCible ) ; 

# sDimCHANNEL
SubsetDestroy ( sDimCHANNEL , sSubsetCible ) ;
IF ( p_Distrib_Channel @= '' ) ;
 SubsetCreatebyMDX( sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimCHANNEL |'] )}, 0)}') ;
ELSE ;
 SubsetCreate ( sDimCHANNEL , sSubsetCible ) ;
 SubsetElementInsert ( sDimCHANNEL , sSubsetCible , p_Distrib_Channel , 1 ) ;
ENDIF ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCHANNEL , sSubsetCible ) ; 
 
# sDimVOLUME_UNIT
SubsetDestroy ( sDimVOLUME_UNIT , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimVOLUME_UNIT|'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible , sDimVOLUME_UNIT , sSubsetCible ) ; 

# sDimSALES_GROUP
SubsetDestroy ( sDimSALES_GROUP , sSubsetCible ) ;
IF (P_SALES_GROUP @= '');
 SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimSALES_GROUP |'] )}, 0)}'  );
ELSE;
 SubsetCreate ( sDimSALES_GROUP , sSubsetCible ) ; 
 SubsetElementInsert ( sDimSALES_GROUP , sSubsetCible , P_SALES_GROUP , 1) ;
ENDIF;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimSALES_GROUP , sSubsetCible ) ; 

# sDimCUSTOMER
SubsetDestroy (  sDimCUSTOMER , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimCUSTOMER|'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimCUSTOMER , sSubsetCible ) ; 

# sDimMATERIAL_PLAN
SubsetDestroy ( sDimMATERIAL_PLAN , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimMATERIAL_PLAN|'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimMATERIAL_PLAN , sSubsetCible ) ; 

#sDimPAYER 
SubsetDestroy ( sDimPAYER  , sSubsetCible ) ;
SubsetCreatebyMDX( sSubsetCible  , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimPAYER|'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimPAYER  , sSubsetCible ) ; 

#sDimSOLD 
SubsetDestroy ( sDimSOLD , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimSOLD|'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimSOLD , sSubsetCible ) ; 

#sDimSHIPPOINT
sShipPoint = 'N/A_SHIP_POINT' ;
SubsetDestroy ( sDimSHIPPOINT , sSubsetCible ) ;
SubsetCreate ( sDimSHIPPOINT , sSubsetCible ) ; 
SubsetElementInsert ( sDimSHIPPOINT , sSubsetCible , sShipPoint ,1 ) ;
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimSHIPPOINT , sSubsetCible ) ; 

#sDimSHIPPLANT 
sShipPlant = 'N/A_SHIP_PLANT' ;
SubsetDestroy ( sDimSHIPPLANT  , sSubsetCible ) ;
SubsetCreate ( sDimSHIPPLANT , sSubsetCible ) ; 
SubsetElementInsert ( sDimSHIPPLANT , sSubsetCible , sShipPlant , 1 ) ;
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimSHIPPLANT  , sSubsetCible ) ; 

#sDimPRODPLANT
sProdPlant = 'N/A_PROD_PLANT' ; 
SubsetDestroy ( sDimPRODPLANT , sSubsetCible ) ;
SubsetCreate ( sDimPRODPLANT , sSubsetCible ) ; 
SubsetElementInsert ( sDimPRODPLANT, sSubsetCible , sProdPlant , 1) ;
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimPRODPLANT , sSubsetCible ) ; 

#sDimVENDOR 
sVendor = 'N/A_VENDOR' ;
SubsetDestroy ( sDimVENDOR  , sSubsetCible ) ;
SubsetCreate ( sDimVENDOR , sSubsetCible  ) ; 
SubsetElementInsert ( sDimVENDOR , sSubsetCible , sVendor , 1) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimVENDOR  , sSubsetCible ) ; 

#sDimMATFREIGHT 
sMatFreight = 'N/A_MAT_FR_GROUP' ;
SubsetDestroy ( sDimMATFREIGHT , sSubsetCible ) ;
SubsetCreate ( sDimMATFREIGHT  , sSubsetCible ) ; 
SubsetElementInsert ( sDimMATFREIGHT  , sSubsetCible , sMatFreight , 1) ;
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimMATFREIGHT  , sSubsetCible ) ; 

#sDimINCOTERM 
SubsetDestroy ( sDimINCOTERM  , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimINCOTERM |'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimINCOTERM , sSubsetCible ) ; 

#sDimQHQ 
sQuota = 'HORS_QUOTA' ;
SubsetDestroy (sDimQHQ , sSubsetCible ) ;
SubsetCreate ( sDimQHQ   , sSubsetCible ) ; 
SubsetElementInsert ( sDimQHQ  , sSubsetCible , sQuota , 1) ;
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimQHQ, sSubsetCible ) ; 

# sDimMesure1
SubsetDestroy ( sDimMesure1 , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible ,  '{{TM1FILTERBYLEVEL(DESCENDANTS([SLS_REPORTING_IND].[Sales Volume] ), 0)}, {TM1FILTERBYLEVEL(DESCENDANTS([SLS_REPORTING_IND].[4NET_UNIT]), 0)}}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimMesure1 , sSubsetCible ) ; 

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewExtractSkipCalcsSet ( sCubeCible , sVueCible , 1 ) ;
ViewExtractSkipRuleValuesSet ( sCubeCible , sVueCible , 1 ) ;
ViewExtractSkipZeroesSet ( sCubeCible , sVueCible , 1 ) ;

ViewZeroOut ( sCubeCible , sVueCible ) ;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

# Déclaration des variables pour le cellput. Nous cherchons les attributs Payer, Sold-To et Incoterm de la dimension SLS_CUSTOMER

sPayer = ATTRS( sDimCUSTOMER, SLS_CUSTOMER , 'Payer');
If(sPayer @= '');
	sPayer = 'N/A_PAYER';
  EndIf;
sSold_To = ATTRS( sDimCUSTOMER, SLS_CUSTOMER, 'Sold-to');
If(sSold_To @= '');
	sSold_To = 'N/A_SOLD_TO';
EndIf;
sIncoterm = ATTRS( sDimCUSTOMER , SLS_CUSTOMER , 'Incoterm');
If(sIncoterm @= '');
	sIncoterm = 'N/A_INCOTERM';
EndIf;


# Copie de  la phase Rolling Forecast de SLS_SALES_PLAN vers SLS_REPORTING
# ELH - EVO Commerciaux - Arrondi à 3 décimales sur le volumes
IF ( ELPAR ( sDimMesure ,  SLS_SALES_PLAN_IND , 1 ) @= 'SLS_VOL' ) ;
 nValeur = ROUNDP ( Value , 3 ) ;
ELSE ;
 nValeur = Value ;
ENDIF ;

CellIncrementN ( Value , sCubeCible , sRFCSales , SLS_PERIOD, SLS_SALES_ORG , SLS_DISTRIB_CHANNEL, SLS_VOLUME_UNIT, SLS_SALES_GROUP, SLS_CUSTOMER, SLS_MATERIAL_PLAN,  sPayer , sSold_To ,  sShipPoint , sShipPlant , sProdPlant , sVendor , sMatFreight , sIncoterm , sQuota , SLS_SALES_PLAN_IND ) ; 
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

 #-- Supression de la RAZ
ViewDestroy (  sCubeCible , sVueCible ) ;
 #-- Suppression des Subsets créés pour le process
 SubsetDestroy ( sDimPHASE , sSubsetCible ) ;
 SubsetDestroy ( sDimPERIOD , sSubsetCible ) ;
 SubsetDestroy ( sDimSALESORG , sSubsetCible ) ;
 SubsetDestroy ( sDimCHANNEL , sSubsetCible ) ;
 SubsetDestroy ( sDimVOLUME_UNIT , sSubsetCible ) ;
 SubsetDestroy ( sDimSALES_GROUP , sSubsetCible ) ;
 SubsetDestroy ( sDimCUSTOMER , sSubsetCible ) ;
 SubsetDestroy ( sDimMATERIAL_PLAN , sSubsetCible ) ;
 SubsetDestroy ( sDimPAYER , sSubsetCible ) ;
 SubsetDestroy ( sDimSOLD , sSubsetCible ) ;
 SubsetDestroy ( sDimSHIPPOINT , sSubsetCible ) ;
SubsetDestroy ( sDimSHIPPLANT , sSubsetCible ) ;
SubsetDestroy ( sDimPRODPLANT , sSubsetCible ) ;
SubsetDestroy ( sDimVENDOR , sSubsetCible ) ;
SubsetDestroy ( sDimMATFREIGHT , sSubsetCible ) ;
 SubsetDestroy ( sDimINCOTERM , sSubsetCible ) ;
 SubsetDestroy ( sDimQHQ , sSubsetCible ) ;
 SubsetDestroy ( sDimMesure1 , sSubsetCible ) ;

 #Supression de la vue source
ViewDestroy ( sCubeSource , sVueSource ) ;
 #-- Suppression des Subsets créés pour le process
  SubsetDestroy ( sDimPHASE , sSubsetSource ) ;
 SubsetDestroy ( sDimPERIOD , sSubsetSource ) ;
 SubsetDestroy ( sDimSALESORG , sSubsetSource ) ;
 SubsetDestroy ( sDimCHANNEL , sSubsetSource ) ;
 SubsetDestroy ( sDimCURRENCY , sSubsetSource ) ;
 SubsetDestroy ( sDimVOLUME_UNIT , sSubsetSource ) ;
 SubsetDestroy ( sDimCUSTOMER , sSubsetSource ) ;
 SubsetDestroy ( sDimMATERIAL_PLAN , sSubsetSource ) ;
 SubsetDestroy ( sDimSALES_GROUP , sSubsetSource ) ;
 SubsetDestroy ( sDimMesure , sSubsetSource ) ;

#====================================#
#    Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES( sCubeCible );
CUBESETLOGCHANGES ( sCubeCible , 1);
#endregion