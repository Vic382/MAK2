#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   17/04/2019                                                        #
#                                                                            #
# Fait par :    JMB 		                                                 #
#                                                                            #
# Action : Processus copie des combinaisons commerciales prévisionnelles   	 #
#           vers les combinaisons logistiques 								 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_SALES_PLAN';
C_Cube_Cible = 'SLS_ASSIGN';
C_Cube_Init = 'SLS_INIT';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';
C_zPARAM = 'zPARAM';
C_CURRENCY_RATE = 'SLS_CURRENCY_RATE';
C_zSelect = 'zSELECT';

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_SALES_IND = 'SLS_SALES_PLAN_IND';
D_VERSION = 'SLS_VERSION';
D_LINE = '1_G_LINE';
D_ASSIGN_IND = 'SLS_ASSIGN_IND';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR';
D_INIT_IND = 'SLS_INIT_IND';

# VRT : Mise en place contrat indexé
D_Q_HQ = 'SLS_Q_HQ' ;
# Fin VRT 

#--------------------Elements--------------------#
vElem_Volume_Sales = 'Sales Volume';
vElem_Volume_Assigned = 'ASSIGN_VOL';
vElem_Ship_Point = 'Shipping Point';
vElem_Ship_Plant = 'Shipping Plant';
vElem_Prod_Plant = 'Production Plant';
vElem_Vendor = 'Vendor';
vPro_Copie_Combinaisons_Logistiques_Tot = 'SLS_COP_CUB_SLS_ASSIGN_CUB_SLS_INIT_Prev_Tot_Periodes';
vPro_Copie_Combinaisons_Logistiques = 'SLS_COP_CUB_SLS_ASSIGN_CUB_SLS_INIT_Prev';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
If(DIMIX('}Clients',vClient)=0);
	vClient = 'Admin';
EndIf;

#--------------------Vues--------------------#
view_erase = 'z_erase2_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy2_' | vUSER |'_' | vPRO_NAME;
view_erase_pro_data = 'z_erase2_' | vUSER | '_' | vPro_Copie_Combinaisons_Logistiques_Tot;
view_copy_pro_data_1 = 'z_copy2_' | vUSER | '_' | vPro_Copie_Combinaisons_Logistiques_Tot;
view_copy_pro_data_2 = 'z_copy2_' | vUSER | '_' | vPro_Copie_Combinaisons_Logistiques;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase2_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy2_' | vUSER |'_' | vPRO_NAME;
subset_temp = 'z_temp2_' | vUSER |'_' | vPRO_NAME;
subset_erase_pro_data = 'z_erase2_' | vUSER | '_' | vPro_Copie_Combinaisons_Logistiques_Tot;
subset_copy_pro_data_1 = 'z_copy2_' | vUSER | '_' | vPro_Copie_Combinaisons_Logistiques_Tot;
subset_copy_pro_data_2 = 'z_copy2_' | vUSER | '_' | vPro_Copie_Combinaisons_Logistiques;


#===============================#
#	Vérification des paramètres	#
#===============================#

# Initialisation du message d'erreur
e_Message_Prolog = '';

# Récupération de la phase en cours et des paramètres de cette phase
#Curr_Phase = CellGetS(C_zPARAM,'Phase','Value');
P_Phase = CellGetS(C_zSelect, vClient ,'Current Phase');
v_FirstSim = ATTRS(D_CURRENT_PHASE,P_phase, 'First Simulation month');
v_FirstSimInd = ATTRS(D_PERIOD,v_FirstSim, 'Index');

P_Phase_Cap = ATTRS(D_CURRENT_PHASE, P_Phase, 'Caption');
vElem_Tot_Period = 'subset_cal_fisc_camp';

# Récupération de la devise sélectionnée
#P_Currency = CellGetS(C_zSelect, vClient ,'Currency');

# Récupération de la sales org sélectionnée
P_SALES_ORG = CellGetS(C_zSelect,vClient, 'Sales Organisation');

# Récupération de la distrib channel sélectionnée
P_DISTRIB_CHANNEL = CellGetS(C_zSelect,vClient, 'Distrib Channel');

# Périmètre client
P_CUSTOMER = 'TOTAL_CUSTOMER';

# Périmètre article
P_MATERIAL_PLAN = 'TOTAL_PLANNING_MATERIAL';

# Périmètre Sales Group
P_SALES_GROUP = CellGetS(C_zSelect,vClient, 'Sales Group');


#=======================================#
#	Désactivation de la consignation	#
#=======================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#===========================#
#	Calcul des variables	#
#===========================#

#--------------------Requêtes MDX--------------------#
# Périodes prévisionnelles
vMDX_PERIOD = '{{[' | D_PERIOD | '].[Campaign]},{FILTER({TM1SUBSETALL([' | D_PERIOD | '])},[' | D_PERIOD | '].[Index_Num] >= ' | v_FirstSimInd | ')}}';
vMDX_PERIOD_2 = '{{[' | D_PERIOD | '].[Campaign]},{[' | D_PERIOD | '].[N/A PERIOD]},{FILTER({TM1SUBSETALL([' | D_PERIOD | '])},[' | D_PERIOD | '].[Index_Num] >= ' | v_FirstSimInd | ')}}';
vMDX_PERIOD_3 = '{{[' | D_PERIOD | '].[Campaign]},{TM1SubsetToSet([' | D_PERIOD | '] , "' | P_Phase_Cap | ' Periods")}}';
# Sales org
IF(P_SALES_ORG @= ''); P_SALES_ORG = 'TOTAL SALES ORG'; ENDIF;
vMDX_SALES_ORG = '{{[' | D_SALES_ORG | '].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SALES_ORG | '].[' | P_SALES_ORG | '])},0)}}';
# Distrib channel
IF(P_DISTRIB_CHANNEL @= ''); P_DISTRIB_CHANNEL = 'Total Distribution Channel'; ENDIF;
vMDX_DISTRIB_CHANNEL = '{{[' | D_DISTRIB_CHANNEL | '].[Total Distribution Channel]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_DISTRIB_CHANNEL | '].[' | P_DISTRIB_CHANNEL | '])},0)}}';
# Material plan
vMDX_MATERIAL_PLAN = '{{[' | D_MATERIAL_PLAN | '].[TOTAL_PLANNING_MATERIAL]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_MATERIAL_PLAN | '].[' | P_MATERIAL_PLAN | '])},0)}}';
# Customer
vMDX_CUSTOMER = '{{[' | D_CUSTOMER | '].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_CUSTOMER | '].[' | P_CUSTOMER | '])},0)}}';
If(P_SALES_GROUP @<> '');
	vMDX_CUSTOMER_SALES_GROUP = '{{[' | D_CUSTOMER | '].[TOTAL_CUSTOMER]},{FILTER(TM1FILTERBYLEVEL({DESCENDANTS([' | D_CUSTOMER | '].[' | P_CUSTOMER | '])},0), [SLS_CUSTOMER].[Sales Group Name] = "' | P_SALES_GROUP | '"")}}';
Else;
	vMDX_CUSTOMER_SALES_GROUP = '{{[' | D_CUSTOMER | '].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_CUSTOMER | '].[' | P_CUSTOMER | '])},0)}}';
EndIf;
# Ship point
vMDX_SHIP_POINT = '{{[' | D_SHIP_POINT | '].[Total Shipping Point]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SHIP_POINT | '].[Total Shipping Point])},0)}}';
# Ship plant
vMDX_SHIP_PLANT = '{{[' | D_SHIP_PLANT | '].[Total Ship Plant]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SHIP_PLANT | '].[Total Ship Plant])},0)}}';
# Prod plant
vMDX_PROD_PLANT = '{{[' | D_PROD_PLANT | '].[Total Prod Plant]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_PROD_PLANT | '].[Total Prod Plant])},0)}}';
# Vendor
vMDX_VENDOR = '{{[' | D_VENDOR | '].[Total Vendor]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_VENDOR | '].[Total Vendor])},0)}}';

# Sales Group
# IF(P_SALES_GROUP @= ''); P_SALES_GROUP = 'TOTAL_SALES_GROUP'; ENDIF;
# vMDX_SALES_GROUP = '{{[' | D_SALES_GROUP | '].[TOTAL_SALES_GROUP]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SALES_GROUP | '].[' | P_SALES_GROUP | '])},0)}}';
vMDX_SALES_GROUP = '{{[' | D_SALES_GROUP | '].[TOTAL_SALES_GROUP]},{TM1FILTERBYLEVEL({DESCENDANTS([' | D_SALES_gROUP | '].[TOTAL_SALES_GROUP])},0)}}';

#===============================================#
#	Initialisation de la vue à réinitialiser	#
#===============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_VERSION, subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
SubsetDestroy(D_SALES_ORG, subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase);
SubsetDestroy(D_ASSIGN_IND, subset_erase);
SubsetDestroy(D_CUSTOMER, subset_erase);
SubsetDestroy(D_Q_HQ, subset_erase);

 
#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_erase);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase, P_Phase, 1);
# SLS_VERSION
subsetcreate(D_VERSION,subset_erase);
SubsetElementInsert(D_VERSION, subset_erase, 'Actual version', 1);

# VRT : Mise en place contrat indexé
# SLS_Q_HQ
MDX_Q_HQ = 'TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_Q_HQ])},0)';
SubsetCreatebyMDX( subset_erase, MDX_Q_HQ);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_Q_HQ,subset_erase);
# Fin VRT 

# 1_G_PERIOD
subsetcreateByMdx(subset_erase,vMDX_PERIOD_2);
SubsetElementDelete(D_PERIOD, subset_erase, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_erase,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_erase, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_erase,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_erase, 1);
# SLS_ASSIGN_IND
subsetcreate(D_ASSIGN_IND,subset_erase);
SubsetElementInsert(D_ASSIGN_IND, subset_erase, vElem_Volume_Sales, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase, vElem_Volume_Assigned, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase, vElem_Ship_Point, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase, vElem_Ship_Plant, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase, vElem_Prod_Plant, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase, vElem_Vendor, 1);
#SLS_CUSTOMER
subsetcreateByMdx(subset_erase,vMDX_CUSTOMER_SALES_GROUP);
SubsetElementDelete(D_CUSTOMER, subset_erase, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CURRENT_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_VERSION,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_ORG,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_ASSIGN_IND,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CUSTOMER,subset_erase);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);
 
#--------------------Suppression des valeurs de la vue--------------------#
ViewZeroOut( C_Cube_Cible, view_erase );

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_VERSION, subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
SubsetDestroy(D_SALES_ORG, subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase);
SubsetDestroy(D_ASSIGN_IND, subset_erase);
SubsetDestroy(D_CUSTOMER, subset_erase);
SubsetDestroy(D_Q_HQ, subset_erase);


#===============================================#
#	Initialisation de la vue à réinitialiser 2 (Final version - SAles Volume)	#
#===============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_VERSION, subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
SubsetDestroy(D_SALES_ORG, subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase);
SubsetDestroy(D_ASSIGN_IND, subset_erase);
SubsetDestroy(D_CUSTOMER, subset_erase);
SubsetDestroy(D_Q_HQ, subset_erase);
 
#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_erase);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase, P_Phase, 1);
# SLS_VERSION
subsetcreate(D_VERSION,subset_erase);
SubsetElementInsert(D_VERSION, subset_erase, 'Final version', 1);

# VRT : Mise en place contrat indexé
# SLS_Q_HQ
MDX_Q_HQ = 'TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_Q_HQ])},0)';
SubsetCreatebyMDX( subset_erase, MDX_Q_HQ);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_Q_HQ,subset_erase);
# Fin VRT 

# 1_G_PERIOD
subsetcreateByMdx(subset_erase,vMDX_PERIOD_2);
SubsetElementDelete(D_PERIOD, subset_erase, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_erase,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_erase, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_erase,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_erase, 1);
# SLS_ASSIGN_IND
subsetcreate(D_ASSIGN_IND,subset_erase);
SubsetElementInsert(D_ASSIGN_IND, subset_erase, vElem_Volume_Sales, 1);
#SLS_CUSTOMER
subsetcreateByMdx(subset_erase,vMDX_CUSTOMER_SALES_GROUP);
SubsetElementDelete(D_CUSTOMER, subset_erase, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CURRENT_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_VERSION,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_ORG,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_ASSIGN_IND,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CUSTOMER,subset_erase);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);
 
#--------------------Suppression des valeurs de la vue--------------------#
ViewZeroOut( C_Cube_Cible, view_erase );

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
SubsetDestroy(D_CURRENT_PHASE, subset_erase);
SubsetDestroy(D_VERSION, subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
SubsetDestroy(D_SALES_ORG, subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase);
SubsetDestroy(D_ASSIGN_IND, subset_erase);
SubsetDestroy(D_CUSTOMER, subset_erase);
SubsetDestroy(D_Q_HQ, subset_erase);


#===================================================#
#	Initialisation de la vue à copier/vue source	#
#===================================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy( D_VOLUME_UNIT, subset_copy );
SubsetDestroy(D_CURRENCY, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_SALES_IND, subset_copy);
 
#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Source,view_copy);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, P_Phase, 1);
# 1_G_PERIOD
subsetcreate(D_PERIOD,subset_copy);
SubsetElementInsert(D_PERIOD, subset_copy, vElem_Tot_Period, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_copy,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_copy, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_copy,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_copy, 1);
#1_G_VOLUME_UNIT
SubsetCreate( D_VOLUME_UNIT, subset_copy );
SubsetElementInsert( D_VOLUME_UNIT, subset_copy, 'TO', 1 );
SubsetElementInsert( D_VOLUME_UNIT, subset_copy, 'TSP', 1 );
SubsetElementInsert( D_VOLUME_UNIT, subset_copy, 'HLAP', 2 );
#1_G_CURRENCY
SubsetCreate( D_CURRENCY, subset_copy );
SubsetElementInsert( D_CURRENCY, subset_copy, 'EUR', 1 );
SubsetElementInsert( D_CURRENCY, subset_copy, 'USD', 2 );
# SLS_CUSTOMER
subsetcreateByMdx(subset_copy,vMDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_copy, 1);
# SLS_MATERIAL_PLAN
subsetcreateByMdx(subset_copy,vMDX_MATERIAL_PLAN);
SubsetElementDelete(D_MATERIAL_PLAN, subset_copy, 1);
# SLS_SALES_GROUP
subsetcreateByMdx(subset_copy,vMDX_SALES_GROUP);
SubsetElementDelete(D_SALES_GROUP, subset_copy, 1);
# SLS_SALES_PLAN_IND
SubsetCreate(D_SALES_IND, subset_copy);
SubsetElementInsert(D_SALES_IND, subset_copy, 'SLS_VOL_NON_INDEXE', 1);
SubsetElementInsert(D_SALES_IND, subset_copy, 'SLS_VOL_INDEXE', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_MATERIAL_PLAN,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_GROUP,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_IND,subset_copy);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 0);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Source;
DatasourceCubeview=view_copy;


#===========================================================================#
#	Initialisation de la vue à réinitialiser dans le sous-process de Data	#
#===========================================================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase_pro_data);
SubsetDestroy(D_CURRENT_PHASE, subset_erase_pro_data);
SubsetDestroy(D_VERSION, subset_erase_pro_data);
SubsetDestroy(D_PERIOD, subset_erase_pro_data);
SubsetDestroy(D_SALES_ORG, subset_erase_pro_data);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase_pro_data);
SubsetDestroy(D_MATERIAL_PLAN, subset_erase_pro_data);
SubsetDestroy(D_CUSTOMER, subset_erase_pro_data);
SubsetDestroy(D_ASSIGN_IND, subset_erase_pro_data);
 
#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase_pro_data);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_erase_pro_data);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase_pro_data, P_PHASE, 1);
# SLS_VERSION
subsetcreate(D_VERSION,subset_erase_pro_data);
SubsetElementInsert(D_VERSION, subset_erase_pro_data, 'Final Version', 1);

# VRT : Mise en place contrat indexé
# SLS_Q_HQ
MDX_Q_HQ = 'TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_Q_HQ])},0)';
SubsetCreatebyMDX( subset_erase_pro_data, MDX_Q_HQ);
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_Q_HQ,subset_erase_pro_data);
# Fin VRT 

# 1_G_PERIOD
subsetcreateByMdx(subset_erase_pro_data,vMDX_PERIOD_2);
SubsetElementDelete(D_PERIOD, subset_erase_pro_data, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_erase_pro_data,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_erase_pro_data, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_erase_pro_data,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_erase_pro_data, 1);
# SLS_MATERIAL_PLAN
SubsetCreate(D_MATERIAL_PLAN, subset_erase_pro_data);
# SLS_CUSTOMER
SubsetCreate(D_CUSTOMER, subset_erase_pro_data);
# SLS_ASSIGN_IND
subsetcreate(D_ASSIGN_IND,subset_erase_pro_data);
#modifié par EMO le 11/12/2019 : le calcul du sales volume est fait dans le prologue donc ne pas être dans la vue réinitialisée.
#SubsetElementInsert(D_ASSIGN_IND, subset_erase_pro_data, vElem_Volume_Sales, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase_pro_data, vElem_Volume_Assigned, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase_pro_data, vElem_Ship_Point, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase_pro_data, vElem_Ship_Plant, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase_pro_data, vElem_Prod_Plant, 1);
SubsetElementInsert(D_ASSIGN_IND, subset_erase_pro_data, vElem_Vendor, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_CURRENT_PHASE,subset_erase_pro_data);
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_VERSION,subset_erase_pro_data);
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_SALES_ORG,subset_erase_pro_data);
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_DISTRIB_CHANNEL,subset_erase_pro_data);
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_MATERIAL_PLAN,subset_erase_pro_data);
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_CUSTOMER,subset_erase_pro_data);
ViewSubsetAssign(C_Cube_Cible,view_erase_pro_data, D_ASSIGN_IND,subset_erase_pro_data);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase_pro_data,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase_pro_data, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase_pro_data, 1);


#===================================================================#
#	Initialisation de la vue source dans le sous-process de Data	#
#===================================================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Init,view_copy_pro_data_1);
SubsetDestroy(D_CURRENT_PHASE, subset_copy_pro_data_1);
SubsetDestroy(D_PERIOD, subset_copy_pro_data_1);
SubsetDestroy(D_SALES_ORG, subset_copy_pro_data_1);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy_pro_data_1);
SubsetDestroy(D_VOLUME_UNIT, subset_copy_pro_data_1);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy_pro_data_1);
SubsetDestroy(D_CUSTOMER, subset_copy_pro_data_1);
SubsetDestroy(D_SHIP_POINT, subset_copy_pro_data_1);
SubsetDestroy(D_SHIP_PLANT, subset_copy_pro_data_1);
SubsetDestroy(D_PROD_PLANT, subset_copy_pro_data_1);
SubsetDestroy(D_VENDOR, subset_copy_pro_data_1);
SubsetDestroy(D_INIT_IND, subset_copy_pro_data_1);
 
#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Init,view_copy_pro_data_1);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy_pro_data_1);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy_pro_data_1, P_PHASE, 1);
# 1_G_PERIOD
subsetcreate(D_PERIOD,subset_copy_pro_data_1);
SubsetElementInsert(D_PERIOD, subset_copy_pro_data_1, vElem_Tot_Period, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_copy_pro_data_1,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_copy_pro_data_1, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_copy_pro_data_1,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_copy_pro_data_1, 1);
# 1_G_VOLUME_UNIT
SubsetCreate(D_VOLUME_UNIT, subset_copy_pro_data_1);
# SLS_MATERIAL_PLAN
SubsetCreate(D_MATERIAL_PLAN, subset_copy_pro_data_1);
# SLS_CUSTOMER
SubsetCreate(D_CUSTOMER, subset_copy_pro_data_1);
# SLS_SHIP_POINT
subsetcreateByMdx(subset_copy_pro_data_1,vMDX_SHIP_POINT);
SubsetElementDelete(D_SHIP_POINT, subset_copy_pro_data_1, 1);
# SLS_SHIP_PLANT
subsetcreateByMdx(subset_copy_pro_data_1,vMDX_SHIP_PLANT);
SubsetElementDelete(D_SHIP_PLANT, subset_copy_pro_data_1, 1);
# SLS_PROD_PLANT
subsetcreateByMdx(subset_copy_pro_data_1,vMDX_PROD_PLANT);
SubsetElementDelete(D_PROD_PLANT, subset_copy_pro_data_1, 1);
# SLS_VENDOR
subsetcreateByMdx(subset_copy_pro_data_1,vMDX_VENDOR);
SubsetElementDelete(D_VENDOR, subset_copy_pro_data_1, 1);
# SLS_INIT_IND
subsetcreate(D_INIT_IND,subset_copy_pro_data_1);
SubsetElementInsert(D_INIT_IND, subset_copy_pro_data_1, vElem_Volume_Sales, 1);
#SubsetElementInsert(D_INIT_IND, subset_copy_pro_data_1, 'I_SLS_VOL', 1);

#--------------------Affectation des sous-ensembles aux vues--------------------#
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_CURRENT_PHASE,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_PERIOD,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_SALES_ORG,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_DISTRIB_CHANNEL,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_VOLUME_UNIT,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_MATERIAL_PLAN,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_CUSTOMER,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_SHIP_POINT,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_SHIP_PLANT,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_PROD_PLANT,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_VENDOR,subset_copy_pro_data_1);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_1, D_INIT_IND,subset_copy_pro_data_1);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Init,view_copy_pro_data_1,1);
ViewSetSkipCalcs(C_Cube_Init,view_copy_pro_data_1, 0);
ViewSetSkipZeroes(C_Cube_Init,view_copy_pro_data_1, 1);


#===================================================================================#
#	Initialisation de la vue source dans le sous-process du sous-process de Data	#
#===================================================================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Init,view_copy_pro_data_2);
SubsetDestroy(D_CURRENT_PHASE, subset_copy_pro_data_2);
SubsetDestroy(D_PERIOD, subset_copy_pro_data_2);
SubsetDestroy(D_SALES_ORG, subset_copy_pro_data_2);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy_pro_data_2);
SubsetDestroy(D_VOLUME_UNIT, subset_copy_pro_data_2);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy_pro_data_2);
SubsetDestroy(D_CUSTOMER, subset_copy_pro_data_2);
SubsetDestroy(D_SHIP_POINT, subset_copy_pro_data_2);
SubsetDestroy(D_SHIP_PLANT, subset_copy_pro_data_2);
SubsetDestroy(D_PROD_PLANT, subset_copy_pro_data_2);
SubsetDestroy(D_VENDOR, subset_copy_pro_data_2);
SubsetDestroy(D_INIT_IND, subset_copy_pro_data_2);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Init,view_copy_pro_data_2);
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy_pro_data_2);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy_pro_data_2, P_PHASE, 1);
# 1_G_PERIOD
subsetcreateByMdx(subset_copy_pro_data_2,vMDX_PERIOD_3);
SubsetElementDelete(D_PERIOD, subset_copy_pro_data_2, 1);
# 1_G_SALES_ORG
subsetcreateByMdx(subset_copy_pro_data_2,vMDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_copy_pro_data_2, 1);
# 1_G_DISTRIB_CHANNEL
subsetcreateByMdx(subset_copy_pro_data_2,vMDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_copy_pro_data_2, 1);
# SLS_MATERIAL_PLAN
SubsetCreate( D_MATERIAL_PLAN, subset_copy_pro_data_2 );
# SLS_CUSTOMER
SubsetCreate(D_CUSTOMER, subset_copy_pro_data_2);
# 1_G_VOLUME_UNIT
SubsetCreate(D_VOLUME_UNIT, subset_copy_pro_data_2);
# SLS_SHIP_POINT
SubsetCreate(D_SHIP_POINT, subset_copy_pro_data_2);
# SLS_SHIP_PLANT
SubsetCreate(D_SHIP_PLANT, subset_copy_pro_data_2);
# SLS_PROD_PLANT
SubsetCreate(D_PROD_PLANT, subset_copy_pro_data_2);
# SLS_VENDOR
SubsetCreate(D_VENDOR, subset_copy_pro_data_2);
# SLS_INIT_IND
subsetcreate(D_INIT_IND,subset_copy_pro_data_2);
SubsetElementInsert(D_INIT_IND, subset_copy_pro_data_2, vElem_Volume_Sales, 1);
#SubsetElementInsert(D_INIT_IND, subset_copy_pro_data_2, 'I_SLS_VOL', 1);

#--------------------Affectation des sous-ensembles aux vues--------------------#
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_CURRENT_PHASE,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_PERIOD,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_SALES_ORG,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_DISTRIB_CHANNEL,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_VOLUME_UNIT,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_MATERIAL_PLAN,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_CUSTOMER,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_SHIP_POINT,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_SHIP_PLANT,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_PROD_PLANT,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_VENDOR,subset_copy_pro_data_2);
ViewSubsetAssign(C_Cube_Init,view_copy_pro_data_2, D_INIT_IND,subset_copy_pro_data_2);
 
#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Init,view_copy_pro_data_2,1);
ViewSetSkipCalcs(C_Cube_Init,view_copy_pro_data_2, 0);
ViewSetSkipZeroes(C_Cube_Init,view_copy_pro_data_2, 1);


#===========================#
#	Création subset temp	#
#===========================#

SubsetDestroy( D_PERIOD, subset_temp );
SubsetCreate( D_PERIOD, subset_temp );
MDX_PERIOD_TEMP = '{TM1SubsetToSet([1_G_PERIOD] , "'|P_Phase_Cap |' Periods")}';
SubsetMDXSet( D_PERIOD, subset_temp, MDX_PERIOD_TEMP );
SubSize_Temp = SubsetGetSize( D_PERIOD, subset_temp );

#Déplacer par EMO le 11/12/2019 : le Sales Volume doit etre calculé avant car sinon le croisement peut être considéré comme nouvelle comb commerciale.
# JMB 16/10/2019 : Copie des volumes commerciaux (sales volume)
ExecuteProcess( 'SLS_COP_CUB_SLS_ASSIGN_CUB_SLS_SALES_PLAN_Volumes');
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

#On restraint au sales group en cours (la vue est basée sur CAMP YEAR et certains sales group n'interviennent surement pas sur Current Phase Periods)
# If(AttrS(D_CUSTOMER, vCustomer, 'Sales Group') @<> vSALES_GROUP);
# 	ItemSkip;
# EndIf;

# VRT : Mise en place contrat indexé
# Controle de l'indicateur si préfixé de I_ alors éléments INDEXE dans la dimension SLS_Q_HQ
# Sinon élément standard dans cette même dimension
IF ( vSALES_PLAN_IND @= 'SLS_VOL_INDEXE') ;
  v_Q_HQ = 'INDEXE' ;
ELSE ;
  v_Q_HQ = 'QUOTA_STAND' ;
ENDIF ;
# Fin VRT 

#On parcourt seulement l'unité par défaut
Division = ELPAR( D_MATERIAL_PLAN, vMATERIAL_PLAN, 1);
Default_Unit = ATTRS('1_G_MATERIAL', Division, 'Volume_Unit');
If(vVOLUME_UNIT @<> Default_Unit);
	itemskip;
EndIf;

#Currency = USD si Export Sucre
If(vDISTRIB_CHANNEL @= '40' & Division @= 'D_10');
	If(vCURRENCY @<> 'USD');
    	itemskip;
    EndIf;
Else; 
	If(vCURRENCY @<> 'EUR');
    	itemskip;
    EndIf;
EndIf;

#On construit la vue source du sous sous process sur l'unité par défaut
SubsetDeleteAllElements( D_VOLUME_UNIT, subset_copy_pro_data_1 );
SubsetElementInsert(D_VOLUME_UNIT, subset_copy_pro_data_1, Default_Unit, 1);
SubsetDeleteAllElements( D_VOLUME_UNIT, subset_copy_pro_data_2 );
SubsetElementInsert(D_VOLUME_UNIT, subset_copy_pro_data_2, Default_Unit, 1);

# Copie des combinaisons logistiques sur Actual_Version depuis SLS_INIT
ExecuteProcess( vPro_Copie_Combinaisons_Logistiques_Tot, 'P_VERSION', 'Actual Version', 'P_CUSTOMER', vCUSTOMER, 'P_MATERIAL_PLAN', vMATERIAL_PLAN,'P_CURRENCY', vCURRENCY, 'subset_erase',subset_erase_pro_data,'view_erase',view_erase_pro_data,'subset_copy',subset_copy_pro_data_1,'view_copy',view_copy_pro_data_1,'subset_copy_pro_data',subset_copy_pro_data_2,'view_copy_pro_data',view_copy_pro_data_2);

# Copie des combinaisons logistiques sur Final Version depuis SLS_INIT seulement si nouvelle combinaison logistique
vAssign_Prev = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Final Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, '1', 'zAssign_Prev');
IF(vAssign_Prev = 0);
 	ExecuteProcess( vPro_Copie_Combinaisons_Logistiques_Tot, 'P_VERSION', 'Final Version', 'P_CUSTOMER', vCUSTOMER, 'P_MATERIAL_PLAN', vMATERIAL_PLAN,'P_CURRENCY', vCURRENCY,'subset_erase',subset_erase_pro_data,'view_erase',view_erase_pro_data,'subset_copy',subset_copy_pro_data_1,'view_copy',view_copy_pro_data_1,'subset_copy_pro_data',subset_copy_pro_data_2,'view_copy_pro_data',view_copy_pro_data_2);
ENDIF;


#Cas des nouvelles combinaisons commerciales
# Vol_Comb_Com_Assign_Act_Sales = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Actual Version',vElem_Tot_Period, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'Total Line','Sales Volume');
# Vol_Comb_Com_Assign_Act_Assigned = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Actual Version',vElem_Tot_Period, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'Total Line','Assigned Volume');
# Vol_Comb_Com_Assign_Act_Assigned_L1 = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Actual Version',vElem_Tot_Period, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1','Assigned Volume');
# Vol_Comb_Com_Assign_Act = Vol_Comb_Com_Assign_Act_Sales + Vol_Comb_Com_Assign_Act_Assigned + Vol_Comb_Com_Assign_Act_Assigned_L1;
#modif EMO le 11/12/2019 : maintenant sales voume calculé dans le prologue donc on ne tombe jamais dans cecas. Aller chercher directement dans Init.
Vol_Init = CellGetN(C_Cube_Init, vCURRENT_PHASE, vElem_Tot_Period, vSALES_ORG, vDISTRIB_CHANNEL, Default_Unit, vMATERIAL_PLAN, vCUSTOMER, 'Total Shipping Point', 'Total Ship Plant', 'Total Prod Plant', 'Total Vendor', vElem_Volume_Sales);
If(Vol_Init = 0);
	CellPutS('N/A_SHIP_POINT - N/A Shipping Point', 'SLS_ASSIGN', vCURRENT_PHASE, 'Actual Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Shipping Point');
	CellPutS('NA Ship Plant', 'SLS_ASSIGN', vCURRENT_PHASE, 'Actual Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Shipping Plant');
	CellPutS('NA Prod Plant', 'SLS_ASSIGN', vCURRENT_PHASE, 'Actual Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Production Plant');
	CellPutS('NA Vendor', 'SLS_ASSIGN', vCURRENT_PHASE, 'Actual Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Vendor');
    # Ajout du Priority Vendor, si il existe
    sPriority = AttrS ( 'SLS_CUSTOMER' , vCUSTOMER , 'Vendor Priority') ;
    IF ( sPriority @<> '' ) ;
     nScan = SCAN ( '|' , sPriority ) ;
     sPriority = SubSt ( sPriority , 1 , nScan -1 ) ;
     IF ( DIMIX ( 'SLS_VENDOR' , sPriority ) > 0 ) ;
      sPriority = AttrS ( 'SLS_VENDOR' , sPriority , 'Code - Caption' ) ;
      CellPutS ( sPriority , 'SLS_ASSIGN', vCURRENT_PHASE, 'Actual Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Vendor Priority');
     ENDIF ;
    ENDIF ;
	cpt_act = 1;
    While(cpt_act <= SubSize_Temp);
    	vPERIOD = SubsetGetElementName( D_PERIOD, subset_temp, cpt_act );
    	vol = CellGetN(C_Cube_Source,vCURRENT_PHASE, vPERIOD, vSALES_ORG, vDISTRIB_CHANNEL, vCURRENCY, vVOLUME_UNIT, vCUSTOMER, vMATERIAL_PLAN, 'Total Sales Group',vSALES_PLAN_IND);
        # ELH - EVO Commerciaux - Arrondi du volume à 3 décimales
        nVolumeAssign = ROUNDP ( vol , 3 ) ;
        CellPutN(nVolumeAssign, C_Cube_Cible, vCURRENT_PHASE, 'Actual Version', v_Q_HQ ,vPERIOD, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1','Assigned Volume');
        cpt_act = cpt_act + 1;
    End;
EndIf;

#Modif Ann le 18/10/2019
#IF(vAssign_Prev = 0);
# 	Vol_Comb_Com_Assign_Fin_Sales = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Final Version',vElem_Tot_Period, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'Total Line','Sales Volume');
#     Vol_Comb_Com_Assign_Fin_Assigned = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Final Version',vElem_Tot_Period, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'Total Line','Assigned Volume');
#     Vol_Comb_Com_Assign_Fin_Assigned_L1 = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Final Version',vElem_Tot_Period, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1','Assigned Volume');
#     Vol_Comb_Com_Assign_Fin = Vol_Comb_Com_Assign_Fin_Sales + Vol_Comb_Com_Assign_Fin_Assigned + Vol_Comb_Com_Assign_Fin_Assigned_L1;    
# 	If(Vol_Comb_Com_Assign_Fin = 0);
	If(Vol_Init = 0);
		CellPutS('N/A_SHIP_POINT - N/A Shipping Point', 'SLS_ASSIGN', vCURRENT_PHASE, 'Final Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Shipping Point');
		CellPutS('NA Ship Plant', 'SLS_ASSIGN', vCURRENT_PHASE, 'Final Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Shipping Plant');
		CellPutS('NA Prod Plant', 'SLS_ASSIGN', vCURRENT_PHASE, 'Final Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Production Plant');
		CellPutS('NA Vendor', 'SLS_ASSIGN', vCURRENT_PHASE, 'Final Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Vendor');
        # Ajout du Priority Vendor, si il existe
        sPriority = AttrS ( 'SLS_CUSTOMER' , vCUSTOMER , 'Vendor Priority') ;
        IF ( sPriority @<> '' ) ;
         nScan = SCAN ( '|' , sPriority ) ;
         sPriority = SubSt ( sPriority , 1 , nScan -1 ) ;
         IF ( DIMIX ( 'SLS_VENDOR' , sPriority ) > 0 ) ;
          sPriority = AttrS ( 'SLS_VENDOR' , sPriority , 'Code - Caption' ) ;
          CellPutS ( sPriority , 'SLS_ASSIGN', vCURRENT_PHASE, 'Final Version', v_Q_HQ , 'N/A PERIOD', vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1', 'Vendor Priority');
         ENDIF ;
        ENDIF ;
		cpt_fin = 1;
	    While(cpt_fin <= SubSize_Temp);
	    	vPERIOD = SubsetGetElementName( D_PERIOD, subset_temp, cpt_fin );
	    	vol = CellGetN(C_Cube_Source,vCURRENT_PHASE, vPERIOD, vSALES_ORG, vDISTRIB_CHANNEL, vCURRENCY, vVOLUME_UNIT, vCUSTOMER, vMATERIAL_PLAN, 'Total Sales Group',vSALES_PLAN_IND);
            # ELH - EVO Commerciaux : Arrondi du volume à 3 décimales
            nVolumeAssign = ROUNDP ( vol , 3 ) ;
            vVol_Comb_Comm_Period = CellGetN(C_Cube_Cible, vCURRENT_PHASE, 'Final Version', v_Q_HQ , vPERIOD, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'Total Line', 'Assign_vol');
            If(vVol_Comb_Comm_Period = 0);
	        	CellPutN(nVolumeAssign, C_Cube_Cible, vCURRENT_PHASE, 'Final Version', v_Q_HQ , vPERIOD, vSALES_ORG, vDISTRIB_CHANNEL, vMATERIAL_PLAN, vCUSTOMER, 'L1','Assigned Volume');
            EndIf;
            cpt_fin = cpt_fin + 1;
	    End;	
	EndIf;
#EndIf;

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

# Destruction des combinaisons commerciales qui n'existent pas (plus)
ExecuteProcess( 'SLS_CAL_CUB_SLS_ASSIGN_CLEAN','p_G_Sales_Org',P_SALES_ORG,'p_G_Distrib_Channel' ,P_DISTRIB_CHANNEL,'P_SALES_GROUP', P_SALES_GROUP );

# ANN 17/10/2019 : Calcul de la combi log max poour une combi comm
ExecuteProcess( 'zCAL_CUB_ATTR_COMBI_COMM_Combi_Log_Max');

# ANN 17/10/2019 :  Copie des volumes affectés (assigned volume) pour les combinaisons commerciales qui sont existantes mais qui n'ont pas de volume sur le mois concerné
ExecuteProcess( 'SLS_COP_CUB_SLS_ASSIGN_CUB_SLS_SALES_PLAN_Volumes_manquants');

# Copie des prix
ExecuteProcess( 'SLS_COP_CUB_SLS_ASSIGN_CUB_SLS_SALES_PLAN_Prix','P_SALES_ORG',P_SALES_ORG,'P_DISTRIB_CHANNEL' ,P_DISTRIB_CHANNEL);

# Copie des Combi Comm sur les contrats indexés si elles n'existent pas
ExecuteProcess ( 'SLS_COP_CUB_SLS_ASSIGN_Combi_Comm_Indexé' ) ;

# ELH - EVO Commerciaux - Mise à jour du Priority Vendor
ExecuteProcess ( 'SLS_CREATE_VENDOR_PRIORITY_PICKLIST_SLS_ASSIGN') ;
ExecuteProcess( 'SLS_CAL_CUB_SLS_ASSIGN_PRIORITY_VENDOR' ) ;



#=======================================#
#	Destruction des objets temporaires	#
#=======================================#

#--------------------Vue source--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CURRENCY, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_SALES_IND, subset_copy);

#--------------------Vue cible du sous-process de data--------------------#
ViewDestroy(C_Cube_Cible,view_erase_pro_data);
SubsetDestroy(D_CURRENT_PHASE, subset_erase_pro_data);
SubsetDestroy(D_VERSION, subset_erase_pro_data);
SubsetDestroy(D_PERIOD, subset_erase_pro_data);
SubsetDestroy(D_SALES_ORG, subset_erase_pro_data);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase_pro_data);
SubsetDestroy(D_MATERIAL_PLAN, subset_erase_pro_data);
SubsetDestroy(D_CUSTOMER, subset_erase_pro_data);
SubsetDestroy(D_ASSIGN_IND, subset_erase_pro_data);
SubsetDestroy(D_Q_HQ, subset_erase_pro_data);

#--------------------Vue source du sous-process de data--------------------#
ViewDestroy(C_Cube_Init,view_copy_pro_data_1);
SubsetDestroy(D_CURRENT_PHASE, subset_copy_pro_data_1);
SubsetDestroy(D_PERIOD, subset_copy_pro_data_1);
SubsetDestroy(D_SALES_ORG, subset_copy_pro_data_1);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy_pro_data_1);
SubsetDestroy(D_VOLUME_UNIT, subset_copy_pro_data_1);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy_pro_data_1);
SubsetDestroy(D_CUSTOMER, subset_copy_pro_data_1);
SubsetDestroy(D_SHIP_POINT, subset_copy_pro_data_1);
SubsetDestroy(D_SHIP_PLANT, subset_copy_pro_data_1);
SubsetDestroy(D_PROD_PLANT, subset_copy_pro_data_1);
SubsetDestroy(D_VENDOR, subset_copy_pro_data_1);
SubsetDestroy(D_INIT_IND, subset_copy_pro_data_1);

#--------------------Vue source du sous-process du sous-process de data--------------------#
ViewDestroy(C_Cube_Init,view_copy_pro_data_2);
SubsetDestroy(D_CURRENT_PHASE, subset_copy_pro_data_2);
SubsetDestroy(D_PERIOD, subset_copy_pro_data_2);
SubsetDestroy(D_SALES_ORG, subset_copy_pro_data_2);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy_pro_data_2);
SubsetDestroy(D_VOLUME_UNIT, subset_copy_pro_data_2);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy_pro_data_2);
SubsetDestroy(D_CUSTOMER, subset_copy_pro_data_2);
SubsetDestroy(D_SHIP_POINT, subset_copy_pro_data_2);
SubsetDestroy(D_SHIP_PLANT, subset_copy_pro_data_2);
SubsetDestroy(D_PROD_PLANT, subset_copy_pro_data_2);
SubsetDestroy(D_VENDOR, subset_copy_pro_data_2);
SubsetDestroy(D_INIT_IND, subset_copy_pro_data_2);

SubsetDestroy( D_PERIOD, subset_temp );
#endregion