#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****




##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   14/01/2019                                                        #
#                                                                            #
# Fait par :    Elisabeth Mounier		                                     #
#                                                                            #
# Action : Processus pour copier le switch article cas 3 (fait dans Assign)  #
#			dans Sales Plan	 												 #
#           																 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#


#--------------------Cubes--------------------#
C_Cube_Sales = 'SLS_SALES_PLAN';


#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL_PLAN =' SLS_MATERIAL_PLAN' ; 
D_SALES_GROUP= 'SLS_SALES_GROUP';
D_SALES_PLAN_IND = 'SLS_SALES_PLAN_IND';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

e_message_data = '';

#--------------------Vues--------------------#
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Sales;
DatasourceCubeview=view_copy;

#As_Temporary = 1;
ViewDestroy(C_Cube_Sales,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_SALES_PLAN_IND, subset_copy);
#--------------------Création des objets Source--------------------#
ViewCreate(C_Cube_Sales ,view_copy);

# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, P_PHASE, 1);
ViewSubsetAssign(C_Cube_Sales,view_copy, D_CURRENT_PHASE,subset_copy);

# 1_G_PERIOD
subsetcreate(D_PERIOD,subset_copy);
SubsetElementInsert(D_PERIOD, subset_copy, P_Periode, 1);
ViewSubsetAssign(C_Cube_Sales,view_copy, D_PERIOD,subset_copy);

# 1_G_SALES_ORG
subsetcreate(D_SALES_ORG,subset_copy);
SubsetElementInsert(D_SALES_ORG, subset_copy, p_Sales_org, 1);
ViewSubsetAssign(C_Cube_Sales,view_copy, D_SALES_ORG,subset_copy);

# 1_G_DISTRIB_CHANNEL
subsetcreate(D_DISTRIB_CHANNEL,subset_copy );
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy, p_Distrib_Channel, 1);
ViewSubsetAssign(C_Cube_Sales,view_copy, D_DISTRIB_CHANNEL,subset_copy);

#SLS_MATERIAL_PLAN
subsetcreate(D_MATERIAL_PLAN,subset_copy );
SubsetElementInsert(D_MATERIAL_PLAN, subset_copy, P_Planning_Material, 1);
ViewSubsetAssign(C_Cube_Sales,view_copy, D_MATERIAL_PLAN,subset_copy);

#SLS_CUSTOMER
subsetcreate(D_CUSTOMER,subset_copy);
SubsetElementInsert(D_CUSTOMER, subset_copy, P_Customer, 1);
ViewSubsetAssign(C_Cube_Sales,view_copy, D_CUSTOMER,subset_copy);

#SLS_SALES_PLAN_IND
MDX_IND = '{TM1FILTERBYLEVEL(DESCENDANTS([SLS_SALES_PLAN_IND].[SLS_VOL]), 0)}';
SubsetCreatebyMDX( subset_copy, MDX_IND);
ViewSubsetAssign(C_Cube_Sales,view_copy, D_SALES_PLAN_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées pour la vue source--------------------#
Viewsetskiprulevalues(C_Cube_Sales,view_copy,1);
ViewSetSkipCalcs(C_Cube_Sales,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Sales,view_copy, 1);

#=========================================#
# Initialisation de la vue à supprimer # Pas de vue à Reinit
#=========================================#

#-------Creation d'un sous ensemble pour la dimension SLS_ASSIGN_IND 
V_S_TEMPORARY_NAME =  'Assign_IND_' | vUSER |'_' | vPRO_NAME;
sDimName = 'SLS_ASSIGN_IND';
SubsetDestroy(sDimName, V_S_TEMPORARY_NAME);
sMDX = '{TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [' | sDimName | '] )}, [' | sDimName | '].[Type_indicateur] = ''Prix_Unit'' )}, 0)}';
SubsetCreatebyMDX( V_S_TEMPORARY_NAME, sMDX);
nSubsetSize = SubsetGetSize( sDimName, V_S_TEMPORARY_NAME);

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#On parcourt seulement les volumes 

#Restriction sur Currency et Default Volume Unit
#Unité par défaut de la division
Division = ELPAR( '1_G_MATERIAL', v_Planning_Material, 1);
Default_Unit = ATTRS('1_G_MATERIAL', Division, 'Volume_Unit');
If(v_volume_unit @<> Default_Unit);
	itemskip;
EndIf;
#USD si Export Sugar, sinon EUR
If(DimensionElementPrincipalName(D_DISTRIB_CHANNEL, v_Distrib_Channel) @= '40' & DimensionElementPrincipalName( '1_G_MATERIAL', Division ) @= 'D_10');
	If(v_Currency @<> 'USD');
    	itemskip;
    EndIf;
Else; 
	If(v_Currency @<> 'EUR');
    	itemskip;
    EndIf;
EndIf;
 
#Action 1 : soustraire le switch de l'article source
CellputN ( value - P_valeur_switch , C_Cube_Sales, v_Phase, v_PERIOD, v_Sales_org, v_Distrib_Channel, v_Currency, Default_Unit, v_Customer, v_Planning_Material, v_Sales_Group, v_indicateur);
     
#Action 2 : ajouter sur l'article cible
CellIncrementN (P_valeur_switch , C_Cube_Sales, v_Phase, v_PERIOD, v_Sales_org, v_Distrib_Channel, v_Currency, Default_Unit, v_Customer, P_Target_Planning_Material, v_Sales_Group, v_indicateur);
  
#Gestion des prix
ind = 1;
While ( ind <= nSubsetSize  ) ;
	myPrix_Assign = SubsetGetElementName ( sDimName , V_S_TEMPORARY_NAME , ind ) ;
	prix_unit = CellGetN('SLS_ASSIGN',v_Phase , 'FV',v_PERIOD,v_sales_org , v_distrib_channel, P_target_Planning_Material   ,v_Customer ,'L1',myPrix_Assign);
    If(prix_unit <> 0);
    	#Attention cas particulier Export Sugar, il faut reconvertir EUR -> USD.
        If(DimensionElementPrincipalName(D_DISTRIB_CHANNEL, v_Distrib_Channel) @= '40' & DimensionElementPrincipalName( '1_G_MATERIAL', Division ) @= 'D_10');
			prix_unit = prix_unit * (1/CellGetN('SLS_CURRENCY_RATE', v_PHASE, v_SALES_ORG, 'USD','EUR'));
        EndIf;
    	CellPutN(prix_unit, C_Cube_Sales, v_Phase, v_PERIOD, v_Sales_org, v_Distrib_Channel, v_Currency, Default_Unit, v_Customer, P_target_Planning_Material, v_Sales_Group, myPrix_Assign);
    EndIf;
	ind = ind +1 ;
End ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ViewDestroy(C_Cube_Sales,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_SALES_PLAN_IND, subset_copy);

SubsetDestroy(sDimName, V_S_TEMPORARY_NAME);
#endregion