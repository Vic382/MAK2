#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


################################################################
#                      DESCRIPTION DU PROCESSUS                #
#                                                              #
# Date :   07/05/2019                                          #
#                                                              #
# Fait par :   Ann BESNARD                                     #
#                                                              #
# Action : Switch Article dans ASSIGN pour les prix			   #
################################################################



#====================================#
#         Déclaration des variables  #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_ASSIGN';
C_Cube_Cible = 'SLS_ASSIGN';
C_zPARAM = 'zPARAM';
C_zSELECT = 'zSELECT';

#--------------------Dimensions--------------------#
#On récupère toutes les dimensions du cube en paramètre et on repère laquelle est SLS_MATERIAL_PLAN

#Dimension que l'on connait
D_PHASE = '1_G_CURRENT_PHASE';
D_VERSION = 'SLS_VERSION';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_MATERIAL = '1_G_MATERIAL';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_CUSTOMER = 'SLS_CUSTOMER';
D_LINE = '1_G_LINE';
D_IND = 'SLS_ASSIGN_IND';
D_CHA_SAP_IND = 'SLS_CHA_SAP_IND';


#--------------------Elements--------------------#
e_Message_Prolog = '';
Phase_En_Cours = CellGetS(C_zPARAM, 'Phase', 'Value');
SLS_VOL = 'SLS_VOL';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClients = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_temp = 'z_temp_' | vUSER |'_' | vPRO_NAME;

DatasourceASCIIDecimalSeparator=',';
DatasourceASCIIThousandSeparator=' ';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_MATERIAL_PLAN, subset_copy);
subsetdestroy(D_IND, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
SubsetCreate(D_PHASE, subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, Phase_En_Cours, 1);

#D_PERIOD
SubsetCreate(D_PERIOD, subset_copy);
MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}';
SubsetMDXSet( D_PERIOD, subset_copy, MDX_PERIOD );

#Dim_Planning_Mat
SubsetCreate(D_MATERIAL_PLAN, subset_copy);
MDX_MATERIAL_PLAN = 'FILTER({TM1SUBSETALL([SLS_MATERIAL_PLAN])},[SLS_MATERIAL_PLAN].[Switch_Article_Cas_n2] =1)';
SubsetMDXSet( D_MATERIAL_PLAN, subset_copy, MDX_MATERIAL_PLAN );

#D_IND
SubsetCreate(D_IND, subset_copy);
MDX_IND = '{
			{FILTER({TM1FILTERBYLEVEL({TM1SUBSETALL(['|D_IND|'])},0)},['|D_IND|'].[Type_Indicateur]@="Prix_Unit")},
            {FILTER({TM1FILTERBYLEVEL({TM1SUBSETALL(['|D_IND|'])},0)},['|D_IND|'].[Type_Indicateur]@="Valo")}
            }';
SubsetMDXSet( D_IND, subset_copy, MDX_IND );

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy,D_IND,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PERIOD, subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_MATERIAL_PLAN,subset_copy);


#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#
DatasourceNameForServer = C_Cube_Source;
DatasourceCubeview= view_copy ;


#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#variable
nvalue = 0;

#On prend son parent dans la dimension Material
Nv_PM = ELPAR(D_MATERIAL, vELEM_MATERIAL_PLAN|'.',1);

#On récupère le volume et la valo de l'article source

Valo_Associée = AttrS(D_CHA_SAP_IND,vELEM_IND,'Valo_Associée');

IF( Valo_Associée @= '');
 CellIncrementN( value , C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, vELEM_LINE, vELEM_IND);

ELSE;

Valo_Source = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_MATERIAL_PLAN, vELEM_CUSTOMER, 'Total_Line', Valo_Associée);

Vol_Source = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_MATERIAL_PLAN, vELEM_CUSTOMER, 'Total_Line', SLS_VOL);

Valo_Cible = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, 'Total_Line', Valo_Associée);
Vol_Cible = CellGetN(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, 'Total_Line', SLS_VOL);

nvalue =(Valo_Source + Valo_Cible) \  (Vol_Source + Vol_Cible);

#ItemReject(NUmberToString(Valo_Source) | ' -  ' | NUmberToString(Valo_Cible) | ' -  ' | NUmberToString(Vol_Source) | ' -  ' |NUmberToString(Vol_Cible) | ' -  ' | Value);

CellPutN( nvalue , C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, Nv_PM, vELEM_CUSTOMER, vELEM_LINE, vELEM_IND);

ENDIF;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ViewZeroOut (C_Cube_Source,view_copy);
#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_MATERIAL_PLAN, subset_copy);
subsetdestroy(D_IND, subset_copy);

#====================================#
#    Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion