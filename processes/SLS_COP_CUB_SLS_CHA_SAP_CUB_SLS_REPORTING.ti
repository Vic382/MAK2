#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****



##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   24/07/2019                                                        #
#                                                                            #
# Fait par :    Elisabeth Mounier                                            #
#                                                                            #
# Action : Processus d'une phase de reporting vers Cha Sap (pour la réutiliser dans l'init)					 #																 #
##############################################################################


#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_REPORTING';
C_Cube_Cible = 'SLS_CHA_SAP';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_CHA_SAP_IND = 'SLS_CHA_SAP_IND';

D_PHASE_REP = '1_G_PHASE_REP';
D_PAYER = 'SLS_PAYER';
D_SOLD_TO = 'SLS_SOLD_TO';
D_MAT_FR_GROUP = 'SLS_MAT_FREIGHT_GROUP';
D_INCOTERM = 'SLS_INCOTERM';
D_QUOTA = 'SLS_Q_HQ';
D_REPORTING_IND = 'SLS_REPORTING_IND';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';

#--------------------Elements--------------------#
e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

#--------------------- Paramètres -----------#
P_PHASE_CIBLE = ATTRS(D_PHASE_REP, P_PHASE_SOURCE, 'Phase');
If(DIMIX(D_PHASE, P_PHASE_CIBLE) = 0);
	err_prolog=1;
	itemreject('Phase '|P_PHASE_CIBLE|' does not exist in cube SLS_CHA_SAP');
EndIf;

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#        Initialisation de la vue à supprimer#
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE,subset_erase);
SubsetDestroy( D_DISTRIB_CHANNEL, subset_erase );
SubsetDestroy( D_SALES_ORG, subset_erase );

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE,subset_erase);
SubsetElementInsert(D_PHASE, subset_erase, P_PHASE_CIBLE, 1);

# 1_G_SALES_ORG
SubsetDestroy( D_SALES_ORG, subset_erase );
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_SALES_ORG);
SubsetElementDelete( D_SALES_ORG, subset_erase, 1);
# subsetcreate(D_SALES_ORG,subset_erase);
# SubsetElementInsert(D_SALES_ORG, subset_erase, P_SALES_ORG, 1);

#D_DISTRIB
SubsetDestroy(D_DISTRIB_CHANNEL, subset_erase);
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_DISTRIB_CHANNEL);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_erase, 1 );
# subsetcreate(D_DISTRIB_CHANNEL,subset_erase);
# SubsetElementInsert(D_DISTRIB_CHANNEL, subset_erase, P_DISTRIB, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_ORG,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE,subset_erase);
Subsetdestroy(D_SALES_ORG,subset_erase);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_erase);

#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy( D_PHASE_REP, subset_copy );
SubsetDestroy( D_DISTRIB_CHANNEL, subset_copy );
SubsetDestroy( D_SALES_ORG, subset_copy );

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
subsetcreate(D_PHASE_REP,subset_copy);
SubsetElementInsert(D_PHASE_REP, subset_copy, P_PHASE_SOURCE, 1);

#D_SALES_ORG
# subsetcreate(D_SALES_ORG,subset_copy);
# SubsetElementInsert(D_SALES_ORG, subset_copy, P_SALES_ORG, 1);
SubsetDestroy( D_SALES_ORG, subset_copy );
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_SALES_ORG);
SubsetElementDelete( D_SALES_ORG, subset_copy, 1);


#D_DISTRIB
# subsetcreate(D_DISTRIB_CHANNEL,subset_copy);
# SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy, P_DISTRIB, 1);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_DISTRIB_CHANNEL);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_copy, 1 );

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PHASE_REP, subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,  subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL, subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy ;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#Si c'est un volume, on garde sa valeur pour calculer la valo plus tard
If(ATTRS(D_CHA_SAP_IND, Indicateur, 'Type_Indicateur') @= 'Volume'); 
	CellPutN(Valeur, C_Cube_Cible, P_PHASE_CIBLE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vCustomer, vMaterial_Plan|'.', vSales_Group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQ_HQ, Indicateur);
	#Volume = Valeur;
EndIf;

#Si c'est un prix, on le copie aussi sur la valo car il n'y a pas de règles dans Cha_Sap
If(ATTRS(D_CHA_SAP_IND, Indicateur, 'Type_Indicateur') @= 'Prix_Unit');
	CellPutN(Valeur, C_Cube_Cible, P_PHASE_CIBLE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vCustomer, vMaterial_Plan|'.', vSales_Group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQ_HQ, Indicateur);
	Volume = CellGetN(C_Cube_Source, P_PHASE_SOURCE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, vMaterial_Plan, vPayer, vSold_To, vShip_Point, vShip_Plant, vProd_Plant, vVendor,'TOTAL_MAT_FREIGHT_GROUP', vIncoterm, vQ_HQ, 'SLS_VOL');
    CellPutN(Valeur*Volume, C_Cube_Cible, P_PHASE_CIBLE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vCustomer, vMaterial_Plan|'.', vSales_Group, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vPayer, vSold_To, vIncoterm, vQ_HQ, ATTRS(D_CHA_SAP_IND, Indicateur, 'Valo_Associée'));
EndIf;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy( D_PHASE_REP, subset_copy );
SubsetDestroy( D_DISTRIB_CHANNEL, subset_copy );
SubsetDestroy( D_SALES_ORG, subset_copy );


#====================================#
#     Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion