#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



################################################################
#                      DESCRIPTION DU PROCESSUS                #
#                                                              #
# Date :   07/05/2019                                          #
#                                                              #
# Fait par :   Ann BESNARD                                     #
#                                                              #
# Action : Switch Article dans un cube (en paramètre)		   #
################################################################



#====================================#
#         Déclaration des variables  #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_ASSIGN';
C_Cube_Cible = 'SLS_ASSIGN';
C_zPARAM = 'zPARAM';
C_zSELECT = 'zSELECT';

#--------------------Dimensions--------------------#
#On récupère toutes les dimensions du cube en paramètre et on repère laquelle est SLS_MATERIAL_PLAN

#Dimension que l'on connait
D_PHASE = '1_G_CURRENT_PHASE';
D_VERSION = 'SLS_VERSION';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_MATERIAL = '1_G_MATERIAL';
D_CUSTOMER = 'SLS_CUSTOMER';
D_LINE = '1_G_LINE';
D_IND = 'SLS_ASSIGN_IND';

# VRT : Mise en place contrat indexé
D_Q_HQ = 'SLS_Q_HQ' ;
# Fin VRT 


#--------------------Elements--------------------#
e_Message_Prolog = '';
Phase_En_Cours = CellGetS(C_zPARAM, 'Phase', 'Value');
SHIP_POINT = 'Shipping Point';
SHIP_PLANT = 'Shipping Plant';
PROD_PLANT = 'Production Plant';
VENDOR = 'Vendor';
NA_PERIOD = 'N/A PERIOD';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClients = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_temp = 'z_temp_' | vUSER |'_' | vPRO_NAME;

DatasourceASCIIDecimalSeparator=',';
DatasourceASCIIThousandSeparator=' ';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_MATERIAL_PLAN, subset_copy);
subsetdestroy(D_IND, subset_copy);
subsetdestroy(D_Q_HQ, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
SubsetCreate(D_PHASE, subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, Phase_En_Cours, 1);

# VRT : Mise en place contrat indexé
# SLS_Q_HQ
MDX_Q_HQ = 'TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_Q_HQ])},0)';
SubsetCreatebyMDX( subset_copy, MDX_Q_HQ );
ViewSubsetAssign(C_Cube_Source,view_copy, D_Q_HQ,subset_copy);
# Fin VRT 

#D_PERIOD
SubsetCreate(D_PERIOD, subset_copy);
MDX_PERIOD = '{TM1SubsetToSet([1_G_PERIOD] , "Current Phase Periods")}';
SubsetMDXSet( D_PERIOD, subset_copy, MDX_PERIOD );

#Dim_Planning_Mat
SubsetCreate(D_MATERIAL_PLAN, subset_copy);
MDX_MATERIAL_PLAN = 'FILTER({TM1SUBSETALL([SLS_MATERIAL_PLAN])},[SLS_MATERIAL_PLAN].[Switch_Article_Cas_n2] =1)';
SubsetMDXSet( D_MATERIAL_PLAN, subset_copy, MDX_MATERIAL_PLAN );

#D_IND
SubsetCreate(D_IND, subset_copy);
MDX_IND = '{['|D_IND|'].[ASSIGN_VOL]}}';
SubsetMDXSet( D_IND, subset_copy, MDX_IND );

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy,D_IND,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_PERIOD, subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy,D_MATERIAL_PLAN,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#
DatasourceNameForServer = C_Cube_Source;
DatasourceCubeview= view_copy;

#=========================================#
#    		 Subset Temporaire            #
#=========================================#
SubsetDestroy(D_LINE, subset_temp);
SubsetCreate( D_LINE, subset_temp);
MDX = '{TM1FILTERBYLEVEL({TM1SUBSETALL([1_G_LINE])},0)}';
SubsetMDXSet( D_LINE, subset_temp ,MDX);
Subsize = SubsetGetSize( D_LINE, subset_temp );



#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


Ship_Point_Source = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL,
		vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, SHIP_POINT);
# MODIF CCE
CellPutS( '' ,C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL,
		vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, SHIP_POINT);




Ship_Plant_Source = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL,
		vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, SHIP_PLANT);
Prod_Plant_Source = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL,
		vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, PROD_PLANT);      
Vendor_Source = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL,
		vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, VENDOR);

CellPutS( '' , C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL, vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, SHIP_PLANT);
CellPutS( '' , C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL,
		vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, PROD_PLANT); 
CellPutS( '' ,C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIb_CHANNEL,
		vELEM_MATERIAL_PLAN,vELEM_CUSTOMER, vELEM_LINE, VENDOR);

#FIN MODIFCCE
     
#On initialise la comb cible 
Ship_Point_Cible = 'A';
Ship_Plant_Cible = 'A';
Prod_Plant_Cible = 'A';   
Vendor_Cible = 'A';
Flag = 0;

#On détermine le Planning MAterial Cible
PM_Cible = ELPAR(D_MATERIAL, vELEM_MATERIAL_PLAN|'.', 1);
 
#On cherche la ligne du PM cible qui contient la comb log source 
cpt_line = 0;
While(Flag = 0);

	Ship_Point_Cible = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), SHIP_POINT);
    Ship_Plant_Cible = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), SHIP_PLANT);
    Prod_Plant_Cible = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), PROD_PLANT);
    Vendor_Cible = CellGetS(C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), VENDOR);
     
    #Si on trouve la même comb log alors on incrémente le volume sur celle ci 
    If(Ship_Point_Cible @= Ship_Point_Source & Ship_Plant_Cible @= Ship_Plant_Source & Prod_Plant_Cible @= Prod_Plant_Source & Vendor_Cible @= Vendor_Source);
		CellIncrementN(StringToNumber(Value), C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
			PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), vELEM_IND);
# CCE RAZ du volume source		
#CellPutN( 0, C_Cube_Source, vELEM_PHASE, vELEM_VERSION, vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL, vELEM_MATERIAL_PLAN, vELEM_CUSTOMER, NumberToString(cpt_line + 1) , vELEM_IND);
	EndIf;
    cpt_line = cpt_line + 1;
    If((cpt_line > Subsize) % 
 		(Ship_Point_Cible @= '' & Ship_Plant_Cible @= '' & Prod_Plant_Cible @= '' & Vendor_Cible @= '')% 
        (Ship_Point_Cible @= Ship_Point_Source & Ship_Plant_Cible @= Ship_Plant_Source & Prod_Plant_Cible @= Prod_Plant_Source & Vendor_Cible @= Vendor_Source));
    	Flag = 1;
        #AsciiOutput('..\Tests\Switch_Assign.csv', 'Flag', NumberToString(Flag));
    EndIf;
End;

#Si on n'a pas trouvé la même comb log, alors on créé une nouvelle ligne avec cette comb log
If(Ship_Point_Cible @<> Ship_Point_Source % Ship_Plant_Cible @<> Ship_Plant_Source % Prod_Plant_Cible @<> Prod_Plant_Source % Vendor_Cible @<> Vendor_Source);
	CellPutS(Ship_Point_Source, C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), SHIP_POINT);
	CellPutS(Ship_Plant_Source, C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), SHIP_PLANT);  
	CellPutS(Prod_Plant_Source, C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), PROD_PLANT);         
	CellPutS(Vendor_Source, C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , NA_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), VENDOR);    
    CellPutN(StringToNumber(Value), C_Cube_Cible, vELEM_PHASE, vELEM_VERSION, vELEM_Q_HQ , vELEM_PERIOD, vELEM_SALES_ORG, vELEM_DISTRIB_CHANNEL,
		PM_Cible,vELEM_CUSTOMER, NumberToString(cpt_line + 1), vELEM_IND);  
 EndIf;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ViewZeroOut (C_Cube_Source,view_copy);
#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_MATERIAL_PLAN, subset_copy);
subsetdestroy(D_IND, subset_copy);
SubsetDestroy( D_LINE, Subset_temp);
SubsetDestroy( D_Q_HQ, Subset_temp);


#====================================#
#    Réactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion