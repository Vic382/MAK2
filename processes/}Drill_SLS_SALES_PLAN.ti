#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


####################
# Déclaration des variables #
####################

# Cube #
#######


C_CIBLE='SLS_DEAL';
C_SOURCE='SLS_SALES_PLAN';


# Dimension #
##########




D_1_G_PHASE = '1_G_CURRENT_PHASE';
D_1_G_SALES_ORG='1_G_SALES_ORG';

D_1_G_DISTRIB_CHANNEL='1_G_DISTRIB_CHANNEL';
D_SLS_CUSTOMER = 'SLS_CUSTOMER';
D_1_G_MATERIAL = '1_G_MATERIAL';
D_SLS_SALES_GROUP = 'SLS_SALES_GROUP';
D_SLS_DEAL_NB = 'SLS_DEAL_NB';
D_SLS_DEAL_ITEM = 'SLS_DEAL_ITEM';
D_SLS_DEAL_STATUS = ' SLS_DEAL_STATUS';
D_SLS_DEAL_IND = ' SLS_DEAL_IND';





# Vue           #
##########

vue_cible='zDrill_View';


# Sous ensemble   #
##############

sous_ensemble_cible = 'zDrill_Subset';
sous_ensemble_temp = 'zDrill_temp_Subset';


####################
# Création de la vue cible    #
####################

viewdestroy(C_CIBLE,vue_cible);
viewcreate(C_CIBLE,vue_cible);


########################
# Définition des sous ensemble    #
########################

# D_1_G_SALES_ORG='1_G_SALES_ORG'; #
###########

If(SubsetExists(D_1_G_SALES_ORG,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_1_G_SALES_ORG, sous_ensemble_cible);
Else;
	SubsetCreate(D_1_G_SALES_ORG, sous_ensemble_cible);
EndIf;
SubsetElementInsert(D_1_G_SALES_ORG, sous_ensemble_cible, P_1_G_SALES_ORG, 1);
SubsetAliasSet(D_1_G_SALES_ORG,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_1_G_SALES_ORG, sous_ensemble_cible);

# D_1_G_DISTRIB_CHANNEL='1_G_DISTRIB_CHANNEL'; #
##########

If(SubsetExists(D_1_G_DISTRIB_CHANNEL,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_1_G_DISTRIB_CHANNEL,sous_ensemble_cible);
Else;
	SubsetCreate(D_1_G_DISTRIB_CHANNEL,sous_ensemble_cible);
EndIf;
SubsetElementInsert(D_1_G_DISTRIB_CHANNEL, sous_ensemble_cible, P_1_G_DISTRIB_CHANNEL, 1);
SubsetAliasSet(D_1_G_DISTRIB_CHANNEL,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_1_G_DISTRIB_CHANNEL, sous_ensemble_cible);

# D_SLS_CUSTOMER #
##########

If(SubsetExists(D_SLS_CUSTOMER,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_SLS_CUSTOMER,sous_ensemble_cible);
Else;
	SubsetCreate(D_SLS_CUSTOMER,sous_ensemble_cible);
EndIf;
SubsetElementInsert(D_SLS_CUSTOMER, sous_ensemble_cible,P_SLS_CUSTOMER, 1);
SubsetAliasSet(D_SLS_CUSTOMER,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_SLS_CUSTOMER, sous_ensemble_cible);


# D_1_G_MATERIAL = '1_G_MATERIAL'; #
#########

If(SubsetExists(D_1_G_MATERIAL,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_1_G_MATERIAL, sous_ensemble_cible);
Else;
	SubsetCreate(D_1_G_MATERIAL, sous_ensemble_cible);
EndIf;

If(P_SLS_MATERIAL_PLAN @= 'TOTAL_PLANNING_MATERIAL');
	P_SLS_MATERIAL_PLAN = 'TOTAL_MATERIAL';
EndIf;
SubsetElementInsert(D_1_G_MATERIAL, sous_ensemble_cible, P_SLS_MATERIAL_PLAN, 1);

v_num_children=ElementComponentCount(D_1_G_MATERIAL, '', P_SLS_MATERIAL_PLAN);

cpt=1;
While(cpt < v_num_children);
	Elem_MATERIAL = ELCOMP(D_1_G_MATERIAL, P_SLS_MATERIAL_PLAN, cpt);
	SubsetElementInsert(D_1_G_MATERIAL, sous_ensemble_cible, Elem_MATERIAL, 2);
	cpt = cpt + 1;
End;


SubsetAliasSet(D_1_G_MATERIAL,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_1_G_MATERIAL, sous_ensemble_cible);

# D_SLS_SALES_GROUP = 'SLS_SALES_GROUP'; #
##########

If(SubsetExists(D_SLS_SALES_GROUP,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_SLS_SALES_GROUP,sous_ensemble_cible);
Else;
	SubsetCreate(D_SLS_SALES_GROUP,sous_ensemble_cible);
EndIf;
SubsetElementInsert(D_SLS_SALES_GROUP, sous_ensemble_cible, P_SLS_SALES_GROUP, 1);
SubsetAliasSet(D_SLS_SALES_GROUP,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_SLS_SALES_GROUP, sous_ensemble_cible);


# D_SLS_DEAL_NB = 'SLS_DEAL_NB'; #
#########

SubsetDestroy(D_SLS_DEAL_NB, sous_ensemble_temp);
MDX_DEAL_NB = '{{[SLS_DEAL_NB].[TOTAL_DEAL_NB]},{TM1FILTERBYLEVEL( {TM1SUBSETALL( [SLS_DEAL_NB] )}, 0)}}';
SubsetCreateByMDX(sous_ensemble_temp, MDX_DEAL_NB);
SubsetElementDelete( D_SLS_DEAL_NB, sous_ensemble_temp, 1 );
SubSize_DEAL_NB = SubsetGetSize(D_SLS_DEAL_NB, sous_ensemble_temp);
If(SubsetExists(D_SLS_DEAL_NB,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_SLS_DEAL_NB,sous_ensemble_cible);
Else;
	SubsetCreate(D_SLS_DEAL_NB,sous_ensemble_cible);
EndIf;
cpt = 1;
While(cpt < SubSize_DEAL_NB);
	Elem_DEAL_NB = SubsetGetElementName(D_SLS_DEAL_NB, sous_ensemble_temp, cpt);
	SubsetElementInsert(D_SLS_DEAL_NB, sous_ensemble_cible, Elem_DEAL_NB, 1);
	cpt = cpt + 1;
End;


#SubsetElementInsert(D_SLS_DEAL_NB, sous_ensemble_cible, 'TOTAL_DEAL_NB', 1);
SubsetAliasSet(D_SLS_DEAL_NB,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_SLS_DEAL_NB, sous_ensemble_cible);


# D_SLS_DEAL_ITEM = ' SLS_DEAL_ITEM'; #
#########

SubsetDestroy(D_SLS_DEAL_ITEM, sous_ensemble_temp);
MDX_DEAL_ITEM = '{{[SLS_DEAL_ITEM].[TOTAL_DEAL_ITEM]},{TM1FILTERBYLEVEL( {TM1SUBSETALL( [SLS_DEAL_ITEM] )}, 0)}}';
SubsetCreateByMDX(sous_ensemble_temp, MDX_DEAL_ITEM);
SubsetElementDelete( D_SLS_DEAL_ITEM, sous_ensemble_temp, 1 );
SubSize_DEAL_ITEM = SubsetGetSize(D_SLS_DEAL_ITEM, sous_ensemble_temp);
If(SubsetExists(D_SLS_DEAL_ITEM,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_SLS_DEAL_ITEM,sous_ensemble_cible);
Else;
	SubsetCreate(D_SLS_DEAL_ITEM,sous_ensemble_cible);
EndIf;
cpt = 1;
While(cpt < SubSize_DEAL_ITEM);
	Elem_DEAL_ITEM = SubsetGetElementName(D_SLS_DEAL_ITEM, sous_ensemble_temp, cpt);
	SubsetElementInsert(D_SLS_DEAL_ITEM, sous_ensemble_cible, Elem_DEAL_ITEM, 1);
	cpt = cpt + 1;
End;

SubsetAliasSet(D_SLS_DEAL_ITEM,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_SLS_DEAL_ITEM, sous_ensemble_cible);


# D_SLS_DEAL_STATUS = ' SLS_DEAL_STATUS'; #
#########

If(SubsetExists(D_SLS_DEAL_STATUS,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_SLS_DEAL_STATUS,sous_ensemble_cible);
Else;
	SubsetCreate(D_SLS_DEAL_STATUS,sous_ensemble_cible);
EndIf;
SubsetElementInsert(D_SLS_DEAL_STATUS, sous_ensemble_cible, 'VAL', 1);
SubsetElementInsert(D_SLS_DEAL_STATUS, sous_ensemble_cible, 'ACT', 1);
SubsetAliasSet(D_SLS_DEAL_STATUS,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_SLS_DEAL_STATUS, sous_ensemble_cible);


# D_SLS_DEAL_IND = ' SLS_DEAL_IND'; #
#########

If(SubsetExists(D_SLS_DEAL_IND,sous_ensemble_cible)= 1);
	SubsetDeleteAllElements(D_SLS_DEAL_IND,sous_ensemble_cible);
Else;
	SubsetCreate(D_SLS_DEAL_IND,sous_ensemble_cible);
EndIf;

SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'END_DATE', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'DEAL_TXT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'INCO', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'INCO_2', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'CONV_VOL_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'TAR_QTY_BASE', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'REM_QTY_BASE', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'INV_VOL_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'TAR_QTY_SLS_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'REM_QTY_SLS_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'DEAL_IDX', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'INV_CUR', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'PRICE_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'PRICE', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'PRICE_IN_BASE_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'PRICE_IN_EURO_SLS_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'PRICE_IN_EUR_BASE_UNIT', 1);
SubsetElementInsert(D_SLS_DEAL_IND, sous_ensemble_cible, 'BEG_DATE', 1);
SubsetAliasSet(D_SLS_DEAL_IND,sous_ensemble_cible,'Caption');
ViewSubsetAssign(C_CIBLE, vue_cible, D_SLS_DEAL_IND, sous_ensemble_cible);

##############################
# Agencement des dimensions  #
#############################
ViewTitleDimensionSet(C_CIBLE, Vue_cible, D_1_G_DISTRIB_CHANNEL);
ViewTitleDimensionSet(C_CIBLE, Vue_cible, D_SLS_SALES_GROUP);
ViewTitleDimensionSet(C_CIBLE, Vue_cible, D_1_G_SALES_ORG);

ViewColumnDimensionSet(C_CIBLE, Vue_cible, D_SLS_DEAL_IND, 1);


ViewRowDimensionSet(C_CIBLE, Vue_cible, D_SLS_CUSTOMER,1);
ViewRowDimensionSet(C_CIBLE, Vue_cible,D_1_G_MATERIAL, 2);
ViewRowDimensionSet(C_CIBLE, Vue_cible,D_SLS_DEAL_STATUS,3);
ViewRowDimensionSet(C_CIBLE, Vue_cible, D_SLS_DEAL_NB, 4);
ViewRowDimensionSet(C_CIBLE, Vue_cible, D_SLS_DEAL_ITEM, 4);

ViewSuppressZeroesSet(C_CIBLE, Vue_cible, 1);

RETURNVIEWHANDLE('SLS_DEAL',Vue_cible);


#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion