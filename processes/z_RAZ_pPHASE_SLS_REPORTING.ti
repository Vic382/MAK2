#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

################################################################
#                                               DESCRIPTION DU PROCESSUS                                             
#                                                                                                                                                  
# Date :   12/04//2022                                                                                                                
#                                                                                                                                                  
# Fait par :    Emmanuel LOUTSCH                                                                                               
#                                                                                                                                                  
# Action : RAZ de la phase pPhase du cube SLS_REPORTING   
# Si la Phase ACT est sélectionnée, les périodes de début et de fin doivent l'être aussi
#################################################################

# Cube paramètre utilisateur
sCubeUser = 'zSELECT' ;
# Utilisateur lancant le processus
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
#Cube administration
sCubePROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

# Information sur le process
Z_STATUS = 'KO' ;
CellPutS ( Z_STATUS , sCubeUser , vClient , 'ExecuteProcess' ) ;

#--------------------Paramètres utilisateurs--------------------#
# PHASE
# P_PHASE = CellGetS ( sCubeUser , vClient, 'Current Phase' ) ;
# P_PHASE = 'CURR_PHASE' ;
p_PHASE = CellGetS ( sCubeUser , vClient, 'Phase_RAZ_SLS_REPORTING' ) ;
p_PHASE = DimensionElementPrincipalName ( '1_G_PHASE_REP' , p_PHASE ) ;

# Vérification que la p_PHASE n'est pas vide, sinon, sortie du processus
IF ( p_PHASE @= '' ) ;
 ProcessQuit ;
ENDIF ;

## Au cas où, pour plus tard
#P_SALES_GROUP 
P_SALES_GROUP = '' ;

#--------------------Cubes--------------------#

sCubeCible = 'SLS_REPORTING' ;
sVueCible = 'Cible_vue_' | Today (0) | '_' | GetProcessName () ; 
sSubsetCible = 'Cible_Subset_' | Today (0) | '_' | GetProcessName () ; 

###########################################
## Creation vue cible
###########################################

# Destruction pour recréation de la vue
ViewDestroy ( sCubeCible , sVueCible ) ;
ViewCreate ( sCubeCible , sVueCible ) ; 

# Création des sous-ensembles des dimensions du cube

#--------------------Dimensions-----------#
sDimPHASE = '1_G_PHASE_REP';
sDimPERIOD = '1_G_PERIOD';
sDimSALESORG = '1_G_SALES_ORG';
sDimCHANNEL = '1_G_DISTRIB_CHANNEL';
sDimVOLUME_UNIT = '1_G_VOLUME_UNIT';
sDimSALES_GROUP = 'SLS_SALES_GROUP';
sDimCUSTOMER = 'SLS_CUSTOMER';
sDimMATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
sDimPAYER = 'SLS_PAYER' ;
sDimSOLD = 'SLS_SOLD_TO' ;
sDimSHIPPOINT = 'SLS_SHIP_POINT';
sDimSHIPPLANT = 'SLS_SHIP_PLANT' ;
sDimPRODPLANT = 'SLS_PROD_PLANT' ;
sDimVENDOR = 'SLS_VENDOR' ;
sDimMATFREIGHT = 'SLS_MAT_FREIGHT_GROUP' ;
sDimINCOTERM = 'SLS_INCOTERM' ;
sDimQHQ = 'SLS_Q_HQ' ;
sDimMesure = 'SLS_REPORTING_IND' ;

# Gestion des périodes
IF ( p_PHASE @= 'ACT' ) ;
 p_DEBUT = CellGetS ( sCubeUser , vClient, 'Period Debut SLS_REPORTING' ) ;
 p_FIN = CellGetS ( sCubeUser , vClient, 'Period Fin SLS_REPORTING' ) ;
 IF ( P_DEBUT @= '' % P_FIN @= '' ) ;
  ProcessQuit ;
 ENDIF ;
  n_Debut = DIMIX ( sDimPERIOD , p_DEBUT ) ;
  n_Fin = DIMIX ( sDimPERIOD , p_FIN ) ;
ENDIF ;

# sDimPHASE
SubsetDestroy ( sDimPHASE , sSubsetCible ) ;
SubsetCreate ( sDimPHASE , sSubsetCible  ) ;
SubsetElementInsert ( sDimPHASE , sSubsetCible , p_PHASE , 1 ) ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimPHASE , sSubsetCible ) ; 

# sDimPERIOD
SubsetDestroy ( sDimPERIOD , sSubsetCible ) ;
# Si la PHASE est ACT, restriction des périodes entre Debut et fin (comprises) via une boucle
IF ( P_PHASE @= 'ACT' ) ;
 SubsetCreate ( sDimPERIOD , sSubsetCible  ) ;
 nPosition = 1 ;
 WHILE ( n_Debut <= n_Fin ) ;
  sPeriod = DimNm ( sDimPERIOD , n_Debut ) ;
  IF ( ELLEV ( sDimPERIOD , sPeriod ) = 0 ) ;
   SubsetElementInsert ( sDimPERIOD , sSubsetCible , sPeriod , nPosition ) ;
   nPosition = nPosition + 1 ;
  ENDIF ;
  n_Debut = n_Debut + 1 ;
 END ;
# Sinon, l'ensemble des périodes (niveau 0) sont inclues
ELSE ;
 SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimPERIOD|'] )}, 0)}' );
ENDIF ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimPERIOD , sSubsetCible ) ; 

# sDimSALESORG
SubsetDestroy ( sDimSALESORG , sSubsetCible ) ;
SubsetCreatebyMDX( sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimSALESORG |'] )}, 0)}') ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimSALESORG , sSubsetCible ) ; 

# sDimCHANNEL
SubsetDestroy ( sDimCHANNEL , sSubsetCible ) ;
SubsetCreatebyMDX( sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL(['| sDimCHANNEL |'] )}, 0)}') ;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimCHANNEL , sSubsetCible ) ; 
 
# sDimVOLUME_UNIT
SubsetDestroy ( sDimVOLUME_UNIT , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimVOLUME_UNIT|'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible , sDimVOLUME_UNIT , sSubsetCible ) ; 

# sDimSALES_GROUP
SubsetDestroy ( sDimSALES_GROUP , sSubsetCible ) ;
IF ( P_SALES_GROUP @= '' ) ;
 SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimSALES_GROUP |'] )}, 0)}'  );
ELSE;
 SubsetCreate ( sDimSALES_GROUP , sSubsetCible ) ; 
 SubsetElementInsert ( sDimSALES_GROUP , sSubsetCible , P_SALES_GROUP , 1) ;
ENDIF;
ViewSubsetAssign ( sCubeCible , sVueCible , sDimSALES_GROUP , sSubsetCible ) ; 

# sDimCUSTOMER
SubsetDestroy (  sDimCUSTOMER , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimCUSTOMER|'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimCUSTOMER , sSubsetCible ) ; 

# sDimMATERIAL_PLAN
SubsetDestroy ( sDimMATERIAL_PLAN , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimMATERIAL_PLAN|'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimMATERIAL_PLAN , sSubsetCible ) ; 

#sDimPAYER 
SubsetDestroy ( sDimPAYER  , sSubsetCible ) ;
SubsetCreatebyMDX( sSubsetCible  , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimPAYER|'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimPAYER  , sSubsetCible ) ; 

#sDimSOLD 
SubsetDestroy ( sDimSOLD , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimSOLD|'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimSOLD , sSubsetCible ) ; 

#sDimSHIPPOINT
SubsetDestroy ( sDimSHIPPOINT , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimSHIPPOINT |'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimSHIPPOINT , sSubsetCible ) ; 

#sDimSHIPPLANT 
SubsetDestroy ( sDimSHIPPLANT  , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimSHIPPLANT  |'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimSHIPPLANT  , sSubsetCible ) ; 

#sDimPRODPLANT
SubsetDestroy ( sDimPRODPLANT , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimPRODPLANT |'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimPRODPLANT , sSubsetCible ) ; 

#sDimVENDOR 
SubsetDestroy ( sDimVENDOR  , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimVENDOR  |'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible , sDimVENDOR  , sSubsetCible ) ; 

#sDimMATFREIGHT 
SubsetDestroy ( sDimMATFREIGHT , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimMATFREIGHT |'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimMATFREIGHT  , sSubsetCible ) ; 

#sDimINCOTERM 
SubsetDestroy ( sDimINCOTERM  , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimINCOTERM |'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimINCOTERM , sSubsetCible ) ; 

#sDimQHQ 
SubsetDestroy ( sDimQHQ , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimQHQ |'] )}, 0)}' );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimQHQ, sSubsetCible ) ; 

# sDimMesure
SubsetDestroy ( sDimMesure , sSubsetCible ) ;
SubsetCreatebyMDX(  sSubsetCible , '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|sDimMesure|'] )}, 0)}'  );
ViewSubsetAssign ( sCubeCible , sVueCible ,  sDimMesure , sSubsetCible ) ; 


ViewZeroOut ( sCubeCible , sVueCible ) ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#-- Supression de la RAZ
ViewDestroy (  sCubeCible , sVueCible ) ;
#-- Suppression des Subsets créés pour le process
SubsetDestroy ( sDimPHASE , sSubsetCible ) ;
SubsetDestroy ( sDimPERIOD , sSubsetCible ) ;
SubsetDestroy ( sDimSALESORG , sSubsetCible ) ;
SubsetDestroy ( sDimCHANNEL , sSubsetCible ) ;
SubsetDestroy ( sDimVOLUME_UNIT , sSubsetCible ) ;
SubsetDestroy ( sDimSALES_GROUP , sSubsetCible ) ;
SubsetDestroy ( sDimCUSTOMER , sSubsetCible ) ;
SubsetDestroy ( sDimMATERIAL_PLAN , sSubsetCible ) ;
SubsetDestroy ( sDimPAYER , sSubsetCible ) ;
SubsetDestroy ( sDimSOLD , sSubsetCible ) ;
SubsetDestroy ( sDimSHIPPOINT , sSubsetCible ) ;
SubsetDestroy ( sDimSHIPPLANT , sSubsetCible ) ;
SubsetDestroy ( sDimPRODPLANT , sSubsetCible ) ;
SubsetDestroy ( sDimVENDOR , sSubsetCible ) ;
SubsetDestroy ( sDimMATFREIGHT , sSubsetCible ) ;
SubsetDestroy ( sDimINCOTERM , sSubsetCible ) ;
SubsetDestroy ( sDimQHQ , sSubsetCible ) ;
SubsetDestroy ( sDimMesure , sSubsetCible ) ;



# Information sur le process
Z_STATUS = 'OK' ;
CellPutS ( Z_STATUS , sCubeUser , vClient , 'ExecuteProcess' ) ;

# Suppression de la phase de RAZ
CellPutS ( '' , sCubeUser , vClient, 'Phase_RAZ_SLS_REPORTING' ) ;
#endregion