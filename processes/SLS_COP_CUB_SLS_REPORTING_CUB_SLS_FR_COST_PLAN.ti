#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****





##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   02/05/2019                                                        #
#                                                                            #
# Fait par :    JM 		                                        	         #
#                                                                            #
# Action : Processus copie du cube Cost Plan vers Reporting					 #
#           																 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#


#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_FR_COST_PLAN';
C_Cube_Cible = 'SLS_REPORTING';

####   VRT : Ajout cube param cout approche   ####

sCubeCtApp = 'SLS_COUT_APPROCHE' ;

####   FIN VRT   ####


#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_Version = 'SLS_VERSION';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_MATERIAL_PLAN= 'SLS_MATERIAL_PLAN';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MAT_FREIGHT_GROUP='SLS_MAT_FREIGHT_GROUP';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR';
D_FR_COST_PLAN_IND= 'SLS_FR_COST_PLAN_IND';
D_PHASE_REP='1_G_PHASE_REP'; 
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_PAYER=  'SLS_PAYER' ;
D_SOLD_TO = 'SLS_SOLD_TO' ;
D_INCOTERM = 'SLS_INCOTERM';
D_Q_HQ = 'SLS_Q_HQ' ;
D_REPORTING_IND = 'SLS_REPORTING_IND';
D_REP_PHASE = '1_G_PHASE_REP' ;
#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Source;
DatasourceCubeview=view_copy;

#====================================#
#    Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);

# Récupération de la phase en cours et des paramètres de cette phase
P_Phase = CellGetS('zSelect', vClient ,'Current Phase');
IF ( P_Phase @= '' % P_Phase @= '0') ;
 P_Phase = 'Current Phase' ;
ENDIF ;
P_Phase = DimensionElementPrincipalName( D_CURRENT_PHASE, P_Phase );
P_Phase_Cap = ATTRS(D_CURRENT_PHASE, P_Phase, 'Caption');

P_Sales_Org = CellGetS('zSELECT',vClient,'Sales Organisation');
P_Distrib_Channel = CellGetS('zSELECT',vClient,'Distribution Channel');
P_Phase_Rep = CellGetS('zSELECT',vClient,'Target Phase');
If(P_Logistics <> 1);
	P_Sales_Org = CellGetS('zSELECT',vClient,'Sales Organisation');
	P_Distrib_Channel = CellGetS('zSELECT',vClient,'Distribution Channel');
Else;
	P_Sales_Org = 'Total SAles Org';
    P_Distrib_Channel = 'Total Distribution Channel';
EndIf;


#Phase sur laquelle on copie le reporting
P_Phase_Rep = CellGetS('zSELECT',vClient,'Target Phase');
IF ( P_Phase_Rep @= '' % P_Phase_Rep @= '0') ;
 P_Phase_Rep = P_Phase ;
ENDIF ;
If(P_Logistics = 1);
	P_Phase_Rep = P_Phase;
ElseIf(P_Logistics = 2);
   	P_Phase_Rep = DimensionElementPrincipalName(D_REP_PHASE, P_Phase)|'_CS';
# ELH - EVO Commerciaux
ElseIf (P_Logistics = 3 ) ;
  IF ( P_Phase_invit @<> '' ) ;
    P_Phase_Rep = DimensionElementPrincipalName ( D_REP_PHASE , P_Phase_invit ) ;
  ENDIF ;
# Fin ELH - EVO Commerciaux
Else; 
	If(P_Phase_Rep@='');
	    err_prolog = 1;
       	itemreject('Please select a target phase.');
   	EndIf;
EndIf;

#Premier et dernier mois de la phase
First_Month = ATTRS('1_G_CURRENT_PHASE', P_Phase, 'First Period');
Last_Month = ATTRS('1_G_CURRENT_PHASE', P_Phase, 'Last Period');
First_simulation_month = ATTRS('1_G_CURRENT_PHASE', P_Phase, 'First simulation month');

AttrPutS(First_Month, D_PHASE_REP, DimensionElementPrincipalName(D_PHASE_REP,P_Phase_Rep), 'First Period');
AttrPutS(Last_Month, '1_G_PHASE_REP', DimensionElementPrincipalName(D_PHASE_REP,P_Phase_Rep), 'Last Period');
#-- First Simulation Month
# Récupération de l'attribut de blocage
sBlocage = AttrS ( '1_G_PHASE_REP', DimensionElementPrincipalName(D_PHASE_REP,P_Phase_Rep), 'Blocage_First simulation month');
# Si l'attribut de blocage n'est pas Oui, mise à jour du First Simumlation Month
IF ( sBlocage @<> 'Oui' ) ;
 AttrPutS(First_simulation_month, '1_G_PHASE_REP', DimensionElementPrincipalName(D_PHASE_REP,P_Phase_Rep), 'First simulation month');
ENDIF ;


Current_Phase = CellGetS('zSELECT',vClient,'Current Phase');

#PARAMETRES
If(p_Sales_org @= ''); 
	p_Sales_org = 'TOTAL SALES ORG';
EndIf;
If(p_Distrib_Channel @= ''); 
	p_Distrib_Channel = 'TOTAL_DISTRIB_CHANNEL';
EndIf;

As_Temporary = 1 ;
#--------------------Création des objets Source--------------------#
ViewCreate(C_Cube_Source ,view_copy, As_Temporary );
# 1_G_CURRENT_PHASE
subsetcreate(D_CURRENT_PHASE,subset_copy ,As_Temporary);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, Current_Phase, 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENT_PHASE,subset_copy);


# 1_G_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_SALES_ORG, As_Temporary);
SubsetElementDelete( D_SALES_ORG, subset_copy, 1);

ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);

# 1_G_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib_Channel |']), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_DISTRIB_CHANNEL, As_Temporary);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_copy, 1 );

ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);


#SLS_FR_COST_PLAN_IND
subsetcreate(D_FR_COST_PLAN_IND,subset_copy ,As_Temporary);
SubsetElementInsert(D_FR_COST_PLAN_IND, subset_copy, 'SLS_VOL', 1);
ViewSubsetAssign(C_Cube_Source,view_copy, D_FR_COST_PLAN_IND, subset_copy);

#D_PERIOD
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,'Current Phase Periods');
 
#--------------------Suppression des cellules vides, consolidées, calculées pour la vue source--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);




#--------------------Création des objets cible--------------------#
ViewCreate(C_Cube_cible ,view_erase, As_Temporary );
# 1_G_PHASE_REP
subsetcreate(D_REP_PHASE,subset_erase ,As_Temporary);
SubsetElementInsert(D_PHASE_REP, subset_erase, P_Phase_Rep, 1);
ViewSubsetAssign(C_Cube_cible,view_erase, D_PHASE_REP,subset_erase);
# 1_G_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_SALES_ORG].[' | p_Sales_org |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_SALES_ORG, As_Temporary);
SubsetElementDelete( D_SALES_ORG, subset_erase, 1);

ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_ORG,subset_erase);

# 1_G_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_DISTRIB_CHANNEL].[' | p_Distrib_Channel |']), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_DISTRIB_CHANNEL, As_Temporary);
SubsetElementDelete( D_DISTRIB_CHANNEL, subset_erase, 1 );

ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);

#SLS_Q_HQ
subsetcreate(D_Q_HQ,subset_erase ,As_Temporary);
SubsetElementInsert(D_Q_HQ, subset_erase, 'HORS_QUOTA', 1);
ViewSubsetAssign(C_Cube_cible,view_erase, D_Q_HQ,subset_erase);

#SLS_REPORTING_IND

MDX_IND = '{{[SLS_REPORTING_IND].[SLS_VOL]},{TM1FILTERBYLEVEL(DESCENDANTS([SLS_REPORTING_IND].[SLS_VOL]), 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_IND, As_Temporary);
SubsetElementDelete( D_REPORTING_IND, subset_erase, 1);

ViewSubsetAssign(C_Cube_cible,view_erase,D_REPORTING_IND,subset_erase);

#D_PERIOD
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD,'Current Phase Periods');

ViewZeroOut( C_Cube_cible,view_erase);


#-------Creation d'un sous ensemble pour la dimension SLS_FR_COST_PLAN_IND
V_S_TEMPORARY_NAME =  'Assign_IND_' | vUSER |'_' | vPRO_NAME;
sMDX = '{{[SLS_FR_COST_PLAN_IND].[Sales Volume]}, {TM1FILTERBYLEVEL(EXCEPT(DESCENDANTS([SLS_FR_COST_PLAN_IND].[4NET_UNIT]) , {[SLS_FR_COST_PLAN_IND].[FR_COST_UNIT]}) , 0)}}';
SubsetCreatebyMDX( V_S_TEMPORARY_NAME, sMDX , As_Temporary );
SubsetElementDelete('SLS_FR_COST_PLAN_IND', V_S_TEMPORARY_NAME, 1);
nSubsetSize = SubsetGetSize( 'SLS_FR_COST_PLAN_IND', V_S_TEMPORARY_NAME);
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

#---------Recuperation des elements des dimensions 
v_Sales_Group = ATTRS ( D_Customer , v_CUSTOMER , 'Sales Group' ) ;
v_Payer = ATTRS ( D_Customer , v_CUSTOMER , 'Payer' ) ;
IF ( v_Payer @= '' ) ;
 v_Payer = 'N/A_PAYER' ;
ENDIF ;
v_SoldeTO= ATTRS ( D_Customer , v_CUSTOMER , 'Sold-to' ) ;
IF ( v_SoldeTO @= '' ) ;
 v_SoldeTO = 'N/A_SOLD_TO' ;
ENDIF ;
v_Incoterm = CellGETS (C_Cube_Source,v_Current_Phase ,'N/A PERIOD',v_Sales_Org , v_Distrib_Channel, v_Material_Plan, v_Customer, v_Mat_Freight_Group, v_Ship_Point,'N/A_SHIP_PLANT','N/A_PROD_PLANT' ,'N/A_VENDOR','inco');
#modif 24/07: attention on prend l'incoterm que la logistique a modifié, et non celui par défaut
#Incoterm = ATTRS(D_CUSTOMER, vCustomer, 'Incoterm');


#---------Division & Unité par défaut
Division = ELPAR(D_MATERIAL_PLAN, v_Material_Plan, 1);
Division_Name = ATTRS(D_MATERIAL_PLAN, Division, 'Caption');
v_VolumeUnit = ATTRS('1_G_MATERIAL', Division, 'Volume_Unit');

#-----------Recuperation des pourcentages des volumes du cube SLS_SALES_PLAN
If(v_Distrib_Channel @= '40' & Division @= 'D_10');
			vSLS_VOL = CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'USD' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'SLS_VOL');

			v_PROMO_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'USD' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'PROMO_VOL')
						\vSLS_VOL;
                        
			v_CURR_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'USD' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'CURR_VOL')
						\vSLS_VOL;
                        
			#Dans le cas de l'Export Sucre, l'indicateur par défaut est le Contracted Volume
            If(vSLS_VOL = 0);
				v_CONTR_VOL = 1;
            Else;
                v_CONTR_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'USD' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'CONTR_VOL')
						\vSLS_VOL; 
            EndIf;
                        
			v_PROSP_VOL = CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'USD' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'PROSP_VOL')
						\vSLS_VOL;

			v_TO_BE_CONTR_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'USD' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'TO_BE_CONTR_VOL')
						\vSLS_VOL;

			v_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'USD' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'VOL')
						\vSLS_VOL;			
Else;
			vSLS_VOL = CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'EUR' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'SLS_VOL');

			#Cas Retail volume promo
            If(vSLS_VOL = 0 & v_Distrib_Channel @= '10' & ATTRN('1_G_MATERIAL', v_MATERIAL_PLAN | '.', 'Vol_Promo') = 1); 
            	v_PROMO_VOL = 1;
            Else;
				v_PROMO_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'EUR' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'PROMO_VOL')
						\vSLS_VOL;
            EndIf;
            
			#Cas Retail GMS & RHF volume hors Promo
            If(vSLS_VOL = 0 & v_Distrib_Channel @= '10' & ATTRN('1_G_MATERIAL', v_MATERIAL_PLAN | '.', 'Vol_Promo') = 0);         
				v_CURR_VOL = 1;
            Else; 
                v_CURR_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'EUR' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'CURR_VOL')
						\vSLS_VOL;
            EndIf;
                        
			#Cas B2B Sugar (Export Sugar est géré plus haut)
            If(vSLS_VOL = 0 & v_Distrib_Channel @= '20' & Division @= 'D_10');
            	v_CONTR_VOL = 1;
            Else; 
				v_CONTR_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'EUR' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'CONTR_VOL')
						\vSLS_VOL;
 			EndIf; 
 			
			v_PROSP_VOL = CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'EUR' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'PROSP_VOL')
						\vSLS_VOL;

			v_TO_BE_CONTR_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'EUR' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'TO_BE_CONTR_VOL')
						\vSLS_VOL;

			#Cas B2BExport AlcoolEthanol
            If(vSLS_VOL = 0 & (v_Distrib_Channel @= '20' & Division @= 'D_30') %  (v_Distrib_Channel @= '20' & Division @= 'D_20') % (v_Distrib_Channel @= '40' & Division @= 'D_30') % (v_Distrib_Channel @= '40' & Division @= 'D_20'));
				v_VOL = 1;
            Else;
           		 v_VOL =CellGetN ( 'SLS_SALES_PLAN' , v_Current_Phase , v_Periode , v_Sales_Org , v_Distrib_Channel , 'EUR' , v_VolumeUnit , v_CUSTOMER , v_MATERIAL_PLAN, v_Sales_Group,'VOL')
						\vSLS_VOL;
            EndIf;
EndIf;
#----------Fin

i=1 ;
While ( i <= Dimsiz ( 'SLS_Vol_Convert_Ind' ) ) ;

myUnit = dimnm ('SLS_Vol_Convert_Ind' , i ) ;
If(DIMIX('}ElementAttributes_1_G_VOLUME_UNIT', Division_Name | '_Report') <> 0 );
 		If(ATTRN(D_VOLUME_UNIT, myUnit, Division_Name | '_Report') = 1);
			vTaux = CellGetN ( 'SLS_VOL_CONVERT',v_MATERIAL_PLAN ,myUnit, v_VolumeUnit) ;
            If(v_Incoterm @= '');
            	v_Incoterm = 'N/A_Incoterm';
            EndIf;
			
			CellputN ( ROUNDP(Valeur * v_PROMO_VOL \vTaux, 3) ,C_Cube_Cible ,  p_PHASE_REP , v_Periode ,v_Sales_Org , v_Distrib_Channel  , myUnit , v_Sales_Group ,v_CUSTOMER
			,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
			v_Incoterm , 'HORS_QUOTA' , 'PROMO_VOL' ) ;

			CellputN (ROUNDP(Valeur * v_CURR_VOL \vTaux, 3) ,C_Cube_Cible, p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel , myUnit , v_Sales_Group ,v_CUSTOMER
			,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
			v_Incoterm , 'HORS_QUOTA' , 'CURR_VOL' ) ;

			CellputN (ROUNDP(Valeur * v_CONTR_VOL \vTaux, 3) ,C_Cube_Cible , p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel , myUnit , v_Sales_Group ,v_CUSTOMER
			,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
			v_Incoterm , 'HORS_QUOTA' , 'CONTR_VOL' ) ;

			CellputN (ROUNDP(Valeur * v_PROSP_VOL \vTaux, 3),C_Cube_Cible,  p_PHASE_REP , v_Periode ,v_Sales_Org , v_Distrib_Channel  , myUnit , v_Sales_Group ,v_CUSTOMER
			,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
			v_Incoterm , 'HORS_QUOTA' , 'PROSP_VOL' ) ;

			CellputN (ROUNDP(Valeur * v_TO_BE_CONTR_VOL \vTaux, 3) ,C_Cube_Cible, p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel , myUnit , v_Sales_Group ,v_CUSTOMER
			,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
			v_Incoterm , 'HORS_QUOTA' , 'TO_BE_CONTR_VOL' ) ;

			CellputN (ROUNDP(Valeur * v_VOL \vTaux, 3), C_Cube_Cible , p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel  , myUnit , v_Sales_Group ,v_CUSTOMER
			,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
			v_Incoterm , 'HORS_QUOTA' , 'VOL' ) ;
            
            ASCIIOUTPUT ( '../Rejects/manu.csv' , v_periode , v_FR_COST_PLAN_IND , NumberToString ( Valeur ) , MyUnit , v_VolumeUnit , NumberToString ( vTaux ) , v_MATERIAL_PLAN ) ;

            
            #---- copie des prix (sauf cout de transport)
			cpt=1 ;
			#On parcourt tous les prix unitaires de FR_COST_PLAN
			while ( cpt <= nSubsetSize  ) ;
				myPrix = SubsetGetElementName ( D_FR_COST_PLAN_IND , V_S_TEMPORARY_NAME , cpt) ;
				vprix = CellGetN ( C_Cube_Source , v_Current_Phase, v_Periode , v_Sales_Org , v_Distrib_Channel , v_MATERIAL_PLAN , v_CUSTOMER, 'N/A_MAT_FR_GROUP','N/A_SHIP_POINT', 'N/A_SHIP_PLANT', 'N/A_PROD_PLANT', 'N/A_VENDOR',myPrix ) ;
				
                CellputN (ROUNDP(vprix * vtaux, 3) , C_Cube_Cible , p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel  , myUnit , v_Sales_Group ,v_CUSTOMER
				,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
				v_Incoterm , 'HORS_QUOTA' , myPrix ) ;
                
			cpt=cpt+1 ; 
			end;
            
            #---- copie du cout de transport
            
            ###############EN ATTENTE : INIT de INIT vers FR_COST_PLAN à faire
            
            
  			 Cout_Transport = CellGetN ( C_Cube_Source , v_Current_Phase, v_Periode , v_Sales_Org , v_Distrib_Channel , v_MATERIAL_PLAN , v_CUSTOMER, v_MAT_FREIGHT_GROUP ,v_SHIP_POINT, 'N/A_SHIP_PLANT', 'N/A_PROD_PLANT', 'N/A_VENDOR','FR_COST_UNIT' ) ;
 			CellputN (ROUNDP(Cout_Transport * vtaux,3) , C_Cube_Cible , p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel  , myUnit , v_Sales_Group ,v_CUSTOMER
 				,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
 				v_Incoterm , 'HORS_QUOTA' , 'FR_COST_UNIT') ;

####  VRT : Ajout d'un nouvel indicateur cout approche  ####
# Récupération du cout dans le cube SLS_COUT_APPROCHE * volume

nCtApp = CellGetN ( sCubeCtApp , v_Periode , v_SHIP_POINT , 'Cout_Approche' ) ;


IF ( v_FR_COST_PLAN_IND @= 'SLS_VOL' ) ;
  nVol = Valeur ;
ENDIF ;

nCalcul = nCtApp * nVol ;
#nUnit = nCalcul \ nVol ;


CellputN ( nCalcul  , C_Cube_Cible , p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel  , myUnit , v_Sales_Group ,v_CUSTOMER
 				,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
 				v_Incoterm , 'HORS_QUOTA' , 'COUT_APPROCHE') ;

CellputN ( ROUNDP(nCtApp  * vtaux,3)  , C_Cube_Cible , p_PHASE_REP , v_Periode , v_Sales_Org , v_Distrib_Channel  , myUnit , v_Sales_Group ,v_CUSTOMER
 				,v_MATERIAL_PLAN ,v_Payer , v_SoldeTO , v_SHIP_POINT , v_SHIP_PLANT , v_PROD_PLANT , v_VENDOR , v_MAT_FREIGHT_GROUP ,
 				v_Incoterm , 'HORS_QUOTA' , 'COUT_APPROCHE_UNIT') ;


####    FIN VRT   #####	



    	EndIf;
    
EndIf;




i=i+1;
end;










#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#modif EMO le 19/11/2019 : copie des périodes réelles depuis CHA_SAP pour éviter les écarts
ExecuteProcess('SLS_MASTER_COP_CUB_SLS_REPORTING_CUB_SLS_CHA_SAP', 'P_PHASE', P_Phase_Rep);

#copie directement cette phase dans Cha_Sap, afin de pouvoir la réutiliser à l'initialisation lorsque lancé par le CDG
#P = 0 => CDG
If(P_Logistics = 0);
	ExecuteProcess('SLS_COP_CUB_SLS_CHA_SAP_CUB_SLS_REPORTING', 'P_PHASE_SOURCE', P_PHASE_REP, 'P_SALES_ORG', P_Sales_Org, 'P_DISTRIB', P_Distrib_Channel);
EndIf;

#====================================#
#   Activation de la consignation    #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion