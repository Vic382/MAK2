#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


###############################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   18/10/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :    Elisabeth MOUNIER                                                                                                #
#                                                                                                                                                   #
# Action : Processus de calcul de la moyenne des 6 mois               		       	     #
#									      #
#   Modifié le 20/03/2019 par Elisabeth Mounier
# Action : Adapter le process à la nouvelle modélisation : Calcul de la moyenne des 6 mois dans le cube SLS_INIT.
# Phase source et phase cible identiques car le réel est copié avant le premier mois de simulation.
# on garde un paramètre car choix entre 'Current Phase' et 'Current Rolling Forecast'
#################################################################



#====================================#
#             Déclaration des variables                   #
#====================================#

Volume_F = 0;

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_INIT';
C_Cube_Cible = 'SLS_INIT';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_MATERIAL = 'SLS_MATERIAL_PLAN';
D_CUSTOMER = 'SLS_CUSTOMER';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_INIT_IND='SLS_INIT_IND';


#--------------------Elements--------------------#

e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#Vider le 'Message_Echec'
CellPutS('', C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'Message_Echec', 'Comment');


#Récupérer le premier mois de simulation en fonction de la phase budgétaire cible
vFirst_Simulation_Month = ATTRS (D_PHASE, P_PHASE, 'First simulation month'); 

#Si l'attribut n'est pas rempli : stop le processus
If( vFirst_Simulation_Month @= '' );
	e_Error_Prolog = 1;
	e_Message_Prolog = 'L''attribut First simulation month est vide dans la dimension '|D_PHASE; 
	CellPutS(e_Message_Prolog, C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'Message_Echec', 'Comment');
	
EndIf;

#--------------------Interruption du processus--------------------#
IF(e_Error_Prolog <> 0);
	itemReject(e_Message_Prolog);
ENDIF;


#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;


DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
subsetdestroy(D_PHASE,subset_erase);
subsetdestroy(D_PERIOD,subset_erase);


#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE,subset_erase);
SubsetElementInsert(D_PHASE, subset_erase, P_PHASE, 1);

#D_PERIOD
subsetcreate(D_PERIOD,subset_erase);
SubsetElementInsert(D_PERIOD, subset_erase, '6_M_AVG', 1);


#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
subsetdestroy(D_PHASE,subset_erase);
subsetdestroy(D_PERIOD,subset_erase);


#=========================================#
#Initialisation de la vue à copier/vue source#
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_INIT_IND,subset_copy);
subsetdestroy(D_PERIOD,'subset_elem_fin');
subsetdestroy(D_DISTRIB_CHANNEL,subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
subsetcreate(D_PHASE,subset_copy);
SubsetElementInsert(D_PHASE, subset_copy,P_PHASE, 1);


#D_PERIOD
subsetcreate(D_PERIOD,subset_copy);

Index_First_sim_month = ATTRS(D_PERIOD, vFirst_Simulation_Month, 'Index');


#subset des level 0
SubsetCreateByMDX('subset_elem_fin', '{{[1_G_PERIOD].[N/A PERIOD]}, {TM1FILTERBYLEVEL( {TM1SUBSETALL( [1_G_PERIOD] )}, 0)}}');
SubsetElementDelete(D_PERIOD, 'subset_elem_fin',1);

#récupérer l'index de vFirst_simulation_month dans le subset_elem_fin

elem = '';


cpt_begin = SubsetElementGetIndex(D_PERIOD, 'subset_elem_fin', vFirst_Simulation_Month, 1);
cpt_end =  cpt_begin - 6;


while( cpt_begin > cpt_end);
	elem = SubsetGetElementName(D_PERIOD, 'subset_elem_fin', cpt_begin - 1);
	SubsetElementInsert(D_PERIOD, subset_copy, elem, 1);
	cpt_begin = cpt_begin - 1;
End;


#D_INDICATEUR
SubsetCreateByMDX(subset_copy, '{{[SLS_INIT_IND].[SLS_VOL]}, {TM1FILTERBYLEVEL( {DESCENDANTS([SLS_INIT_IND].[SLS_VOL])}, 0)}}');
SubsetElementDelete(D_INIT_IND, subset_copy,1);

#D_DISTRIB_CHANNEL
#cette moyenne concerne seulement le Retail (code 10)

subsetcreate(D_DISTRIB_CHANNEL,subset_copy);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy,'10', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_INIT_IND,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);



#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy ;


#endregion
#region Data
#CellPutN(0, C_Cube_Source, P_PHASE, 'N/A_PERIOD', vSales_Org, vDistrib, vVolume_Unit, vShipTo, vPayer, vSoldTo, vMaterial, vSales_Group, vVendor, vProd_Plant, vShip_Plant, vShip_Point, vIncoterm, vIndicateur);

Volume = CellGetN(C_Cube_Source, P_PHASE, vPeriod, vSales_Org, vDistrib, vVol_Unit, vMaterial_Plan, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateur);
vol= Volume/6;
CellIncrementN(vol, C_Cube_Cible, P_PHASE,'6_M_AVG', vSales_Org, vDistrib, vVol_Unit,vMaterial_Plan, vCustomer, vShip_Point, vShip_Plant, vProd_Plant, vVendor, vIndicateur);
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

ViewDestroy(C_Cube_Source,view_copy);
subsetdestroy(D_PHASE, subset_copy);
subsetdestroy(D_PERIOD, subset_copy);
subsetdestroy(D_INIT_IND,subset_copy);
subsetdestroy(D_PERIOD,'subset_elem_fin');
subsetdestroy(D_DISTRIB_CHANNEL,subset_copy);

#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion