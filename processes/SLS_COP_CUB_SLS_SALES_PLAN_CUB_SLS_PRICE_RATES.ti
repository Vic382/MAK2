#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****



################################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   09/11/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :    Elisabeth MOUNIER                                                                                                #
#                                                                                                                                                   #
# Action : Processus de copie des conditions commerciales  'RPP', 'CPV', 'Promo'		     #
#	 dans le cube desprévisions de vente 					      #
#					                			      #
#     Modifié le 02/04/2019 par Elisabeth Mounier
#	Action : adapter le process aux nouveaux cubes Price et Sales Plan                                                                                                                                              #
#################################################################
#Spécifique B2B BOULPAT et Retail RHF

#====================================#
#             Déclaration des variables                   #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_SALES_PLAN';
C_Cube_Cible = 'SLS_SALES_PLAN';
C_Cube_Price = 'SLS_PRICE'; 
C_Cube_Select = 'zSELECT'; 
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_PRICE_IND='SLS_PRICE_IND';

D_CURRENCY = '1_G_CURRENCY';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_SALES_PLAN_IND = 'SLS_SALES_PLAN_IND';


#--------------------Elements--------------------#
e_Message_Prolog = '';



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#-------------------- Elements --------------------#

P_PHASE = CellGetS(C_Cube_Select, vClient, 'Current Phase');
P_SALES_GROUP = CellGetS(C_Cube_Select, vClient, 'Sales Group');

If(P_SALES_GROUP @= '');
	P_SALES_GROUP = 'TOTAL_SALES_GROUP';
EndIf;


DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE,subset_erase);
Subsetdestroy(D_SALES_GROUP,subset_erase);
Subsetdestroy(D_SALES_PLAN_IND,subset_erase);
Subsetdestroy(D_CUSTOMER,subset_erase);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_erase);
Subsetdestroy(D_MATERIAL_PLAN,subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE,subset_erase);
SubsetElementInsert(D_PHASE, subset_erase, P_PHASE, 1);

#D_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_erase);
SubsetElementInsert(D_SALES_GROUP, subset_erase, P_SALES_GROUP, 1);

#D_DISTRIB_CHANNEL
subsetcreate(D_DISTRIB_CHANNEL,subset_erase);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_erase, '10', 1);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_erase, '20', 1);

#D_CUSTOMER
MDX_CUSTOMER = '{{[SLS_CUSTOMER].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL( {DESCENDANTS( [SLS_CUSTOMER].[IC1 - E00070] )}, 0)}, {TM1FILTERBYLEVEL( {DESCENDANTS( [SLS_CUSTOMER].[IC1 - E00095] )}, 0)}}';
SubsetCreateByMDX(subset_erase, MDX_CUSTOMER);
SubsetElementDelete( D_CUSTOMER, subset_erase, 1);

#D_MATERIAL_PLAN
MDX_MATERIAL_PLAN = '{{[SLS_MATERIAL_PLAN].[TOTAL_PLANNING_MATERIAL]},{TM1FILTERBYLEVEL( {DESCENDANTS([SLS_MATERIAL_PLAN].[Sugar])}, 0)}}';
SubsetCreateByMDX(subset_erase, MDX_MATERIAL_PLAN);
SubsetElementDelete( D_MATERIAL_PLAN, subset_erase, 1);


#D_SALES_PLAN_IND
subsetcreate(D_SALES_PLAN_IND,subset_erase);
SubsetElementInsert(D_SALES_PLAN_IND, subset_erase, 'PROMO_RATE', 1);
SubsetElementInsert(D_SALES_PLAN_IND, subset_erase, 'RPP_PER', 1);
SubsetElementInsert(D_SALES_PLAN_IND, subset_erase, 'CPV_PER', 1);
SubsetElementInsert(D_SALES_PLAN_IND, subset_erase, 'PROMO_UNIT', 1);
SubsetElementInsert(D_SALES_PLAN_IND, subset_erase, 'RPP_UNIT', 1);
SubsetElementInsert(D_SALES_PLAN_IND, subset_erase, 'CPV_UNIT', 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_GROUP,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD,'Prev Periods');
ViewSubsetAssign(C_Cube_Cible,view_erase, D_SALES_PLAN_IND,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_CUSTOMER,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_DISTRIB_CHANNEL,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_MATERIAL_PLAN,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE,subset_erase);
Subsetdestroy(D_SALES_GROUP,subset_erase);
Subsetdestroy(D_SALES_PLAN_IND,subset_erase);
Subsetdestroy(D_CUSTOMER,subset_erase);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_erase);
Subsetdestroy(D_MATERIAL_PLAN,subset_erase);

#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

# on veut avoir accès aux consos de la dim Customer
# mais la vue doit commencer aux éléments ShipTO
# donc on ne prend pas les consos dans la vue source, on accèdera au parent depuis le ShipTO

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_PHASE, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_SALES_PLAN_IND, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_CURRENCY, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);


#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
subsetcreate(D_PHASE,subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, P_PHASE, 1);

#D_SALES_GROUP
subsetcreate(D_SALES_GROUP,subset_copy);
SubsetElementInsert(D_SALES_GROUP, subset_copy, P_SALES_GROUP, 1);

#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({TM1SUBSETALL([1_G_SALES_ORG])},0)}}';
SubsetCreateByMDX(subset_copy, MDX_SALES_ORG);
SubsetElementDelete( D_SALES_ORG, subset_copy, 1);

#D_MATERIAL_PLAN
MDX_MATERIAL_PLAN = '{{[SLS_MATERIAL_PLAN].[TOTAL_PLANNING_MATERIAL]},{TM1FILTERBYLEVEL( {DESCENDANTS([SLS_MATERIAL_PLAN].[Sugar])}, 0)}}';
SubsetCreateByMDX(subset_copy, MDX_MATERIAL_PLAN);
SubsetElementDelete( D_MATERIAL_PLAN, subset_copy, 1);

#D_CUSTOMER
MDX_CUSTOMER = '{{[SLS_CUSTOMER].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL( {DESCENDANTS( [SLS_CUSTOMER].[IC1 - E00070] )}, 0)}, {TM1FILTERBYLEVEL( {DESCENDANTS( [SLS_CUSTOMER].[IC1 - E00095] )}, 0)}}';
SubsetCreateByMDX(subset_copy, MDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_copy, 1);

#D_SALES_PLAN_IND
MDX_SALES_PLAN_IND = '{{[SLS_SALES_PLAN_IND].[SLS_VOL]},{FILTER( {TM1SUBSETALL( [SLS_SALES_PLAN_IND] )}, [SLS_SALES_PLAN_IND].[Type_Indicateur] = "Volume")}}';
SubsetCreateByMDX(subset_copy, MDX_SALES_PLAN_IND);
SubsetElementDelete(D_SALES_PLAN_IND, subset_copy, 1);

#D_DISTRIB_CHANNEL
subsetcreate(D_DISTRIB_CHANNEL,subset_copy);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy, '10', 1);
SubsetElementInsert(D_DISTRIB_CHANNEL, subset_copy, '20', 1);

#D_CURRENCY
subsetcreate(D_CURRENCY,subset_copy);
SubsetElementInsert(D_CURRENCY, subset_copy, 'EUR', 1);

#D_VOLUME_UNIT
subsetcreate(D_VOLUME_UNIT,subset_copy);
SubsetElementInsert(D_VOLUME_UNIT, subset_copy, 'TO', 1);


#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PHASE,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_GROUP,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_SALES_PLAN_IND,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_CURRENCY,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_VOLUME_UNIT,subset_copy);
ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD,'Prev Periods');
ViewSubsetAssign(C_Cube_Source,view_copy, D_MATERIAL_PLAN,subset_copy);


#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy;


#endregion
#region Data
############################################################################
###				   	PROMO					          ####
#############################################################################

#SI PM/ShipTo vide => voir PM/IC3, sinon etc...
#Unit Price en EUR/TO (car pour Retail RHF et Sucre boulpat seulement activité sucre)
#à copier sur l'indicateur PROMO_RATE

#récupérer l'indicateur du cube SLS_PRICE (attention notre vue source est celle de sls_plan)

#CAS 1 : check si des prix sont renseignés à la maille PM/ShipTo


Val_Price_Promo = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, vSales_Group, 'PROMO_PER');

#Si PM/shipTo vide
If(Val_Price_Promo <> 0);

	Val_Promo = Val_Price_Promo; 

#Sinon, on check à la maille PM/IC3
#plus précisément sur le N/A_IC3
Else;

	vIC3 = ELPAR(D_CUSTOMER, vCustomer, 1);
	Val_IC3_Promo = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC3, vMaterial_Plan, vSales_Group, 'PROMO_PER');
	

	If(Val_IC3_Promo <> 0);
		Val_Promo = Val_IC3_Promo;

	#Si PM/IC3 non renseigné, on cher=ck à la maille PM/NA_IC2
	Else;

		vIC2 = ELPAR(D_CUSTOMER, vIC3, 1);
		Val_IC2_Promo = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC2, vMaterial_Plan, vSales_Group, 'PROMO_PER');
		
		
		If(Val_IC2_Promo <> 0);

			Val_Promo = Val_IC2_Promo;

		#Si PM/IC2 non renseigné, on check à la maille PM/NA_IC1
		Else;

			vIC1 = ELPAR(D_CUSTOMER, vIC2, 1);
			Val_IC1_Promo = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC1, vMaterial_Plan, vSales_Group, 'PROMO_PER');
			
			Val_Promo = Val_IC1_Promo;

		EndIf;
	EndIf;


EndIf;

#on a seulement besoin de copier sur la période lue car pas besoin du prix s'il n'y a pas de volume
CellPutN(Val_Promo, C_Cube_Cible, vPhase, vPeriod, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, vMaterial_Plan, vSales_Group, 'PROMO_RATE');

############################################################################
###				   	CPV					          ####
#############################################################################


#SI PM/ShipTo vide => voir PM/IC3, sinon etc...
#Unit Price en EUR/TO (car pour Retail GMS et Sucre boulpat seulement activité sucre)
#à copier sur l'indicateur Base_Unit

#récupérer l'indicateur du cube SLS_PRICE (attention notre vue source est celle de sls_plan)

#CAS 1 : check si des prix sont renseignés à la maille PM/ShipTo


Val_Price_CPV = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, vSales_Group, 'CPV_PER');

#Si PM/shipTo vide
If(Val_Price_CPV <> 0);

	Val_CPV = Val_Price_CPV; 
#     Asciioutput('..\tests\tickets_rates.csv', 'Ship to Rempli',NumberToString(Val_CPV),NumberToString(Val_Price_CPV),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, vSales_Group, 'CPV_PER');


#Sinon, on check à la maille PM/IC3
#plus précisément sur le N/A_IC3
Else;

	vIC3 = ELPAR(D_CUSTOMER, vCustomer, 1);
	Val_IC3_CPV = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC3, vMaterial_Plan, vSales_Group, 'CPV_PER');
	

	If(Val_IC3_CPV <> 0);
		Val_CPV = Val_IC3_CPV;

# 		Asciioutput('..\tests\tickets_rates.csv', 'IC3 rempli',NumberToString(Val_CPV),NumberToString(Val_IC3_CPV),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC3, vMaterial_Plan, vSales_Group, 'CPV_PER');

	#Si PM/IC3 non renseigné, on cher=ck à la maille PM/NA_IC2
	Else;

		vIC2 = ELPAR(D_CUSTOMER, vIC3, 1);
		Val_IC2_CPV = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC2, vMaterial_Plan, vSales_Group, 'CPV_PER');
		
		
		If(Val_IC2_CPV <> 0);

			Val_CPV = Val_IC2_CPV;
# 			Asciioutput('..\tests\tickets_rates.csv', 'IC2 rempli',NumberToString(Val_CPV),NumberToString(Val_IC2_CPV),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC2, vMaterial_Plan, vSales_Group, 'CPV_PER');

		#Si PM/IC2 non renseigné, on check à la maille PM/NA_IC1
		Else;

			vIC1 = ELPAR(D_CUSTOMER, vIC2, 1);
			Val_IC1_CPV = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC1, vMaterial_Plan, vSales_Group, 'CPV_PER');
			
			Val_CPV = Val_IC1_CPV;
#             Asciioutput('..\tests\tickets_rates.csv', 'IC1 rempli',NumberToString(Val_CPV),NumberToString(Val_IC1_CPV),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC1, vMaterial_Plan, vSales_Group, 'CPV_PER');


		EndIf;
	EndIf;


EndIf;

#on a seulement besoin de copier sur la période lue car pas besoin du prix s'il n'y a pas de volume
CellPutN(Val_CPV, C_Cube_Cible, vPhase, vPeriod, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, vMaterial_Plan, vSales_Group, 'CPV_PER');
# AsciiOutput('..\tests\tickets_rates.csv','CellPut CPV',NumberToString(Val_CPV), C_Cube_Cible, vPhase, vPeriod, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, vMaterial_Plan, vSales_Group, 'CPV_PER');


############################################################################
###				   	RPP					          ####
#############################################################################


#SI PM/ShipTo vide => voir PM/IC3, sinon etc...
#Unit Price en EUR/TO (car pour Retail GMS et Sucre boulpat seulement activité sucre)
#à copier sur l'indicateur Base_Unit

#récupérer l'indicateur du cube SLS_PRICE (attention notre vue source est celle de sls_plan)

#CAS 1 : check si des prix sont renseignés à la maille PM/ShipTo


Val_Price_RPP = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, vSales_Group, 'RPP_PER');

#Si PM/shipTo vide
If(Val_Price_RPP <> 0);

	Val_RPP = Val_Price_RPP; 
#     Asciioutput('..\tests\tickets_rates.csv', 'Ship to Rempli',NumberToString(Val_RPP),NumberToString(Val_Price_RPP),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vCustomer, vMaterial_Plan, vSales_Group, 'RPP_PER');


#Sinon, on check à la maille PM/IC3
#plus précisément sur le N/A_IC3
Else;

	vIC3 = ELPAR(D_CUSTOMER, vCustomer, 1);
	Val_IC3_RPP = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC3, vMaterial_Plan, vSales_Group, 'RPP_PER');
	

	If(Val_IC3_RPP <> 0);
		Val_RPP = Val_IC3_RPP;
#         Asciioutput('..\tests\tickets_rates.csv', 'IC3 Rempli',NumberToString(Val_RPP),NumberToString(Val_IC3_RPP),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC3, vMaterial_Plan, vSales_Group, 'RPP_PER');

	#Si PM/IC3 non renseigné, on cher=ck à la maille PM/NA_IC2
	Else;

		vIC2 = ELPAR(D_CUSTOMER, vIC3, 1);
		Val_IC2_RPP = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC2, vMaterial_Plan, vSales_Group, 'RPP_PER');
		
		
		If(Val_IC2_RPP <> 0);

			Val_RPP = Val_IC2_RPP;
#             Asciioutput('..\tests\tickets_rates.csv', 'IC2 Rempli',NumberToString(Val_RPP),NumberToString(Val_IC2_RPP),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC2, vMaterial_Plan, vSales_Group, 'RPP_PER');


		#Si PM/IC2 non renseigné, on check à la maille PM/NA_IC1
		Else;

			vIC1 = ELPAR(D_CUSTOMER, vIC2, 1);
			Val_IC1_RPP = CellGetN(C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC1, vMaterial_Plan, vSales_Group, 'RPP_PER');
		
			Val_RPP = Val_IC1_RPP;
#             Asciioutput('..\tests\tickets_rates.csv', 'IC1 Rempli',NumberToString(Val_RPP),NumberToString(Val_IC1_RPP),C_Cube_Price, vPhase, vPeriod, vSales_Org, vDistrib_Channel, vIC1, vMaterial_Plan, vSales_Group, 'RPP_PER');

		EndIf;
	EndIf;


EndIf;

#on a seulement besoin de copier sur la période lue car pas besoin du prix s'il n'y a pas de volume
# AsciiOutput('..\tests\tickets_rates.csv','CellPut RPP',NumberToString(Val_RPP), C_Cube_Cible, vPhase, vPeriod, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, vMaterial_Plan, vSales_Group, 'RPP_PER');
CellPutN(Val_RPP, C_Cube_Cible, vPhase, vPeriod, vSales_Org, vDistrib_Channel, 'EUR', 'TO', vCustomer, vMaterial_Plan, vSales_Group, 'RPP_PER');
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy(D_PHASE, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_SALES_PLAN_IND, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_CURRENCY, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);


#====================================#
#      Activation de la consignation  #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion