#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


#################################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   29/08/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :    Anne BESNARD                                                                                                      #
#                                                                                                                                                   #
# Action : Processus de chargement du cube SLS_DEAL         
#
# Modifié le 19/03/2019 par ELisabeth Mounier   
# Action : alimentation de la nouvelle dim SLS_DEAL_ITEM + adapter le chargement au nouveau cube (dim Item)
#################################################################

SetInputCharacterSet('TM1CS_UTF8');



#====================================#
#         Déclaration des variables  #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Cible = 'SLS_DEAL';
C_Currency_Rate = 'SLS_CURRENCY_RATE';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

#--------------------Dimensions--------------------#

D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_DEAL_NB = 'SLS_DEAL_NB';
D_DEAL_STATUS = 'SLS_DEAL_STATUS';
D_DEAL_ITEM = 'SLS_DEAL_ITEM';
D_DEAL_IND = 'SLS_DEAL_IND';

#----------------------Eléments---------------------------#
elem_phase = 'ACT';


Activate_Security = 'SLS_CAL_DIM_1_G_PERIOD_SECURITY_READ';
Desactivate_Security = 'SLS_CAL_DIM_1_G_PERIOD_SECURITY_WRITE';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

DatasourceASCIIDecimalSeparator=',';
DatasourceASCIIThousandSeparator=' ';

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;


#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible, View_erase);
SubsetDestroy(D_SALES_ORG, Subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, Subset_erase);
SubsetDestroy(D_CUSTOMER, Subset_erase);
SubsetDestroy(D_MATERIAL, Subset_erase);
SubsetDestroy(D_SALES_GROUP, Subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

# D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({TM1SUBSETALL( [ 1_G_SALES_ORG ] ) },0)}}';
SubsetCreateByMDX(Subset_erase, MDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_erase,1);

# D_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{{[1_G_DISTRIB_CHANNEL].[TOTAL_DISTRIB_CHANNEL]},{TM1FILTERBYLEVEL({TM1SUBSETALL( [ 1_G_DISTRIB_CHANNEL ] ) },0)}}';
SubsetCreateByMDX(Subset_erase, MDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_erase,1);

# D_CUSTOMER
MDX_CUSTOMER = '{{[SLS_CUSTOMER].[TOTAL_CUSTOMER]},{TM1FILTERBYLEVEL({TM1SUBSETALL( [ SLS_CUSTOMER ] ) },0)}}';
SubsetCreateByMDX(Subset_erase, MDX_CUSTOMER);
SubsetElementDelete(D_CUSTOMER, subset_erase,1);

# D_MATERIAL
MDX_MATERIAL = '{{[1_G_MATERIAL].[TOTAL_MATERIAL]},{TM1FILTERBYLEVEL({TM1SUBSETALL( [ 1_G_MATERIAL ] ) },0)}}';
SubsetCreateByMDX(Subset_erase, MDX_MATERIAL);
SubsetElementDelete(D_MATERIAL, subset_erase,1);

# D_SALES_GROUP
MDX_SALES_GROUP = '{{[SLS_SALES_GROUP].[TOTAL_SALES_GROUP]},{TM1FILTERBYLEVEL({TM1SUBSETALL( [SLS_SALES_GROUP ] ) },0)}}';
SubsetCreateByMDX(Subset_erase, MDX_SALES_GROUP);
SubsetElementDelete(D_SALES_GROUP, subset_erase,1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible, view_erase, D_SALES_ORG, Subset_erase);
ViewSubsetAssign(C_Cube_Cible, view_erase, D_DISTRIB_CHANNEL, Subset_erase);
ViewSubsetAssign(C_Cube_Cible, view_erase, D_CUSTOMER, Subset_erase);
ViewSubsetAssign(C_Cube_Cible, view_erase, D_MATERIAL, Subset_erase);
ViewSubsetAssign(C_Cube_Cible, view_erase, D_SALES_GROUP, Subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,0);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 0);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible, View_erase);
SubsetDestroy(D_SALES_ORG, Subset_erase);
SubsetDestroy(D_DISTRIB_CHANNEL, Subset_erase);
SubsetDestroy(D_CUSTOMER, Subset_erase);
SubsetDestroy(D_MATERIAL, Subset_erase);
SubsetDestroy(D_SALES_GROUP, Subset_erase);

#--------------------Sources de données--------------------#
DatasourceNameForServer = CellGetS( C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'DATASOURCE_NAME_FOR_SERVER', 'Comment');

#uniquement pour vider Contrat,  à mettre en commentaire.
#DimensionDeleteAllElements(D_DEAL_NB);

If( DIMIX( D_DEAL_NB, 'TOTAL_DEAL_NB') = 0);
	DimensionElementInsert(D_DEAL_NB, '', 'TOTAL_DEAL_NB', 'N');
EndIf;


If( DIMIX( D_DEAL_ITEM, 'TOTAL_DEAL_ITEM') = 0);
	DimensionElementInsert(D_DEAL_ITEM, '', 'TOTAL_DEAL_ITEM', 'N');
EndIf;


#Désactivation de la sécurité sur la dim Période (on repasse tous les mois en WRITE)
#ExecuteProcess( Desactivate_Security);
#endregion
#region Metadata
#===============================================#
#          Chargement de la dimension DEAL_NB   #
#===============================================#

If( DIMIX(D_DEAL_NB, DEAL_NB) = 0);
	DimensionElementInsert(D_DEAL_NB, '', DEAL_NB, 'N');
EndIf;

#Création de la hiérarchie Tot > Deal_nb
DimensionElementComponentAdd(D_DEAL_NB, 'TOTAL_DEAL_NB', DEAL_NB, 1);

#===============================================#
#          Chargement de la dimension DEAL_ITEM #
#===============================================#

If( DIMIX(D_DEAL_ITEM, DEAL_ITEM) = 0);
	DimensionElementInsert(D_DEAL_ITEM, '', DEAL_ITEM, 'N');
EndIf;

#Création de la hiérarchie Tot > Deal_Item
DimensionElementComponentAdd(D_DEAL_ITEM, 'TOTAL_DEAL_ITEM', DEAL_ITEM, 1);
#endregion
#region Data
#===================================#
#        Chargement du cube DEAL    #
#===================================#



LONGUEUR_SHIP_TO = LONG(SHIP_TO);
SHIP_TO_F =SUBST( SHIP_TO, LONGUEUR_SHIP_TO - 5, LONGUEUR_SHIP_TO);

MAT_F = MAT|'.';


##################################A SUPPRIMER QUAND ON AURA LES DONNES DE PROD##############################################

If(DIMIX(D_CUSTOMER, SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION) = 0);
	asciioutput('..\Rejects\ecart_customer_deal.csv', SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, TAR_QTY_SLS_UNIT ,TAR_QTY_BASE ,REM_QTY_SLS_UNIT, REM_QTY_BASE, PRICE_IN_BASE_UNIT, PRICE, SAL_ORG, PRICE_CURR);
	ItemSkip;
	#ItemReject(D_CUSTOMER | ' - '| SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION | ' - ' | NUmberToString(DIMIX(D_CUSTOMER, SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION)));
EndIf; 

If(DIMIX(D_SALES_GROUP, SAL_GRP) = 0);
	#ItemSkip;
	#ItemReject(D_SALES_GROUP | ' - ' | SAL_GRP | ' - ' | NUmberToString(DIMIX(D_SALES_GROUP, SAL_GRP)));
EndIf; 

#########################################################################################################################



#Si le sales group du flux n'existe pas dans le référentiel, charger sur l'attribut du client
Sales_Group_client = ATTRS(D_CUSTOMER, SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, 'Sales Group');
If( DIMIX(D_SALES_GROUP, SAL_GRP) = 0);
	SAL_GRP = Sales_Group_client;
EndIf;

	#Invoice Volume Unit
	CellPutS( INV_VOL_UNIT, C_Cube_Cible, SAL_ORG, DISTRIB_CH, SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'INV_VOL_UNIT');

	#Conversion Volume Unit
	CellPutS( CONV_VOL_UNIT, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'CONV_VOL_UNIT');

	#Incoterm
	CellPutS( INCO, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'INCO');

	#Incoterm 2
	CellPutS( INCO_2, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'INCO_2');

	#Valid-from date
	CellPutS( BEG_DATE, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'BEG_DATE');

	#Valid-to date
	CellPutS( END_DATE, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'END_DATE');

	#Deal Indexing
	CellPutS( DEAL_IDX, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'DEAL_IDX');

	#Sales Document Type
	CellPutS( SLS_DOC_TYPE, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'SLS_DOC_TYPE');

	#Sold-to-party
	CellPutS( SOLD_TO, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'SOLD_TO');

	#Terms of Payment Key
	CellPutS( PAY_KEY, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'PAY_KEY');

	#Shipping Conditions
	CellPutS( SHIP_COND, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'SHIP_COND');

	#Shipping Plant
	CellPutS( SHIP_PLANT, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'SHIP_PLANT');

	#Shipping Point
	CellPutS( SHIP_PT, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'SHIP_PT');

	#Vendor
	CellPutS( VENDOR, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'VENDOR');

	#Price Unit
	CellPutS( PRICE_UNIT, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'PRICE_UNIT');

	#Price_Currency
	CellPutS( PRICE_CURR, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'PRICE_CURR');

	#Sales_Currency
	CellPutS( CURR, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'INV_CUR');



	#Target quantity in Base Unit
	CellIncrementN( StringToNumber(TAR_QTY_BASE), C_Cube_Cible, SAL_ORG, DISTRIB_CH,
		SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'TAR_QTY_BASE');

	#Target quantity in sales units
	CellIncrementN( StringToNumber(TAR_QTY_SLS_UNIT), C_Cube_Cible, SAL_ORG, DISTRIB_CH,
		SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'TAR_QTY_SLS_UNIT');

	#Remaining Quantity in Base Unit

	CellIncrementN( StringToNumber(REM_QTY_BASE), C_Cube_Cible, SAL_ORG, DISTRIB_CH, 
		SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'REM_QTY_BASE');

	#Remaining Quantity in sales unit

	CellIncrementN( StringToNumber(REM_QTY_SLS_UNIT), C_Cube_Cible, SAL_ORG, DISTRIB_CH,
		SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'REM_QTY_SLS_UNIT');

	#Price in Base Unit
	#ex : USD/HLAP

	CellPutN(StringToNumber( PRICE_IN_BASE_UNIT), C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'PRICE_IN_BASE_UNIT');

	
           
	#Price 
	#ex : USD/HL2
	New_PRICE=StringToNumberEx(PRICE, ',', '');
	CellPutN(New_PRICE, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
	SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'PRICE');



	###### Conversion du PRICE_IN_BASE_UNIT en PRICE_IN_EUR_BASE_UNIT ########
	#grâce aux taux de change à récupérer dans le cube SLS_CURRENCY_RATE
	
If(PRICE_CURR @<> '');
		Cur_Rate = CellGetN(C_Currency_Rate, elem_phase, SAL_ORG, PRICE_CURR, 'EUR');
		Num_PRICE_IN_EUR_BASE_UNIT = StringToNumberEx(PRICE_IN_BASE_UNIT, ',', '') * Cur_Rate;

		# de USD/HLAP vers EUR/HLAP
		CellPutN( Num_PRICE_IN_EUR_BASE_UNIT, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
		SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM, 'PRICE_IN_EUR_BASE_UNIT');


		###### Conversion du PRICE en PRICE_IN_EURO_SLS_UNIT ########
		#puis de USD/HL2 vers EUR/HL2

		Num_PRICE_IN_EURO_SLS_UNIT = New_PRICE * Cur_Rate;
		CellPutN(Num_PRICE_IN_EURO_SLS_UNIT, C_Cube_Cible, SAL_ORG, DISTRIB_CH,  
		SHIP_TO_F | '_' | SAL_ORG | DISTRIB_CH | DIVISION, MAT_F, SAL_GRP,  DEAL_NB, DEAL_STATUS, DEAL_ITEM,  'PRICE_IN_EURO_SLS_UNIT');

EndIf;







#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#Réactivation de la sécurité sur la dim Période (tous les mois réalisés en READ)
#ExecuteProcess( Activate_Security);


#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);
#endregion