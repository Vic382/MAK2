#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

################################################################
#                 DESCRIPTION DU PROCESSUS                     #
#                                                              #
# Date :   11/04/2019                                          #
#                                                              #
# Fait par :   Anne BESNARD                                    #
#                                                              #
# Action : Sécurité sur les indicateurs de assign		       #
#															   #
#                                                              #
################################################################

#====================================#
#     Déclaration des variables      #
#====================================#

#--------------------Cubes--------------------#
C_ElementSecurity_Assign_Ind = '}ElementSecurity_SLS_ASSIGN_IND';

#--------------------Dimensions--------------------#
D_ASsign_Ind = 'SLS_ASSIGN_IND';
D_Groups = '}Groups';

#--------------------Elements--------------------#



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


#vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_temp = 'z_temp_' | vUSER |'_' | vPRO_NAME;

#=========================================#
#   Initialisation du subset à supprimer  #
#=========================================#

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Assign_Ind, view_erase );
SubsetDestroy(D_Assign_Ind, subset_erase);
SubsetDestroy(D_Groups, subset_erase);

#-----------Création des objets-----------#
#Vue
ViewCreate( C_ElementSecurity_Assign_Ind, view_erase, 1 );

#D_Rep_Ind
MDX = '{TM1SUBSETALL([SLS_ASSIGN_IND])}';
SubsetCreate( D_ASSIGN_IND, subset_erase );
SubsetMDXSet( D_ASsign_Ind, subset_erase, MDX );


#D_Groups
MDX = '{
	{[}Groups].[ADMIN]},
	{[}Groups].[CS]}
}';
SubsetCreatebyMDX( subset_erase, MDX, 1 );
SubsetElementDelete( D_Groups, subset_erase, 1 );

#-----Affectation des sous-ensembles à la vue---#
ViewSubsetAssign(C_ElementSecurity_Assign_Ind, view_erase, D_ASsign_Ind, subset_erase);
ViewSubsetAssign(C_ElementSecurity_Assign_Ind, view_erase, D_Groups, subset_erase);


#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_ElementSecurity_ASsign_Ind, view_erase,1);
ViewSetSkipCalcs(C_ElementSecurity_Assign_Ind,view_erase, 0);
ViewSetSkipZeroes(C_ElementSecurity_ASsign_Ind,view_erase, 0);

#-------définition du subset source-------#
ViewZeroOut( C_ElementSecurity_Assign_Ind, view_erase );

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_ASsign_Ind, view_erase );
SubsetDestroy(D_Assign_Ind, subset_erase);
SubsetDestroy(D_Groups, subset_erase);


#=========================================#
#   Initialisation du subset à copier     #
#=========================================#

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Assign_Ind, view_copy );
SubsetDestroy(D_Assign_Ind, subset_copy);
SubsetDestroy(D_Groups, subset_copy);

#-----------Création des objets-----------#
#Vue
ViewCreate( C_ElementSecurity_Assign_Ind, view_copy, 1 );


#D_Assign_Ind
MDX = '{TM1SUBSETALL([SLS_ASSIGN_IND])}';
SubsetCreate( D_ASSIGN_IND, subset_copy );
SubsetMDXSet( D_ASsign_Ind, subset_copy, MDX );

#D_Groups
MDX = '{
	{[}Groups].[ADMIN]},
	{[}Groups].[CS]}
}';
SubsetCreatebyMDX( subset_copy, MDX, 1 );
SubsetElementDelete( D_Groups, subset_copy, 1 );

#---------------------Affectation des sous-ensembles à la vue---------------------------------#
ViewSubsetAssign(C_ElementSecurity_Assign_Ind, view_copy, D_Assign_Ind, subset_copy);
ViewSubsetAssign(C_ElementSecurity_Assign_Ind, view_copy, D_Groups, subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_ElementSecurity_Assign_Ind, view_copy,1);
ViewSetSkipCalcs(C_ElementSecurity_Assign_Ind,view_copy, 0);
ViewSetSkipZeroes(C_ElementSecurity_Assign_Ind,view_copy, 0);

#-------définition du subset source-------#
DatasourceCubeview = view_copy;

#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

If( DimensionElementPrincipalName(D_ASSIGN_IND,vELEM_ASSIGN_IND) @= 'SLS_VOL');
	CellPutS('READ',C_ElementSecurity_Assign_Ind, vELEM_ASSIGN_IND, vELEM_GROUPS);
Else;
	CellPutS('WRITE',C_ElementSecurity_Assign_Ind, vELEM_ASSIGN_IND, vELEM_GROUPS);
EndIf;


#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Assign_Ind, view_copy );
SubsetDestroy(D_Assign_Ind, subset_copy);
SubsetDestroy(D_Groups, subset_copy);
#endregion