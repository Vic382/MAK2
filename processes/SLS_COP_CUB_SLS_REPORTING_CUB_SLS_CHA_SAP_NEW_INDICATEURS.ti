#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****



##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   14/05/2019                                                        #
#                                                                            #
# Fait par :    Elisabeth Mounier                                            #
#                                                                            #
# Action : Processus de copie du réel vers Reporting.					 #																 #
##############################################################################

#process incrémentant le volume
#appelé en premier dans le master


#===========================================#
#             Déclaration des variables     #
#===========================================#

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_CHA_SAP';
C_Cube_Cible = 'SLS_REPORTING';
C_Convert = 'SLS_VOL_CONVERT';

#--------------------Dimensions--------------------#
D_PHASE = '1_G_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_CUSTOMER = 'SLS_CUSTOMER';
D_MATERIAL = '1_G_MATERIAL';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_CHA_SAP_IND = 'SLS_CHA_SAP_IND';

D_PHASE_REP = '1_G_PHASE_REP';
D_PAYER = 'SLS_PAYER';
D_SOLD_TO = 'SLS_SOLD_TO';
D_MAT_FR_GROUP = 'SLS_MAT_FREIGHT_GROUP';
D_INCOTERM = 'SLS_INCOTERM';
D_QUOTA = 'SLS_Q_HQ';
D_REPORTING_IND = 'SLS_REPORTING_IND';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_VENDOR = 'SLS_VENDOR';
D_PROD_PLANT='SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_SHIP_POINT = 'SLS_SHIP_POINT';

#D_VOLUME_UNIT_IND = 'SLS_VOL_CONVERT_IND';

#--------------------Elements--------------------#
e_Message_Prolog = '';


#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

# vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
# #--------------------- Paramètres -----------#
# #P_PHASE = 'ACT';
# Current_Phase = CellGetS('zSelect', vClient ,'Current Phase');
# Phase_Cap = ATTRS('1_G_CURRENT_PHASE', Current_Phase, 'Caption');

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#permet de réutiliser le subset des périodes qui viennent d'être chargées dans CHA_SAP
process_master = 'SLS_CHA_CUB_SLS_CHA_SAP';
subset_erase_master = 'z_erase_master_' | vUSER |'_' | process_master;


subset_volume_unit = 'subset volume unit' | vUSER |'_' | vPRO_NAME;
Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);

#------------Création d'un subset contenant tous les éléments fins----------
MDX = '{ EXCEPT( {TM1SUBSETALL( [1_G_VOLUME_UNIT] )}, { [1_G_VOLUME_UNIT].[N/A_VOLUME_UNIT] }) }';
SubsetCreatebyMDX(subset_volume_unit, MDX);
#SubsetElementDelete(D_VOLUME_UNIT,subset_volume_unit, 1);

subset_volume_unit_size = SubsetGetsize(D_VOLUME_UNIT, subset_volume_unit );


DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIThousandSeparator='';

#====================================#
#     Désactivation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);


#============================================#
#        Initialisation de la vue à supprimer#
#============================================#

#--------------------Destruction des objets--------------------#
#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE_REP,subset_erase);
#Subsetdestroy(D_MAT_FR_GROUP,subset_erase);
Subsetdestroy(D_REPORTING_IND,subset_erase);
Subsetdestroy(D_PERIOD,subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Cube_Cible,view_erase);

#D_PHASE
subsetcreate(D_PHASE_REP,subset_erase);
SubsetElementInsert(D_PHASE_REP, subset_erase, P_PHASE, 1);

#D_MAT_FR_GROUP
# subsetcreate(D_MAT_FR_GROUP,subset_erase);
# SubsetElementInsert(D_MAT_FR_GROUP, subset_erase, 'N/A_MAT_FR_GROUP', 1);



####   VRT : RAZ des nouveaux indicateurs seulement   ####

# D_REPORTING_IND
IF( SubsetExists( D_REPORTING_IND , subset_erase ) = 1 );
  SubsetDestroy( D_REPORTING_IND , subset_erase );
ENDIF;
SubsetCreate ( D_REPORTING_IND , subset_erase ) ; 
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'MP_STD' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'VAR_COST' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'TRF_COST' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'FULL_COST' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'EBVD' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'VAR_COST_MAR' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'TRF_COST_MAR' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'FULL_COST_MAR' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'MP_STD_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'VAR_COST_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'TRF_COST_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'FULL_COST_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'EBVD_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'VAR_COST_MAR_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'TRF_COST_MAR_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'FULL_COST_MAR_UNIT' , 1 ) ;
SubsetElementInsert ( D_REPORTING_IND , subset_erase , 'COUT_APPROCHE' , 1 ) ;


ViewSubsetAssign ( C_Cube_Cible , view_erase , D_REPORTING_IND , subset_erase ) ; 

####    FIN VRT    #####



#Modif EMO le 19/11/2019 : ce process sert également à copier le réel de Current Phase
MDX_PERIOD = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_PERIOD].[subset_act_cal_fisc_camp]) , 0)}}';
SubsetCreatebyMDX( subset_erase, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_erase, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Cible,view_erase, D_PHASE_REP,subset_erase);
#On copie le réel sur la période qui vient d'être chargée
#On copie le réel sur la période qui vient d'être chargée
If( DimensionElementPrincipalName(D_PHASE, P_PHASE) @= 'ACT');
	ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD, subset_erase_master);
Else; 
	ViewSubsetAssign(C_Cube_Cible,view_erase, D_PERIOD, subset_erase);
EndIf;
#ViewSubsetAssign(C_Cube_Cible,view_erase, D_MAT_FR_GROUP,subset_erase);
ViewSubsetAssign(C_Cube_Cible,view_erase, D_REPORTING_IND,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

#--------------------Suppression des données--------------------#
ViewZeroOut(C_Cube_Cible,view_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Cible,view_erase);
Subsetdestroy(D_PHASE_REP,subset_erase);
#Subsetdestroy(D_MAT_FR_GROUP,subset_erase);
Subsetdestroy(D_REPORTING_IND,subset_erase);
Subsetdestroy(D_PERIOD,subset_erase);

#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy( D_PHASE, subset_copy );
SubsetDestroy( D_CHA_SAP_IND, subset_copy );
SubsetDestroy( D_PERIOD, subset_copy );

#--------------------Création des objets--------------------#

ViewCreate(C_Cube_Source,view_copy);

#D_PHASE
subsetcreate(D_PHASE,subset_copy);
SubsetElementInsert(D_PHASE, subset_copy, 'ACT', 1);

# D_CHA_SAP_IND
#SubsetCreatebyMDX( subset_copy , '{FILTER( {TM1SUBSETALL( ['| D_CHA_SAP_IND |'] )}, ['| D_CHA_SAP_IND |'] .[Type_Indicateur] = "Copy")}') ;
IF( SubsetExists( D_CHA_SAP_IND, subset_copy ) = 1 );
  SubsetDestroy( D_CHA_SAP_IND, subset_copy );
ENDIF;
SubsetCreate ( D_CHA_SAP_IND, subset_copy ) ; 
SubsetElementInsert ( D_CHA_SAP_IND, subset_copy , 'MP_STD' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND, subset_copy , 'VAR_COST' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND, subset_copy , 'TRF_COST' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND, subset_copy , 'FULL_COST' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND, subset_copy , 'EBVD' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND, subset_copy , 'VAR_COST_MAR' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND, subset_copy , 'TRF_COST_MAR' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'FULL_COST_MAR' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'MP_STD_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'VAR_COST_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'TRF_COST_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'FULL_COST_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'EBVD_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'VAR_COST_MAR_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'TRF_COST_MAR_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'FULL_COST_MAR_UNIT' , 1 ) ;
SubsetElementInsert ( D_CHA_SAP_IND , subset_copy , 'COUT_APPROCHE' , 1 ) ;


#Modif EMO le 19/11/2019 : ce process sert également à copier le réel de Current Phase
MDX_PERIOD = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL(DESCENDANTS([1_G_PERIOD].[subset_act_cal_fisc_camp]) , 0)}}';
SubsetCreatebyMDX( subset_copy, MDX_PERIOD);
SubsetElementDelete( D_PERIOD, subset_copy, 1);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Cube_Source,view_copy, D_PHASE, subset_copy);
#On copie le réel sur la période qui vient d'être chargée
If( DimensionElementPrincipalName(D_PHASE, P_PHASE) @= 'ACT');
	ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD, subset_erase_master);
Else;
	ViewSubsetAssign(C_Cube_Source,view_copy, D_PERIOD, subset_copy);
EndIf;
ViewSubsetAssign(C_Cube_Source,view_copy, D_CHA_SAP_IND, subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

# définition de la vue source#

DatasourceCubeview= view_copy ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

nMaj = CellIsUpdateable ( C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'MP_STD' ) ;

IF ( Indicateur @= 'MP_STD' & nMaj = 1 ) ; 

  CellIncrementN ( Value, C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'MP_STD' ) ;

ELSEIF ( Indicateur @= 'COUT_APPROCHE' & nMaj = 1 ) ; 

  CellIncrementN ( Value, C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'COUT_APPROCHE' ) ;

ELSEIF ( Indicateur @= 'VAR_COST' & nMaj = 1 ) ; 

  CellIncrementN ( Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'VAR_COST' ) ;

ELSEIF ( Indicateur @= 'TRF_COST' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'TRF_COST' ) ;

ELSEIF ( Indicateur @= 'FULL_COST' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'FULL_COST' ) ;

ELSEIF ( Indicateur @= 'VAR_COST_MAR' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'VAR_COST_MAR' ) ;

ELSEIF ( Indicateur @= 'TRF_COST_MAR' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'TRF_COST_MAR' ) ;

ELSEIF ( Indicateur @= 'FULL_COST_MAR' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'FULL_COST_MAR' ) ;

ELSEIF ( Indicateur @= 'EBVD' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'EBVD' ) ;

ELSEIF ( Indicateur @= 'MP_STD_UNIT' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'MP_STD_UNIT' ) ;

ELSEIF ( Indicateur @= 'VAR_COST_UNIT' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'VAR_COST_UNIT' ) ;

ELSEIF ( Indicateur @= 'TRF_COST_UNIT' & nMaj = 1 ) ; 

  CellPutN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'TRF_COST_UNIT' ) ;

ELSEIF ( Indicateur @= 'FULL_COST_UNIT' & nMaj = 1 ) ; 

  CellPutN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'FULL_COST_UNIT' ) ;

ELSEIF ( Indicateur @= 'VAR_COST_MAR_UNIT' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'VAR_COST_MAR_UNIT' ) ;

ELSEIF ( Indicateur @= 'TRF_COST_MAR_UNIT' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'TRF_COST_MAR_UNIT' ) ;

ELSEIF ( Indicateur @= 'FULL_COST_MAR_UNIT' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'FULL_COST_MAR_UNIT' ) ;


ELSEIF ( Indicateur @= 'EBVD_UNIT' & nMaj = 1 ) ; 

  CellIncrementN (  Value , C_Cube_Cible, P_PHASE, vPeriod, vSales_Org, vDistrib_Channel, vVolume_Unit, vSales_Group, vCustomer, ELPAR(D_MATERIAL, vMaterial, 1), vPayer, vSold_To, vShip_Point, 
  vShip_Plant, vProd_Plant, vVendor, 'N/A_MAT_FR_GROUP', vIncoterm,  vQuota, 'EBVD_UNIT' ) ;


ENDIF ;



#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

Subsetdestroy(D_VOLUME_UNIT, subset_volume_unit);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Cube_Source,view_copy);
SubsetDestroy( D_PHASE, subset_copy );
SubsetDestroy( D_CHA_SAP_IND, subset_copy );
SubsetDestroy( D_PERIOD, subset_copy );

#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 1);

#endregion