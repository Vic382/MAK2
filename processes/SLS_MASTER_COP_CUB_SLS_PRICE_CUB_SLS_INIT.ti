#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################################################################
#                         DESCRIPTION DU PROCESSUS                           			#
#                                                                            			#
# Date :   21/03/2019                                                        			#
#                                                                            			#
# Fait par :    Ann BESNARD                                                  			#
#                                                                            			#
# Action : Processus d'initialisation de la grille tarifaire pour tous les indicateurs  #
#		La phase a été initialisée dans le cube SLS_INIT	                 			#
#																			 			#
#########################################################################################

#===========================================#
#             Déclaration des variables     #
#===========================================#
#--------------------Process--------------------#
Init_Price = 'SLS_COP_CUB_SLS_PRICE_CUB_SLS_INIT';

#--------------------Cubes--------------------#
C_Init = 'SLS_INIT';
C_Price = 'SLS_PRICE';
C_zPARAM = 'zPARAM';

#--------------------Dimensions--------------------#
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_ORG = '1_G_SALES_ORG';
D_DISTRIB_CHANNEL = '1_G_DISTRIB_CHANNEL';
D_VOLUME_UNIT = '1_G_VOLUME_UNIT';
D_MATERIAL_PLAN = 'SLS_MATERIAL_PLAN';
D_MATERIAL_PLAN_PRICE = 'SLS_MATERIAL_PLAN_PRICE';
D_CUSTOMER = 'SLS_CUSTOMER';
D_CUSTOMER_PRICE = 'SLS_CUSTOMER_PRICE';
D_SALES_GROUP = 'SLS_SALES_GROUP';
D_SHIP_POINT = 'SLS_SHIP_POINT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_VENDOR = 'SLS_VENDOR';
D_INIT_IND = 'SLS_INIT_IND';
D_PRICE_IND = 'SLS_PRICE_IND';




#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | Init_Price;
view_copy = 'z_copy_' | vUSER |'_' | Init_Price;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | Init_Price;
subset_copy = 'z_copy_' | vUSER |'_' | Init_Price;

#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Init);
CUBESETLOGCHANGES(C_Init, 0);

#============================================#
#                  Vérification des paramètres                #
#============================================#


#Distrib_Channel
P_Distrib_Channel = CellGetS(C_zPARAM, 'Distribution Channel', 'Value');

If( P_Distrib_Channel @= '');
	P_Distrib_Channel = 'Total Distribution Channel';
EndIf;

If( DIMIX(D_DISTRIB_CHANNEL, P_Distrib_Channel) = 0);
	err_prolog = 1;
    message_err_prolog = 'La distribution channel '|P_Distrib_channel|' n''appartient pas à la dimension ' | D_distrib_channel;
EndIf;

P_Distrib_Channel = DimensionElementPrincipalName( D_DISTRIB_CHANNEL, P_Distrib_Channel );


#Sales Org
P_Sales_Org = CellGetS(C_zPARAM, 'Sales Org', 'Value');

If( P_Sales_Org @= '');
	P_Sales_Org = 'TOTAL SALES ORG';
EndIf;

If( DIMIX(D_Sales_Org, P_Sales_Org) = 0);
	err_prolog = 1;
    message_err_prolog = 'L''élément '|P_SAles_Org|' n''appartient pas à la dimension ' | D_Sales_Org;
EndIf;

P_SAles_Org = DimensionElementPrincipalName( D_DISTRIB_CHANNEL, P_Sales_Org );

#Period
P_Period = CellGetS(C_zPARAM, 'Period', 'Value');

If( DIMIX(D_Period, P_Period) = 0 & P_Period @<> '');
	err_prolog = 1;
    message_err_prolog = 'L''élément '|P_Period|' n''appartient pas à la dimension ' | D_Period;
ElseIf(P_Period @<>'');
	P_Period = DimensionElementPrincipalName( D_PERIOD, P_Period );
EndIf;

#Division
P_Division = CellGetS(C_zPARAM, 'Division', 'Value');

If( P_Division @= '');
	P_Division = 'Total Planning Material';
EndIf;

If( DIMIX(D_MATERIAL_PLAN, P_Division) = 0 % ELLEV(D_MATERIAL_PLAN, P_Division)<2 );
	err_prolog = 1;
    message_err_prolog = 'L''élément '|P_Division|' n''est pas un élément de niveau supérieur à 2 de la dimension ' | D_MATERIAL_PLAN;
EndIf;

P_Division = DimensionElementPrincipalName( D_MATERIAL_PLAN, P_Division );

#SAles Group
P_Sales_Group = CellGetS(C_zPARAM, 'Sales group', 'Value');

If( DIMIX(D_SALES_GROUP, P_Sales_Group) = 0 );
	err_prolog = 1;
    message_err_prolog = 'L''élément '|P_Sales_Group|' n''appartient pas à la dimension ' | D_SALES_GROUP;
EndIf;

P_SAles_Group = DimensionElementPrincipalName( D_SALES_GROUP, P_Sales_Group );

#Country
P_Country = CellGetS(C_zPARAM, 'Country', 'Value');

If( DIMIX(D_CUSTOMER|':Country',P_Country) = 0 );
	err_prolog = 1;
    message_err_prolog = 'L''élément '|P_Country|' n''appartient pas à la dimension ' | D_CUSTOMER|':COuntry';
EndIf;

P_Country = DimensionElementPrincipalName( D_CUSTOMER|':Country', P_Country );

Curr_Phase = CellGetS(C_zPARAM,'Phase','Value');


#=========================================#
#     Initialisation de la vue à copier/vue source           #
#=========================================#

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Init,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_VENDOR, subset_copy);
SubsetDestroy(D_PROD_PLANT, subset_copy);
SubsetDestroy(D_SHIP_PLANT, subset_copy);
SubsetDestroy(D_SHIP_POINT, subset_copy);
SubsetDestroy(D_INIT_IND, subset_copy);

#--------------------Création des objets--------------------#

ViewCreate(C_Init,view_copy);

#D_CURRENT_PHASE
Curr_Phase = DimensionElementPrincipalName( D_CURRENT_PHASE, Curr_Phase );
subsetcreate(D_CURRENT_PHASE,subset_copy);
SubsetElementInsert(D_CURRENT_PHASE, subset_copy, Curr_Phase, 1);

#D_PERIOD
SubsetCreate(D_PERIOD,subset_copy);

#D_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{
	{[1_G_DISTRIB_CHANNEL].[Total Distribution Channel]},
	INTERSECT({TM1FILTERBYLEVEL({DESCENDANTS({[1_G_DISTRIB_CHANNEL].['|P_Distrib_Channel|']})},0)},
	{{[1_G_DISTRIB_CHANNEL].[10]},{[1_G_DISTRIB_CHANNEL].[20]}})
}';
SubsetCreateByMDX(subset_copy, MDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_copy, 1);

#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({DESCENDANTS({[1_G_SALES_ORG].['|P_Sales_Org|']})},0)}}';
SubsetCreateByMDX(subset_copy,MDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_copy, 1);


#D_MATERIAL_PLAN
SubsetCreate(D_MATERIAL_PLAN, subset_copy);

#D_CUSTOMER
SubsetCreate(D_CUSTOMER, subset_copy);

#D_VOLUME_UNIT
SubsetCreate( D_VOLUME_UNIT, subset_copy, 0 );
SubsetElementInsert( D_VOLUME_UNIT, subset_copy, 'TO', 1 );

#D_VENDOR
SubsetCreate(D_VENDOR, subset_copy);
SubsetElementInsert(D_VENDOR, subset_copy, 'TOTAL_VENDOR', 1);

#D_PROD_PLANT
SubsetCreate(D_PROD_PLANT, subset_copy);
SubsetElementInsert(D_PROD_PLANT, subset_copy, 'TOTAL_PROD_PLANT', 1);

#D_SHIP_PLANT
SubsetCreate(D_SHIP_PLANT, subset_copy);
SubsetElementInsert(D_SHIP_PLANT, subset_copy, 'TOTAL_SHIP_PLANT', 1);

#D_SHIP_POINT
SubsetCreate(D_SHIP_POINT, subset_copy);
SubsetElementInsert(D_SHIP_POINT, subset_copy, 'TOTAL_SHIP_POINT', 1);

#D_INIT_IND
SubsetCreate( D_INIT_IND, subset_copy);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Init,view_copy, D_CURRENT_PHASE,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_PERIOD,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_SALES_ORG,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_DISTRIB_CHANNEL,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_CUSTOMER,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_MATERIAL_PLAN,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_VOLUME_UNIT,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_VENDOR,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_PROD_PLANT,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_SHIP_PLANT,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_SHIP_POINT,subset_copy);
ViewSubsetAssign(C_Init,view_copy, D_INIT_IND,subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Init,view_copy,0);
ViewSetSkipCalcs(C_Init,view_copy, 0);
ViewSetSkipZeroes(C_Init,view_copy, 1);



#============================================#
#                  Initialisation de la vue à supprimer                 #
#============================================#
#Définit après pour le subset contenant les lab office de SLS_MATERIAL_PLAN_PRICe


#--------------------Destruction des objets--------------------#
ViewDestroy(C_Price,view_erase);
Subsetdestroy(D_CURRENT_PHASE,subset_erase);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_erase);
Subsetdestroy(D_SALES_ORG,subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
Subsetdestroy(D_MATERIAL_PLAN_PRICE,subset_erase);
Subsetdestroy(D_CUSTOMER_PRICE,subset_erase);
Subsetdestroy(D_SALES_GROUP,subset_erase);
Subsetdestroy(D_PRICE_IND,subset_erase);

#--------------------Création des objets--------------------#
ViewCreate(C_Price,view_erase);

#D_PHASE
subsetcreate(D_CURRENT_PHASE,subset_erase);
SubsetElementInsert(D_CURRENT_PHASE, subset_erase, Curr_Phase, 1);

#D_PERIOD
SubsetCreate(D_PERIOD,subset_erase);

#D_DISTRIB_CHANNEL
MDX_DISTRIB_CHANNEL = '{
	{[1_G_DISTRIB_CHANNEL].[Total Distribution Channel]},
	INTERSECT({TM1FILTERBYLEVEL({DESCENDANTS({[1_G_DISTRIB_CHANNEL].['|P_Distrib_channel|']})},0)},
	{{[1_G_DISTRIB_CHANNEL].[10]},{[1_G_DISTRIB_CHANNEL].[20]}})
}';
SubsetCreateByMDX(subset_erase,MDX_DISTRIB_CHANNEL);
SubsetElementDelete(D_DISTRIB_CHANNEL, subset_erase, 1);

#D_SALES_ORG
MDX_SALES_ORG = '{{[1_G_SALES_ORG].[TOTAL SALES ORG]},{TM1FILTERBYLEVEL({DESCENDANTS({[1_G_SALES_ORG].['|P_Sales_Org|']})},0)}}';
SubsetCreateByMDX(subset_erase,MDX_SALES_ORG);
SubsetElementDelete(D_SALES_ORG, subset_erase, 1);

#D_MATERIAL_PLAN_PRICE
SubsetCreate(D_MATERIAL_PLAN_PRICE, subset_erase);

#D_CUSTOMER_PRICE
SubsetCreate(D_CUSTOMER_PRICE, subset_erase);
If(P_Sales_Group @= '' & P_Country @= '');
	MDX_CUSTOMER = '{TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_CUSTOMER_PRICE])},0)}';
ElseIf(P_Country @= '');
	MDX_CUSTOMER = '{TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER_PRICE] )}, [SLS_CUSTOMER_PRICE].[Sales Group] = "'|P_SAles_Group|'")}, 0)}';
ElseIf(P_Sales_Group @='');
	MDX_CUSTOMER = '{TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER_PRICE] )}, [SLS_CUSTOMER_PRICE].[Country] = "'|P_COuntry|'")}, 0)}';
Else;
	MDX_CUSTOMER = '{TM1FILTERBYLEVEL( {FILTER( {FILTER( {TM1SUBSETALL( [SLS_CUSTOMER_PRICE] )}, [SLS_CUSTOMER_PRICE].[Country] = "'|P_COuntry|'")}, [SLS_CUSTOMER_PRICE].[Sales Group] = "'|P_Sales_Group|'")}, 0)}';
EndIf;
SubsetMDXSet( D_CUSTOMER_PRICE, subset_erase, MDX_CUSTOMER );

#D_SALES_GROUP
SubsetCreate(D_SALES_GROUP, subset_erase);

#D_PRICE_IND
SubsetCreate( D_PRICE_IND, subset_erase);

#--------------------Affectation des sous-ensembles à la vue--------------------#
ViewSubsetAssign(C_Price,view_erase, D_CURRENT_PHASE,subset_erase);
ViewSubsetAssign(C_Price,view_erase, D_PERIOD, subset_erase);
ViewSubsetAssign(C_Price,view_erase, D_DISTRIB_CHANNEL,subset_erase);
ViewSubsetAssign(C_Price,view_erase, D_SALES_ORG,subset_erase);
ViewSubsetAssign(C_Price,view_erase, D_MATERIAL_PLAN_PRICE,subset_erase);
ViewSubsetAssign(C_Price,view_erase, D_CUSTOMER_PRICE,subset_erase);
ViewSubsetAssign(C_Price,view_erase, D_SALES_GROUP,subset_erase);
ViewSubsetAssign(C_Price,view_erase, D_PRICE_IND,subset_erase);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Price,view_erase,0);
ViewSetSkipCalcs(C_Price,view_erase, 0);
ViewSetSkipZeroes(C_Price,view_erase, 1);

#Déjà fait dans copie de Init vers Sales PLan
#CubeProcessFeeders( 'SLS_INIT' );

If(P_Distrib_Channel @= '10' % P_Distrib_Channel @= 'TOTAL_DISTRIB_CHANNEL');
	#-----------------Retail GMS--------------#
	ExecuteProcess(Init_Price, 'P_Indicateur', 'BASE_UNIT', 'P_Perimetre', 'GMS', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'RPP_UNIT', 'P_Perimetre', 'GMS', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'CPV_UNIT', 'P_Perimetre', 'GMS', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'PROMO_UNIT', 'P_Perimetre', 'GMS', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'CUST_REBATE_UNIT', 'P_Perimetre', 'GMS', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'RET_SERV_UNIT', 'P_Perimetre', 'GMS', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'NIP_UNIT', 'P_Perimetre', 'GMS', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
EndIf;

If(P_Distrib_Channel @= '20' % P_Distrib_Channel @= 'TOTAL_DISTRIB_CHANNEL');
	#-----------------B2B Sucre BoulPat/Retail RHF--------------#
	ExecuteProcess(Init_Price, 'P_Indicateur', 'BASE_UNIT', 'P_Perimetre', 'BoulPat_RHF', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'RPP_UNIT', 'P_Perimetre', 'BoulPat_RHF', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'CPV_UNIT', 'P_Perimetre', 'BoulPat_RHF', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'PROMO_UNIT', 'P_Perimetre', 'BoulPat_RHF', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'SURCH_UNIT', 'P_Perimetre', 'BoulPat_RHF', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'CUST_REBATE_UNIT', 'P_Perimetre', 'BoulPat_RHF', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
	ExecuteProcess(Init_Price, 'P_Indicateur', 'RET_SERV_UNIT', 'P_Perimetre', 'BoulPat_RHF', 'P_Distrib_Channel', P_Distrib_Channel, 'P_Sales_Org', P_Sales_Org, 'P_Division', P_Division, 'P_Period', P_Period, 'P_Sales_Group', P_Sales_Group, 'P_Country', P_Country);
EndIf;

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****


#====================================#
#        Activation de la consignation#
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Init);
CUBESETLOGCHANGES(C_Init, 1);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Price,view_erase);
Subsetdestroy(D_CURRENT_PHASE,subset_erase);
Subsetdestroy(D_DISTRIB_CHANNEL,subset_erase);
Subsetdestroy(D_SALES_ORG,subset_erase);
SubsetDestroy(D_PERIOD, subset_erase);
Subsetdestroy(D_MATERIAL_PLAN_PRICE,subset_erase);
Subsetdestroy(D_CUSTOMER_PRICE,subset_erase);
Subsetdestroy(D_SALES_GROUP,subset_erase);
Subsetdestroy(D_PRICE_IND,subset_erase);

#--------------------Destruction des objets--------------------#
ViewDestroy(C_Init,view_copy);
SubsetDestroy(D_CURRENT_PHASE, subset_copy);
SubsetDestroy(D_PERIOD, subset_copy);
SubsetDestroy(D_SALES_ORG, subset_copy);
SubsetDestroy(D_DISTRIB_CHANNEL, subset_copy);
SubsetDestroy(D_CUSTOMER, subset_copy);
SubsetDestroy(D_MATERIAL_PLAN, subset_copy);
SubsetDestroy(D_SALES_GROUP, subset_copy);
SubsetDestroy(D_VOLUME_UNIT, subset_copy);
SubsetDestroy(D_VENDOR, subset_copy);
SubsetDestroy(D_PROD_PLANT, subset_copy);
SubsetDestroy(D_SHIP_PLANT, subset_copy);
SubsetDestroy(D_SHIP_POINT, subset_copy);
SubsetDestroy(D_INIT_IND, subset_copy);
#endregion