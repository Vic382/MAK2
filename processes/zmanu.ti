#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

################################################################
#                 DESCRIPTION DU PROCESSUS                     #
#                                                              #
# Date :   11/04/2019                                          #
#                                                              #
# Fait par :   Anne BESNARD                                    #
#                                                              #
# Action : Sécurité sur les planning materials			       #
#															   #
#                                                              #
################################################################

#====================================#
#     Déclaration des variables      #
#====================================#

#--------------------Cubes--------------------#
C_ElementSecurity_Material_Plan = '}ElementSecurity_SLS_MATERIAL_PLAN';
C_ElementSecurity_Material_Plan_Price = '}ElementSecurity_SLS_MATERIAL_PLAN_PRICE';

#--------------------Dimensions--------------------#
D_Mat_Plan = 'SLS_MATERIAL_PLAN';
D_Mat_Plan_Price = 'SLS_MATERIAL_PLAN_PRICE';
D_Attr_MATERIAL = '}ElementAttributes_1_G_MATERIAL';
D_Groups = '}Groups';

#--------------------Elements--------------------#



#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


#vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Vues--------------------#
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_temp = 'z_temp_' | vUSER |'_' | vPRO_NAME;

#=========================================#
#   Initialisation du subset à copier     #
#=========================================#

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Material_Plan, view_copy );
SubsetDestroy(D_Mat_Plan, subset_copy);
SubsetDestroy(D_Groups, subset_copy);

#-----------Création des objets-----------#
#Vue
ViewCreate( C_ElementSecurity_Material_Plan, view_copy, 1 );


#D_Material_Plan
MDX = '{{[SLS_MATERIAL_PLAN].[Total Planning Material]},{TM1FILTERBYLEVEL(TM1SUBSETALL([SLS_MATERIAL_PLAN]), 0)}}';
SubsetCreatebyMDX( subset_copy, MDX, 1 );
SubsetElementDelete( D_Mat_Plan, subset_copy, 1 );

#D_Groups
MDX = '{
	{[}Groups].[ADMIN]},
	{[}Groups].[Functional_Admin_CDG]},
	{EXCEPT(
		{TM1SUBSETALL([}Groups])} , 		
		TM1FILTERBYPATTERN(
			{TM1SUBSETALL([}Groups])} , 
			"*ADMIN*"
			)
		)
	}
}';
SubsetCreatebyMDX( subset_copy, MDX, 1 );
SubsetElementDelete( D_Groups, subset_copy, 1 );

#---------------------Affectation des sous-ensembles à la vue---------------------------------#
ViewSubsetAssign(C_ElementSecurity_Material_Plan, view_copy, D_Mat_Plan, subset_copy);
ViewSubsetAssign(C_ElementSecurity_Material_Plan, view_copy, D_Groups, subset_copy);

#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_ElementSecurity_Material_Plan, view_copy,1);
ViewSetSkipCalcs(C_ElementSecurity_Material_Plan,view_copy, 0);
ViewSetSkipZeroes(C_ElementSecurity_Material_Plan,view_copy, 0);

#-------définition du subset source-------#
DatasourceCubeview = view_copy;


SubsetDestroy(D_Attr_MATERIAL, subset_temp);
MDX_Attr = '{{['|D_Attr_MATERIAL|'].[Caption]},{FILTER( {TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|D_Attr_MATERIAL|'] )}, 0)}, ['|D_Attr_MATERIAL|'].[Flag_Hier] = 1.000000)}}}';
SubsetCreateByMDX(subset_temp, MDX_Attr);
SubsetElementDelete(D_Attr_MATERIAL, subset_temp, 1);
Subsize = SubsetGetSize(D_Attr_MATERIAL, subset_temp);
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

vELEM_MAT_PLAN = DimensionElementPrincipalName( D_Mat_Plan, vELEM_MAT_PLAN );
vELEM_Groups = DimensionElementPrincipalName( D_Groups, vELEM_Groups );

    #---------------Hiérarchies Planning Material-----------#
	#Parcours du subset attr
	elem_nb = 1;
	While(elem_nb<=Subsize);
		#Vérification du flag pour chacun des éléments du subset
    	elem = SubsetGetElementName( D_Attr_MATERIAL, subset_temp, elem_nb);
    	Flag = AttrN(D_Attr_MATERIAL, elem,'Flag_Hier');
    	#Si l'attr doit être une hiérarchie : création
    	If(Flag = 1);
        	 Par = ELPAR(D_Mat_Plan|':'|elem, vELEM_MAT_PLAN , 1);
                   IF ( vELEM_MAT_PLAN @= 'N/A_PLANNING_MATERIAL' ) ;
                    ASCIIOUTPUT ( '../temp/manu.csv' , D_Mat_Plan|':'|elem , vELEM_MAT_PLAN , Par ) ;
                   ENDIF ;
                  ENDIF ;
  
                 elem_nb = elem_nb + 1 ;
END ;   
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#-----------Destruction des objets--------#
ViewDestroy( C_ElementSecurity_Material_Plan, view_copy);
SubsetDestroy(D_Mat_Plan, subset_copy);
SubsetDestroy(D_Groups, subset_copy);
SubsetDestroy(D_Attr_MATERIAL, subset_temp);


#endregion