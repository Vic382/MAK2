#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#################################################################
#                                               DESCRIPTION DU PROCESSUS                                              #
#                                                                                                                                                   #
# Date :   30/08/2018                                                                                                                  #
#                                                                                                                                                   #
# Fait par :   Elisabeth MOUNIER                                                                                                 #
#                                                                                                                                                   #
# Action : Processus de chargement des dimensions SLS_MAT_FREIGHT_GROUP, 	     #
#	SLS_PROD_PLANT et SLS_SHIP_PLANT                                                                 #
#	+ chargement du cube MAT_FREIGHT_GROUP                                                         #
#                                                                                                                                                   #
#################################################################

SetInputCharacterSet('TM1CS_UTF8');

#====================================#
#             Déclaration des variables                   #
#====================================#

#--------------------Cubes--------------------#
C_Cube_Cible = 'zMAT_FR_GRP';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';

#--------------------Dimensions--------------------#

D_MAT_FR_GROUP = 'SLS_MAT_FREIGHT_GROUP';
D_PROD_PLANT = 'SLS_PROD_PLANT';
D_SHIP_PLANT = 'SLS_SHIP_PLANT';


#--------------------Elements--------------------#

TOT_MAT = 'TOTAL_MAT_FREIGHT_GROUP';
TOT_PROD_PLANT = 'TOTAL_PROD_PLANT';
TOT_SHIP_PLANT = 'TOTAL_SHIP_PLANT';

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';

#--------------------Vues--------------------#
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#--------------------Sous-ensembles--------------------#
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;

#====================================#
#        Désactivation de la consignation             #
#====================================#

OldCubeLogChanges = CUBEGETLOGCHANGES(C_Cube_Cible);
CUBESETLOGCHANGES(C_Cube_Cible, 0);

######################
#Pas sûr qu'on reçoive l'intégralité des infos dans le fichier source
#####################
# #============================================#
# #                  Initialisation de la vue à supprimer                 #
# #============================================#

# #--------------------Destruction des objets--------------------#
# ViewDestroy(C_Cube_Cible,view_erase);

# #--------------------Création des objets--------------------#
# ViewCreate(C_Cube_Cible,view_erase);


# #--------------------Suppression des cellules vides, consolidées, calculées--------------------#
# ViewSetSkipRuleValues(C_Cube_Cible,view_erase,1);
# ViewSetSkipCalcs(C_Cube_Cible,view_erase, 1);
# ViewSetSkipZeroes(C_Cube_Cible,view_erase, 1);

# #--------------------Suppression des données--------------------#
# ViewZeroOut(C_Cube_Cible,view_erase);

# #--------------------Destruction des objets--------------------#
# ViewDestroy(C_Cube_Cible,view_erase);

#--------------------Sources de données--------------------#
DatasourceNameForServer = CellGetS( C_zPROCESS_ADMINISTRATION, vPRO_NAME, 'DATASOURCE_NAME_FOR_SERVER', 'Comment');

# Init des totaux

If( DIMIX( D_MAT_FR_GROUP, TOT_MAT) = 0);
	DimensionElementInsert(D_MAT_FR_GROUP, '', TOT_MAT, 'N');
EndIf;

If( DIMIX( D_PROD_PLANT, TOT_PROD_PLANT) = 0);
	DimensionElementInsert(D_PROD_PLANT, '', TOT_PROD_PLANT, 'N');
EndIf;

If( DIMIX( D_SHIP_PLANT, TOT_SHIP_PLANT) = 0);
	DimensionElementInsert(D_SHIP_PLANT, '', TOT_SHIP_PLANT, 'N');
EndIf;

# Init N/A

If( DIMIX( D_MAT_FR_GROUP, 'N/A_MAT_FR_GROUP') = 0);
	DimensionElementInsert(D_MAT_FR_GROUP, '', 'N/A_MAT_FR_GROUP', 'N');
	DimensionElementComponentAdd(D_MAT_FR_GROUP, TOT_MAT, 'N/A_MAT_FR_GROUP', 1);
EndIf;

If( DIMIX( D_PROD_PLANT, 'N/A_PROD_PLANT') = 0);
	DimensionElementInsert(D_PROD_PLANT, '', 'N/A_PROD_PLANT', 'N');
	DimensionElementComponentAdd(D_PROD_PLANT, TOT_PROD_PLANT, 'N/A_PROD_PLANT', 1);
EndIf;

If( DIMIX( D_SHIP_PLANT, 'N/A_SHIP_PLANT') = 0);
	DimensionElementInsert(D_SHIP_PLANT, '', 'N/A_SHIP_PLANT', 'N');
	DimensionElementComponentAdd(D_SHIP_PLANT, TOT_SHIP_PLANT, 'N/A_SHIP_PLANT', 1);
EndIf;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****


#Chargement de la dimension SLS_PROD_PLANT

#Insertion des Production Plant dans la dimension SLS_PROD_PLANT

If(Prod_plant_code @<> '');
	If( DIMIX( D_PROD_PLANT, Prod_plant_code) = 0);
		DimensionElementInsert(D_PROD_PLANT, '', Prod_plant_code, 'N');
	EndIf;


	#Création de la hiérarchie Tot > Production_Plant

	DimensionElementComponentAdd(D_PROD_PLANT, TOT_PROD_PLANT, Prod_plant_code, 1);

EndIf;


#Chargement de la dimension SLS_SHIP_PLANT

#Insertion des Shipping Plant dans la dimension SLS_SHIP_PLANT

If(Ship_plant_code @<> '');
	If( DIMIX( D_SHIP_PLANT, Ship_plant_code) = 0);
		DimensionElementInsert(D_SHIP_PLANT, '', Ship_plant_code, 'N');
	EndIf;


	#Création de la hiérarchie Tot > Ship_Plant

	DimensionElementComponentAdd(D_SHIP_PLANT, TOT_SHIP_PLANT, Ship_plant_code, 1);

EndIf;

#Chargement de la dimension SLS_MAT_FREIGHT_GROUP

#Insertion de Material Freight Group dans la dimension SLS_MAT_FREIGHT_GROUP

If(Mat_freight_group_code @= '');
	itemskip;
EndIf;

If( DIMIX( D_MAT_FR_GROUP, Mat_freight_group_code) = 0);
	DimensionElementInsert(D_MAT_FR_GROUP, '', Mat_freight_group_code, 'N');
EndIf;


#Création de la hiérarchie Tot > Mat_freight_group

DimensionElementComponentAdd(D_MAT_FR_GROUP, TOT_MAT, Mat_freight_group_code, 1);

#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

#Attributs de Production Plant dans la dimension SLS_PROD_PLANT


If(Prod_plant_code @<> '');

	AttrPutS(Prod_plant_code|' - '|Prod_plant_desc, D_PROD_PLANT, Prod_plant_code, 'Code - Caption' );

	While(DIMIX(D_PROD_PLANT, Prod_plant_desc) <> 0);
		Prod_plant_desc = Prod_plant_desc|'.';
	End;
	AttrPutS(Prod_plant_desc, D_PROD_PLANT, Prod_plant_code, 'Caption' );
	
	#Attribut Groupe

	#Si le code commence par 6 ou 7, attribut =1, sinon 0
	If(subst(Prod_plant_code, 1, 1) @= '6' % subst(Prod_plant_code, 0, 1) @= '7');
		vGroup = 1;
	Else;
		vGroup = 0;
	EndIf;

	AttrPutN(vGroup, D_PROD_PLANT, Prod_plant_code, 'Group' );

EndIf;

#Attributs de Shipping Plant dans la dimension SLS_SHIP_PLANT

If(Ship_plant_code @<> '');

	AttrPutS(Ship_plant_code | ' - ' | Ship_Plant_desc, D_SHIP_PLANT, Ship_plant_code, 'Code - Caption' );
	While(DIMIX(D_SHIP_PLANT, Ship_plant_desc) <> 0);
		Ship_plant_desc = Ship_plant_desc|'.';
	End;

	AttrPutS(Ship_Plant_desc, D_SHIP_PLANT, Ship_plant_code, 'Caption' );
	
	#Attribut Groupe

	#Si le code commence par 6 ou 7, attribut =1, sinon 0
	If(subst(Ship_plant_code, 1, 1) @= '6' % subst(Ship_plant_code, 0, 1) @= '7');
		vGroup = 1;
	Else;
		vGroup = 0;
	EndIf;

	AttrPutN(vGroup, D_SHIP_PLANT, Ship_plant_code, 'Group' );

EndIf;


#Attributs de Material_freight_group dans la dimension SLS_MAT_FREIGHT_GROUP

If(Mat_freight_group_code @<> '');

	#alias de Mat_freight_group
	While(DIMIX(D_MAT_FR_GROUP, Mat_freight_group_desc) <> 0);
		Mat_freight_group_desc = Mat_freight_group_desc|'.';
	End;
	AttrPutS(Mat_freight_group_desc, D_MAT_FR_GROUP, Mat_freight_group_code, 'Caption' );
	AttrPutS(Mat_freight_group_code | ' - ' | Mat_freight_group_desc, D_MAT_FR_GROUP, Mat_freight_group_code, 'Code - Caption' );


	#Chargement du cube MAT_FREIGHT_GROUP
	If(DIMIX('SLS_MATERIAL_PLAN', Material_code) <> 0);
		CellPutS( Mat_freight_group_code, C_Cube_Cible, Material_code, Ship_plant_code, 'MAT_FR_GROUP');
	EndIf;

EndIf;

#Chargement des clés d'appro et type d'appro dans le cube zMat_Fregit_Group
If(DIMIX('SLS_MATERIAL_PLAN', Material_code) <> 0);
	CellPutS(type_dappro_code, C_Cube_Cible, Material_code, Ship_plant_code, 'PROCUREMENT');
	CellPutS(type_dappro_desc, C_Cube_Cible, Material_code, Ship_plant_code, 'PROCUREMENT_DESC');
	CellPutS(cle_dappro_code, C_Cube_Cible, Material_code, Ship_plant_code, 'SPEC_PROCUREMENT');
	CellPutS(cle_dappro_desc, C_Cube_Cible, Material_code, Ship_plant_code, 'SPEC_PROCUREMENT_DESC');
EndIf;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

#alias Totaux
AttrPutS('Total Mat Freight Group', D_MAT_FR_GROUP, TOT_MAT, 'Caption' );
AttrPutS('Total Prod Plant', D_PROD_PLANT, TOT_PROD_PLANT, 'Caption' );
AttrPutS('Total Ship Plant', D_SHIP_PLANT, TOT_SHIP_PLANT, 'Caption' );


#alias de N/A Mat Fr Group
AttrPutS('N/A Mat Freight Group', D_MAT_FR_GROUP, 'N/A_MAT_FR_GROUP', 'Caption' );
AttrPutS('NA Mat Freight Group', D_MAT_FR_GROUP, 'N/A_MAT_FR_GROUP', 'Code - Caption' );

#alias de N/A Prod Plant
AttrPutS('N/A Prod Plant', D_PROD_PLANT, 'N/A_PROD_PLANT', 'Caption' );
AttrPutS('NA Prod Plant', D_PROD_PLANT, 'N/A_PROD_PLANT', 'Code - Caption' );

#alias de N/A Ship Plant
AttrPutS('N/A Ship Plant', D_SHIP_PLANT, 'N/A_SHIP_PLANT', 'Caption' );
AttrPutS('NA Ship Plant', D_SHIP_PLANT, 'N/A_SHIP_PLANT', 'Code - Caption' );
#endregion