#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


################################################################
#                                               DESCRIPTION DU PROCESSUS                                            #
#                                                                                                                                                 #
# Date :   20/11/2018                                                                                                                #
#                                                                                                                                                 #
# Fait par :   Anne BESNARD                                                                                                    #
#                                                                                                                                                 #
# Action : Création de tous les subsets nécessaires à la visualisation des différentes phases    #
#									   #
#       Modifié le 18/03/2019 par Elisabeth Mounier                                                                                                                                          #
################################################################

#====================================#
#             Déclaration des variables                   #
#====================================#

#--------------------Cubes--------------------#
C_ElementAttributes_1_G_PHASE = '}ElementAttributes_1_G_PHASE';
C_zSELECT = 'zSELECT';
C_zPARAM = 'zPARAM';
C_zPROCESS_ADMINISTRATION = 'zPROCESS_ADMINISTRATION';


#--------------------Dimensions--------------------#
D_PHASE = '1_G_PHASE';
D_CURRENT_PHASE = '1_G_CURRENT_PHASE';
D_PERIOD = '1_G_PERIOD';
D_SALES_GROUP = 'SLS_SALES_GROUP';

#--------------------Elements--------------------#
F_Cal_Month = 'Calendar First Display Month';
L_Cal_Month = 'Calendar Last Display Month';
F_Fis_Month = 'Fiscal First Display Month';
L_Fis_Month = 'Fiscal Last Display Month';
F_Cam_Month = 'Campaign First Display Month';
L_Cam_Month = 'Campaign Last Display Month';

Val = 'Value';

Phase_zPARAM = 'Phase';

P_PHASE = CellGetS(C_zPARAM, Phase_zPARAM, 'Value'); 
#Curernt Phase
First_sim_month = ATTRS(D_CURRENT_PHASE, P_PHASE, 'First simulation month');

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
IF (SUBST ( TM1User, 1,3) @='DOM' ) ;
   vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),7,100);
ELSEIF  (SUBST ( TM1User, 1,3) @='Cog' ) ; 
    vUSER = SUBST(AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue'),16,100);
ELSE ;
    vUSER ='Admin';
ENDIF;
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';


If(TM1User @= 'R*Z_MAJ_CUBE_LOGGING');
	vClient = 'Tache_30mn';
Else;
	vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
EndIf;

#--------------------Sous-ensembles--------------------#
subsetall = 'All';

subset_calendar = 'Calendar';
subset_cal = 'Cal';
subset_calendar_Input = 'Calendar Input';
subset_calendar_Input_NIP = 'Calendar Input NIP';
subset_calendar_month = 'Calendar months';

subset_fiscal = 'Fiscal';
subset_fisc = 'Fisc';
subset_fiscal_Input = 'Fiscal Input';
subset_fiscal_Input_NIP = 'Fiscal Input NIP';
subset_fiscal_month = 'Fiscal months';

subset_campaign = 'Campaign';
subset_camp = 'Camp';
subset_campaign_Input = 'Campaign Input';
subset_campaign_Input_NIP = 'Campaign Input NIP';
subset_campaign_month = 'Campaign months';

subset_input_RPP_CPV = 'Input_RPP_CPV';
subset_RPP_CPV = 'RPP_CPV';

subset_current_phase = 'Current_Phase';


#------------------Réinit des subsets------------------------#
SubSize = SubsetGetSize(D_PERIOD, 'Level0');

cpt_cal = 1;
cpt_fisc = 1;
cpt_camp = 1;
cpt_all = 1;
cpt_act = 1;

While(cpt_cal <= SubSize);
	Elem_cal = SubsetGetElementName( D_PERIOD, 'Level0', cpt_cal );
    If(ELISANC( D_PERIOD, 'subset_calendar', Elem_cal )<>0);
		DimensionElementComponentDelete( D_PERIOD, 'subset_calendar', Elem_cal );
    EndIf;    
    cpt_cal = cpt_cal + 1;
End;

While(cpt_fisc <= SubSize);
	Elem_Fisc = SubsetGetElementName( D_PERIOD, 'Level0', cpt_fisc );
    If(ELISANC( D_PERIOD, 'subset_fiscal', Elem_fisc )<>0);
		DimensionElementComponentDelete( D_PERIOD, 'subset_fiscal', Elem_fisc );
    EndIf;
    cpt_fisc = cpt_fisc + 1;
End;

While(cpt_camp <= Subsize);
	Elem_Camp = SubsetGetElementName( D_PERIOD, 'Level0', cpt_camp );
    If(ELISANC( D_PERIOD, 'subset_campaign', Elem_camp )<>0);
		DimensionElementComponentDelete( D_PERIOD, 'subset_campaign', Elem_camp );
    EndIf;
    cpt_camp = cpt_camp + 1;
End;

While(cpt_all <= Subsize);
	Elem_All = SubsetGetElementName( D_PERIOD, 'Level0', cpt_all );
    If(ELISANC( D_PERIOD, 'subset_cal_fisc_camp', Elem_All )<>0);
		DimensionElementComponentDelete( D_PERIOD, 'subset_cal_fisc_camp', Elem_All );
    EndIf;
    cpt_all = cpt_all + 1;
End;

While(cpt_act <= Subsize);
	Elem_Act = SubsetGetElementName( D_PERIOD, 'Level0', cpt_act );
    If(ELISANC( D_PERIOD, 'subset_act_cal_fisc_camp', Elem_Act )<>0);
		DimensionElementComponentDelete( D_PERIOD, 'subset_act_cal_fisc_camp', Elem_Act );
    EndIf;
    cpt_act = cpt_act + 1;
End;


SubsetDestroy(D_PERIOD, subsetall);

SubsetDeleteAllElements(D_PERIOD, subset_calendar);
SubsetDeleteAllElements(D_PERIOD, subset_cal);
SubsetDeleteAllElements(D_PERIOD, subset_calendar_Input);
SubsetDeleteAllElements(D_PERIOD, subset_calendar_Input_NIP);
SubsetDeleteAllElements(D_PERIOD, subset_calendar_month);

SubsetDeleteAllElements(D_PERIOD, subset_fiscal);
SubsetDeleteAllElements(D_PERIOD, subset_fisc);
SubsetDeleteAllElements(D_PERIOD, subset_fiscal_Input);
SubsetDeleteAllElements(D_PERIOD, subset_fiscal_Input_NIP);
SubsetDeleteAllElements(D_PERIOD, subset_fiscal_month);

SubsetDeleteAllElements(D_PERIOD, subset_campaign);
SubsetDeleteAllElements(D_PERIOD, subset_camp);
SubsetDeleteAllElements(D_PERIOD, subset_campaign_Input);
SubsetDeleteAllElements(D_PERIOD, subset_campaign_Input_NIP);
SubsetDeleteAllElements(D_PERIOD, subset_campaign_month);

SubsetDeleteAllElements(D_PERIOD, subset_input_RPP_CPV);
SubsetDeleteAllElements(D_PERIOD, subset_RPP_CPV);

#--------------Récupération des éléments pour les reconstruire-----------#
First_Cal_Month = CellGetS(C_zPARAM, F_Cal_Month, Val);
Last_Cal_Month = CellGetS(C_zPARAM, L_Cal_Month, Val);
First_Fis_Month = CellGetS(C_zPARAM, F_Fis_Month, Val);
Last_Fis_Month = CellGetS(C_zPARAM, L_Fis_Month, Val);
First_Cam_Month = CellGetS(C_zPARAM, F_Cam_Month, Val);
Last_Cam_Month = CellGetS(C_zPARAM, L_Cam_Month, Val);

#--------------Récupération de leur index-----------#
First_Cal_Month_Num = StringToNumber(AttrS(D_PERIOD, First_Cal_Month, 'Index'));
Last_Cal_Month_Num = StringToNumber(AttrS(D_PERIOD, Last_Cal_Month, 'Index'));
First_Fis_Month_Num = StringToNumber(AttrS(D_PERIOD, First_Fis_Month, 'Index'));
Last_Fis_Month_Num = StringToNumber(AttrS(D_PERIOD, Last_Fis_Month, 'Index'));
First_Cam_Month_Num = StringToNumber(AttrS(D_PERIOD, First_Cam_Month, 'Index'));
Last_Cam_Month_Num = StringToNumber(AttrS(D_PERIOD, Last_Cam_Month, 'Index'));

#------------Création d'un subset contenant tous les éléments fins----------
MDX = '{{[1_G_PERIOD].[Fiscal]},{EXCEPT(
{FILTER(
{TM1SORT( {TM1FILTERBYLEVEL( {TM1SUBSETALL( [1_G_PERIOD] )}, 0)}, ASC)},
[}ElementAttributes_1_G_PERIOD].([}ElementAttributes_1_G_PERIOD].[Index])@<>"T")},
{TM1FILTERBYPATTERN( {TM1SUBSETALL( [1_G_PERIOD] )}, "*Input")})}}';
SubsetCreatebyMDX(subsetall, MDX, 1);
SubsetElementDelete(D_PERIOD,subsetall,1);

#------------Remplissage des différents subsets----------#
SubSize = SubsetGetSize( D_PERIOD, subsetall);
cpt = SubSize;

#Init des années
Annee_Cal_1 = '';
Annee_Cal_2 = '';
cpt_cal_1 = 0;
cpt_cal_2 = 0;
Pos_Cal = 0;
Pos_Cal_2 = 0;
cpt_Cal_NIP = 0;
Annee_Cal_1_NIP = '';
Annee_Cal_2_NIP = '';
Annee_Cal_3_NIP = '';
cpt_cal_1_NIP = 0;
cpt_cal_2_NIP = 0;
cpt_cal_3_NIP = 0;

Annee_Fis_1 = '';
Annee_Fis_2 = '';
cpt_Fis_1 = 0;
cpt_Fis_2 = 0;
Pos_Fis = 0;
Pos_Fis_2 = 0;
cpt_fis_NIP = 0;
Annee_Fis_1_NIP = '';
Annee_Fis_2_NIP = '';
Annee_Fis_3_NIP = '';
cpt_fis_1_NIP = 0;
cpt_fis_2_NIP = 0;
cpt_fis_3_NIP = 0;

Annee_Cam_1 = '';
Annee_Cam_2 = '';
cpt_Cam_1 = 0;
cpt_Cam_2 = 0;
Pos_Cam = 0;
Pos_Cam_2 = 0;
cpt_Cam_NIP = 0;
Annee_Cam_1_NIP = '';
Annee_Cam_2_NIP = '';
Annee_Cam_3_NIP = '';
cpt_cam_1_NIP = 0;
cpt_cam_2_NIP = 0;
cpt_cam_3_NIP = 0;



#On parcourt tous les niveaux 0
While( cpt > 0);
	#On récupère l'élément et son index
	Elem = SubsetGetElementName( D_PERIOD, subsetall, cpt);
	Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));

	##############################     CALENDAR    ################################
	#On insère les éléments fins concernés dans Calendar et Calendar Input
	If( Index >= First_Cal_Month_Num & Index <= Last_Cal_Month_Num);
		Pos_Cal = Pos_Cal +1;
		SubsetElementInsert(D_PERIOD, subset_calendar, Elem, 1);
		SubsetElementInsert(D_PERIOD, subset_calendar_Input, Elem, 1);




        SubsetElementInsert(D_PERIOD, subset_calendar_month, Elem, 1);
        DimensionElementComponentAdd( D_PERIOD, 'subset_calendar', Elem, 1 );
        DimensionElementComponentAdd( D_PERIOD, 'subset_cal_fisc_camp', Elem, 1 );
        If(Index < StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
        	DimensionElementComponentAdd( D_PERIOD, 'subset_act_cal_fisc_camp', Elem, 1 );
        EndIf;
        If(Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')) );
        	#On insère rien pour l'instant, calcul des années parcourues
            ###Calcul Année complète prévisionnelle : pour les NIP
            #Pos_Cal_NIP = Pos_Cal_NIP +1;
            Annee_Cal_Elem_NIP = AttrS(D_PERIOD, Elem, 'Calendar_N');
            #Init de la première année parcourue.
			If(Annee_Cal_1_NIP @= '');
				Annee_Cal_1_NIP = Annee_Cal_Elem_NIP;
			EndIf;

			#On vérifie que la première année parcourue est complète
			If(Annee_Cal_1_NIP @= Annee_Cal_Elem_NIP);
				cpt_cal_1_NIP = cpt_cal_1_NIP + 1;
			Else;
				#Init de la deuxième année parcourue
				If(Annee_Cal_2_NIP @= '');
					Annee_Cal_2_NIP = Annee_Cal_Elem_NIP;
					#Pos_Cal_2_NIP = Pos_Cal_NIP;
				EndIf;

				#On vérifie que la deuxième année parcourue est complète
				If(Annee_Cal_2_NIP @= Annee_Cal_Elem_NIP);
					cpt_cal_2_NIP = cpt_cal_2_NIP + 1;
                Else;
					#Init de la deuxième année parcourue
					If(Annee_Cal_3_NIP @= '');
						Annee_Cal_3_NIP = Annee_Cal_Elem_NIP;
						#Pos_Cal_3_NIP = Pos_Cal_NIP;
					EndIf;

					#On vérifie que la deuxième année parcourue est complète
					If(Annee_Cal_3_NIP @= Annee_Cal_Elem_NIP);
						cpt_cal_3_NIP = cpt_cal_3_NIP + 1;
					EndIf;
				EndIf;
		
        	EndIf;
        EndIf;




        SubsetElementInsert(D_PERIOD, subset_cal, Elem, 1);
        SubsetElementInsert(D_PERIOD, subset_calendar_Input_NIP , Elem, 1);
		SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV , Elem, 1);



		Annee_Cal_Elem = AttrS(D_PERIOD, Elem, 'Calendar_N');

		#Init de la première année parcourue.
		If(Annee_Cal_1 @= '');
			Annee_Cal_1 = Annee_Cal_Elem;
		EndIf;


		#On vérifie que la première année parcourue est complète
		If(Annee_Cal_1 @= Annee_Cal_Elem);
			cpt_cal_1 = cpt_cal_1 + 1;
		Else;
			#Init de la deuxième année parcourue
			If(Annee_Cal_2 @= '');
				Annee_Cal_2 = Annee_Cal_Elem;
				Pos_Cal_2 = Pos_Cal;
			EndIf;

			#On vérifie que la deuxième année parcourue est complète
			If(Annee_Cal_2 @= Annee_Cal_Elem);
				cpt_cal_2 = cpt_cal_2 + 1;
			EndIf;
		EndIf;	
		
	EndIf;


	##############################    FIN  CALENDAR    ################################


	##############################     FISCAL    ################################
	#On insère les éléments fins concernés dans Fiscal et Fiscal Input
	If( Index >= First_Fis_Month_Num & Index <= Last_Fis_Month_Num);
		Pos_Fis = Pos_Fis +1;
		SubsetElementInsert(D_PERIOD, subset_Fiscal, Elem, 1);
		SubsetElementInsert(D_PERIOD, subset_Fiscal_Input, Elem, 1);
        SubsetElementInsert(D_PERIOD, subset_fiscal_month, Elem, 1);
        DimensionElementComponentAdd( D_PERIOD, 'subset_fiscal', Elem, 1 );
        DimensionElementComponentAdd( D_PERIOD, 'subset_cal_fisc_camp', Elem, 1 );
        If(Index < StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
        	DimensionElementComponentAdd( D_PERIOD, 'subset_act_cal_fisc_camp', Elem, 1 );
        EndIf;
        If(Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')) );
        	#On insère rien pour l'instant, calcul des années parcourues
            ###Calcul Année complète prévisionnelle : pour les NIP
           
            Annee_Fis_Elem_NIP = AttrS(D_PERIOD, Elem, 'FISC_N');
            #Init de la première année parcourue.
			If(Annee_Fis_1_NIP @= '');
				Annee_Fis_1_NIP = Annee_Fis_Elem_NIP;
			EndIf;

			#On vérifie que la première année parcourue est complète
			If(Annee_Fis_1_NIP @= Annee_Fis_Elem_NIP);
				cpt_fis_1_NIP = cpt_fis_1_NIP + 1;
			Else;
				#Init de la deuxième année parcourue
				If(Annee_Fis_2_NIP @= '');
					Annee_Fis_2_NIP = Annee_Fis_Elem_NIP;
				EndIf;

				#On vérifie que la deuxième année parcourue est complète
				If(Annee_Fis_2_NIP @= Annee_Fis_Elem_NIP);
					cpt_fis_2_NIP = cpt_fis_2_NIP + 1;
                Else;
					#Init de la deuxième année parcourue
					If(Annee_Fis_3_NIP @= '');
						Annee_Fis_3_NIP = Annee_Fis_Elem_NIP;
					EndIf;

					#On vérifie que la deuxième année parcourue est complète
					If(Annee_Fis_3_NIP @= Annee_Fis_Elem_NIP);
						cpt_fis_3_NIP = cpt_fis_3_NIP + 1;
					EndIf;
				EndIf;
		
        	EndIf;
        EndIf;
        SubsetElementInsert(D_PERIOD, subset_Fisc, Elem, 1);
		SubsetElementInsert(D_PERIOD, subset_fiscal_Input_NIP, Elem, 1);
		Annee_Fis_Elem = AttrS(D_PERIOD, Elem, 'FISC_N');
        
		#Init de la première année parcourue.
		If(Annee_Fis_1 @= '');
			Annee_Fis_1 = Annee_Fis_Elem;
		EndIf;

		#On vérifie que la première année parcourue est complète
		If(Annee_Fis_1 @= Annee_Fis_Elem);
			cpt_Fis_1 = cpt_Fis_1 + 1;
		Else;
			#Init de la deuxième année parcourue
			If(Annee_Fis_2 @= '');
				Annee_Fis_2 = Annee_Fis_Elem;
				Pos_Fis_2 = Pos_Fis;
			EndIf;

			#On vérifie que la deuxième année parcourue est complète
			If(Annee_Fis_2 @= Annee_Fis_Elem);
				cpt_Fis_2 = cpt_Fis_2 + 1;
			EndIf;
		EndIf;	
		
	EndIf;

	##############################    FIN  FISCAL    ################################

	##############################     CAMPAIGN    ################################
	#On insère les éléments fins concernés dans Campaign et Campaign Input
	If( Index >= First_Cam_Month_Num & Index <= Last_Cam_Month_Num);
		Pos_Cam = Pos_Cam +1;
		SubsetElementInsert(D_PERIOD, subset_Campaign, Elem, 1);
		SubsetElementInsert(D_PERIOD, subset_Campaign_Input, Elem, 1);
        SubsetElementInsert(D_PERIOD, subset_campaign_month, Elem, 1);
        DimensionElementComponentAdd( D_PERIOD, 'subset_campaign', Elem, 1 );
       	DimensionElementComponentAdd( D_PERIOD, 'subset_cal_fisc_camp', Elem, 1 );
        If(Index < StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
        	DimensionElementComponentAdd( D_PERIOD, 'subset_act_cal_fisc_camp', Elem, 1 );
        EndIf;
        If(Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')) );
        	#On insère rien pour l'instant, calcul des années parcourues
            ###Calcul Année complète prévisionnelle : pour les NIP
            
            Annee_Cam_Elem_NIP = AttrS(D_PERIOD, Elem, 'Campaign_N');
            #Init de la première année parcourue.
			If(Annee_Cam_1_NIP @= '');
				Annee_Cam_1_NIP = Annee_Cam_Elem_NIP;
			EndIf;

			#On vérifie que la première année parcourue est complète
			If(Annee_Cam_1_NIP @= Annee_Cam_Elem_NIP);
				cpt_cam_1_NIP = cpt_cam_1_NIP + 1;
			Else;
				#Init de la deuxième année parcourue
				If(Annee_Cam_2_NIP @= '');
					Annee_Cam_2_NIP = Annee_Cam_Elem_NIP;
				EndIf;

				#On vérifie que la deuxième année parcourue est complète
				If(Annee_Cam_2_NIP @= Annee_Cam_Elem_NIP);
					cpt_cam_2_NIP = cpt_cam_2_NIP + 1;
                Else;
					#Init de la deuxième année parcourue
					If(Annee_Cam_3_NIP @= '');
						Annee_Cam_3_NIP = Annee_Cam_Elem_NIP;
					EndIf;

					#On vérifie que la deuxième année parcourue est complète
					If(Annee_Cam_3_NIP @= Annee_Cam_Elem_NIP);
						cpt_cam_3_NIP = cpt_cam_3_NIP + 1;
					EndIf;
				EndIf;
		
        	EndIf;
        EndIf;
        SubsetElementInsert(D_PERIOD, subset_Camp, Elem, 1);
		SubsetElementInsert(D_PERIOD, subset_campaign_Input_NIP, Elem, 1);
		Annee_Cam_Elem = AttrS(D_PERIOD, Elem, 'Campaign_N');

		#Init de la première année parcourue.
		If(Annee_Cam_1 @= '');
			Annee_Cam_1 = Annee_Cam_Elem;
		EndIf;

		#On vérifie que la première année parcourue est complète
		If(Annee_Cam_1 @= Annee_Cam_Elem);
			cpt_Cam_1 = cpt_Cam_1 + 1;
		Else;
        #Init de la deuxième année parcourue
			If(Annee_Cam_2 @= '');
				Annee_Cam_2 = Annee_Cam_Elem;
				Pos_Cam_2 = Pos_Cam;
			EndIf;

			#On vérifie que la deuxième année parcourue est complète
			If(Annee_Cam_2 @= Annee_Cam_Elem);
				cpt_Cam_2 = cpt_Cam_2 + 1;
			EndIf;
		EndIf;	
		
	EndIf;

	##############################    FIN  CAMPAIGN   ################################

	#Incrémentation du compteur while sur subsetall
	cpt = cpt - 1;
End;


##############################     CALENDAR    ################################
#On ajoute la conso si la première année est complète
SubCalSize =SubsetGetSize(D_PERIOD, subset_calendar);

#Subset NIP : Si l'année est complète, on suppr les éléments fins + construction du subset dans la boucle while

If(cpt_cal_1 = 12);
	SubsetElementInsert(D_PERIOD, subset_calendar, Annee_Cal_1, SubCalSize - 11);
    SubsetElementInsert(D_PERIOD, subset_cal, Annee_Cal_1, SubCalSize - 11);
	SubsetElementInsert(D_PERIOD, subset_calendar_Input, Annee_Cal_1, SubCalSize - 11);
	SubsetElementInsert(D_PERIOD, subset_calendar_Input, Annee_Cal_1|' Input', SubCalSize - 11);

EndIf;

#On ajoute la conso si la deuxième année est complète
If(cpt_cal_2 = 12);
	Position = SubCalSize - Pos_Cal_2 - 10;
	SubsetElementInsert(D_PERIOD, subset_calendar, Annee_Cal_2, Position);
    SubsetElementInsert(D_PERIOD, subset_cal, Annee_Cal_2, Position);
	SubsetElementInsert(D_PERIOD, subset_calendar_Input, Annee_Cal_2, Position);
	SubsetElementInsert(D_PERIOD, subset_calendar_Input, Annee_Cal_2|' Input', Position);
   
EndIf;


#Construction de Calendar Input NIP

If(cpt_cal_1_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_calendar_Input_NIP, Annee_Cal_1_NIP | ' Input', 1);


    #On complète le subset RPP CPV en faisant attention aux doublons
    		Elem = Annee_Cal_1_NIP | ' Input';
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_Cal_1_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );

	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_Cal_1_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Cal_Month_Num & Index <= Last_Cal_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_calendar_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;

If(cpt_cal_2_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_calendar_Input_NIP, Annee_Cal_2_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
    		Elem = Annee_Cal_2_NIP | ' Input';
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_Cal_2_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );
	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_Cal_2_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Cal_Month_Num & Index <= Last_Cal_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_calendar_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;

If(cpt_cal_3_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_calendar_Input_NIP, Annee_Cal_3_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
    		Elem = Annee_Cal_3_NIP | ' Input';
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_Cal_3_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );
	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_Cal_3_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));


        If(Index >= First_Cal_Month_Num & Index <= Last_Cal_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_calendar_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;    
SubsetDestroy( D_PERIOD, 'subset_prov' );

##############################    FIN  CALENDAR    ################################
	
##############################    FISCAL    ################################
#On ajoute la conso si la première année est complète
SubfisSize =SubsetGetSize(D_PERIOD, subset_fiscal);

#Subset NIP : Si l'année est complète, on suppr les éléments fins + construction du subset dans la boucle while

If(cpt_fis_1 = 12);
	SubsetElementInsert(D_PERIOD, subset_fiscal, Annee_fis_1, SubfisSize - 11);
    SubsetElementInsert(D_PERIOD, subset_fisc, Annee_fis_1, SubfisSize - 11);
	SubsetElementInsert(D_PERIOD, subset_fiscal_Input, Annee_fis_1, SubfisSize - 11);
	SubsetElementInsert(D_PERIOD, subset_fiscal_Input, Annee_fis_1|' Input', SubfisSize - 11);
    
EndIf;

#On ajoute la conso si la deuxième année est complète
If(cpt_fis_2 = 12);
	Position = SubfisSize - Pos_fis_2 - 10;
	SubsetElementInsert(D_PERIOD, subset_fiscal, Annee_fis_2, Position);
    SubsetElementInsert(D_PERIOD, subset_fisc, Annee_fis_2, Position);
	SubsetElementInsert(D_PERIOD, subset_fiscal_Input, Annee_fis_2, Position);
	SubsetElementInsert(D_PERIOD, subset_fiscal_Input, Annee_fis_2|' Input', Position);

EndIf;


#Construction de fiscal Input NIP

#Construction de Calendar Input NIP
If(cpt_fis_1_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_fiscal_Input_NIP, Annee_fis_1_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
			Elem = Annee_fis_1_NIP | ' Input';
            If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_fis_1_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );

	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_fis_1_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Fis_Month_Num & Index <= Last_Fis_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_fiscal_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;

If(cpt_fis_2_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_fiscal_Input_NIP, Annee_fis_2_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
			Elem = Annee_fis_2_NIP | ' Input';
            
            If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_fis_2_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );
	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_fis_2_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Fis_Month_Num & Index <= Last_Fis_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_fiscal_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;

If(cpt_fis_3_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_fiscal_Input_NIP, Annee_fis_3_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
			Elem = Annee_fis_3_NIP | ' Input';
            If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_fis_3_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );
	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_fis_3_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Fis_Month_Num & Index <= Last_Fis_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_fiscal_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;    
SubsetDestroy( D_PERIOD, 'subset_prov' );


##############################    FIN FISCAL    ################################


##############################    CAMPAIGN    ################################
#On ajoute la conso si la première année est complète

SubCamSize =SubsetGetSize(D_PERIOD, subset_Campaign);

#Subset NIP : Si l'année est complète, on suppr les éléments fins + construction du subset dans la boucle while

If(cpt_Cam_1 = 12);
	SubsetElementInsert(D_PERIOD, subset_Campaign, Annee_Cam_1, SubCamSize - 11);
    SubsetElementInsert(D_PERIOD, subset_Camp, Annee_Cam_1, SubCamSize - 11);
	SubsetElementInsert(D_PERIOD, subset_Campaign_Input, Annee_Cam_1, SubCamSize - 11);
	SubsetElementInsert(D_PERIOD, subset_Campaign_Input, Annee_Cam_1|' Input', SubCamSize - 11);

EndIf;

#On ajoute la conso si la deuxième année est complète
If(cpt_Cam_2 = 12);
	Position = SubCamSize - Pos_Cam_2 - 10;
	SubsetElementInsert(D_PERIOD, subset_Campaign, Annee_Cam_2, Position);
    SubsetElementInsert(D_PERIOD, subset_Camp, Annee_Cam_2, Position);
	SubsetElementInsert(D_PERIOD, subset_Campaign_Input, Annee_Cam_2, Position);
	SubsetElementInsert(D_PERIOD, subset_Campaign_Input, Annee_Cam_2|' Input', Position);

EndIf;

#Construction de Campaign Input NIP

#Construction de Calendar Input NIP
If(cpt_cam_1_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_campaign_Input_NIP, Annee_Cam_1_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
			Elem = Annee_Cam_1_NIP | ' Input';
            If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_Cam_1_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );

	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_Cam_1_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Cam_Month_Num & Index <= Last_Cam_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_campaign_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;

If(cpt_cam_2_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_campaign_Input_NIP, Annee_Cam_2_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
			Elem = Annee_Cam_2_NIP | ' Input';
            If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_Cam_2_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );
	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_Cam_2_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Cam_Month_Num & Index <= Last_Cam_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_campaign_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;

If(cpt_cam_3_NIP = 12);
	#SubsetElementInsert(D_PERIOD, subset_campaign_Input_NIP, Annee_Cam_3_NIP | ' Input', 1);
    
    #On complète le subset RPP CPV en faisant attention aux doublons
			Elem = Annee_Cam_3_NIP | ' Input';
            If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
ElseIf(Annee_Cam_3_NIP @<> '');
	SubsetDestroy( D_PERIOD, 'subset_prov' );
	MDX_PROV = '{{[1_G_PERIOD].[N/A PERIOD]},{TM1FILTERBYLEVEL({DESCENDANTS(['| Annee_Cam_3_NIP | '])}, 0)}}';
    SubsetCreatebyMDX( 'subset_prov', MDX_PROV);
    SubsetElementDelete( D_PERIOD, 'subset_prov', 1 );
    subset_prov_size = SubsetGetSize( D_PERIOD, 'subset_prov');
    cpt_prov = 0;
    while(cpt_prov < subset_prov_size);
    	Elem = SubsetGetElementName( D_PERIOD, 'subset_prov', subset_prov_size );
        Index = StringToNumber(AttrS(D_PERIOD, Elem, 'Index'));
        If(Index >= First_Cam_Month_Num & Index <= Last_Cam_Month_Num & Index >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
			#SubsetElementInsert( D_PERIOD, subset_campaign_Input_NIP, Elem, 1);
            
            #On complète le subset RPP CPV en faisant attention aux doublons
			If( SubsetElementGetIndex(D_PERIOD, subset_input_RPP_CPV, Elem, 1) = 0 );
    			#SubsetElementInsert(D_PERIOD, subset_input_RPP_CPV, Elem, 1);
			EndIf;
			Attr_Elem = AttrS(D_PERIOD, Elem, 'Caption');
			If(Attr_Elem @<> '');
				Elem = Attr_Elem;
			EndIf;
			If(SCAN('Input',Elem)<>0);
				Elem = SUBST(Elem,1,SCAN('Input',Elem)-1);
			EndIf;
			If( SubsetElementGetIndex(D_PERIOD, subset_RPP_CPV, Elem, 1) = 0 );
				SubsetElementInsert(D_PERIOD, subset_RPP_CPV, Elem, 1);
			EndIf;
		EndIf;
		subset_prov_size = subset_prov_size -1;   
    End;
EndIf;    
SubsetDestroy( D_PERIOD, 'subset_prov' );

##############################    FIN CAMPAIGN    ################################


SubsetElementInsert( D_PERIOD, 'Cal', 'N/A PERIOD', 1 );
SubsetElementInsert( D_PERIOD, 'Camp', 'N/A PERIOD', 1 );
SubsetElementInsert( D_PERIOD, 'Fisc', 'N/A PERIOD', 1 );


##############################    CURRENT PHASE PERIODS    ################################
Subset_Curr_Ph_Periods = 'Current Phase Periods';
SubsetDeleteAllElements( D_PERIOD, Subset_Curr_Ph_Periods);

Subset_Curr_Ph_Periods_Sup = 'Prev Periods';
SubsetDeleteAllElements( D_PERIOD, Subset_Curr_Ph_Periods_Sup);


#----------------Définition du premier mois du subset-------------#
First_Month = First_Cal_Month_Num;
If(First_Cam_Month_Num < First_Month);
	First_Month = First_Cam_Month_Num;
EndIf;
If(First_Fis_Month_Num < First_Month);
	First_Month = First_Fis_Month_Num;
EndIf;

#----------------Définition du premier mois du subset-------------#
Last_Month = Last_Cal_Month_Num;
If(Last_Cam_Month_Num > Last_Month);
	Last_Month = Last_Cam_Month_Num;
EndIf;
If(Last_Fis_Month_Num > Last_Month);
	Last_Month = Last_Fis_Month_Num;
EndIf;

month = Subsize;
While( month >= 1);
	Current_Month = SubsetGetElementName( D_PERIOD, subsetall, month );
    Current_Month_Num = StringToNumber(AttrS(D_PERIOD, Current_Month, 'Index'));
	If(Current_Month_Num >= First_Month & Current_Month_Num <= Last_Month);
    	SubsetElementInsert(D_PERIOD, Subset_Curr_Ph_Periods, Current_Month, 1 );
    EndIf;
	month = month - 1;
End;

#Création subset regroupant l'ensemble des périodes supérieures au premier mois de simulation
cur_month = Subsize;
While( cur_month >= 1);
	Current_Month = SubsetGetElementName( D_PERIOD, subsetall, cur_month );
    Current_Month_Num = StringToNumber(AttrS(D_PERIOD, Current_Month, 'Index'));
    
    #Définition du premier mois et dernier mois (tous types d'année confondus) pour une phase
    If(Current_Month_Num = First_Month);
    	AttrPutS(Current_Month, '1_G_CURRENT_PHASE', P_PHASE, 'First Period');
    ElseIf(Current_Month_Num = Last_Month);
    	AttrPutS( Current_Month, '1_G_CURRENT_PHASE', P_PHASE, 'Last Period');
    EndIf;
    
	If(Current_Month_Num >= First_Month & Current_Month_Num <= Last_Month & Current_Month_Num >= StringToNumber(Attrs(D_PERIOD, First_sim_month, 'Index')));
    	SubsetElementInsert(D_PERIOD, Subset_Curr_Ph_Periods_Sup, Current_Month, 1 );
    EndIf;
	cur_month = cur_month - 1;
End;

################################ 1_G_PHASE - subset ###################################

SubsetDeleteAllElements(D_PHASE, subset_current_phase);

Phase_En_Cours = CellGetS(C_zPARAM, Phase_zPARAM, Val);

SubsetElementInsert(D_PHASE, subset_current_phase, Phase_En_Cours,1); 


################################ 1_G_PHASE - zPARAM ###################################

SubsetDestroy('}Clients','Clients');

MDX_Client = 'TM1FILTERBYLEVEL({TM1SUBSETALL([}Clients])},0)';
SubsetCreateByMDX('Clients', MDX_Client);
SubClientSize = SubsetGetSize('}Clients','Clients');

cpt_client = 1;
While(cpt_client <= SubClientSize);
	Elem = SubsetGetElementName('}Clients', 'Clients', cpt_client);
	CellPutS(Phase_En_Cours, C_zSELECT, Elem, 'Current Phase');
	cpt_client = cpt_client +1;
End;

SubsetDestroy('}Clients','Clients');
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion