#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#############################################################################################################################
#                                               DESCRIPTION DU PROCESSUS                                                    #
#                                                                                                                           #
# Date :   13/05/2019                                                                                                       #
#                                                                                                                           #
# Fait par :   Ann BESNARD																								    #
#                                                                                                                           #
# Action : Traite le Cas n°2 du Switch Article : un planning material devient material d'un autre planning material         #
#			et n'existe donc plus en tant que Planning Material, il faut transférer ses données sur le nouveau planning     #
#			material associé au material et supprimer celui ci																#             
#																															#
#############################################################################################################################

Process_MAJ_Flag = 'SLS_CAL_DIM_SLS_MATERIAL_PLAN_FLAG_SWITCH_ARTICLE';
Process_SWITCH_PRICE = 'SLS_CAL_CUBS_SWITCH_ARTICLE_PRICE';
Process_SWITCH_VOL = 'SLS_CAL_CUBS_SWITCH_ARTICLE_VOL';
Process_SWITCH_PRICE_PRICE = 'SLS_CAL_CUB_SLS_PRICE_SWITCH_ARTICLE_PRICE';
PROCESS_SWITCH_ASSIGN_VOL = 'SLS_CAL_CUB_SLS_ASSIGN_SWITCH_ARTICLE_VOL';
PROCESS_SWITCH_ASSIGN_PRICE = 'SLS_CAL_CUB_SLS_ASSIGN_SWITCH_ARTICLE_PRICE';
PROCESS_SWITCH_FR_COST_PLAN_PRICE = 'SLS_CAL_CUB_SLS_FR_COST_PLAN_SWITCH_ARTICLE_PRICE';
#Process_DEL_ARTICLE = 'SLS_DEL_DIM_SLS_MATERIAL_PLAN_SWITCH_ARTICLE_ARTICLE_SOURCE';



#On identifie les PM à switcher
ExecuteProcess(Process_MAJ_Flag);


#On switch Init
ExecuteProcess(Process_SWITCH_PRICE, 'P_Cube', 'SLS_INIT', 'P_Current_Phase_Period',1);
ExecuteProcess(Process_SWITCH_VOL, 'P_Cube', 'SLS_INIT', 'P_Current_Phase_Period',1);


#On switch Sales Plan
ExecuteProcess(Process_SWITCH_PRICE, 'P_Cube', 'SLS_SALES_PLAN', 'P_Current_Phase_Period',1);
ExecuteProcess(Process_SWITCH_VOL, 'P_Cube', 'SLS_SALES_PLAN', 'P_Current_Phase_Period',1);


#On switch Price
ExecuteProcess(Process_SWITCH_PRICE_PRICE);


#On switch Assign

#On switch Prices
ExecuteProcess(PROCESS_SWITCH_ASSIGN_PRICE);
#Assigned Vol
ExecuteProcess(Process_SWITCH_ASSIGN_VOL);
#Sales Vol
ExecuteProcess(Process_SWITCH_VOL, 'P_Cube', 'SLS_ASSIGN', 'P_Current_Phase_Period',1);

#On switch Fr Cost Plan
ExecuteProcess(PROCESS_SWITCH_FR_COST_PLAN_PRICE);
ExecuteProcess ( 'SLS_CAL_CUB_SLS_FR_COST_PLAN_SWITCH_ARTICLE_VALO' ) ;
ExecuteProcess(Process_SWITCH_VOL, 'P_Cube', 'SLS_FR_COST_PLAN', 'P_Current_Phase_Period',1);


#On switch Reporting
ExecuteProcess( 'SLS_CAL_CUB_SLS_REPORTING_SWITCH_ARTICLE_VALO' ) ;
ExecuteProcess(Process_SWITCH_PRICE, 'P_Cube', 'SLS_REPORTING', 'P_Current_Phase_Period',0);
ExecuteProcess(Process_SWITCH_VOL, 'P_Cube', 'SLS_REPORTING', 'P_Current_Phase_Period',0);


#On supprime l'article source
#ExecuteProcess(Process_DEL_ARTICLE);

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion