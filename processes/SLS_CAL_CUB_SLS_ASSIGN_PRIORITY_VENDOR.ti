#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


##############################################################################
#                         DESCRIPTION DU PROCESSUS                           #
#                                                                            #
# Date :   28/02/2023                                                        #
#                                                                            #
# Fait par :    ELH 		                                       	         #
#                                                                            #
# Action : Mise à jour des Priority Vendor              				  	 #
#           																 #
#																			 #
##############################################################################

#===============================#
#	Déclaration des variables	#
#===============================#

#--------------------Variables globales--------------------#
vDATE = today(1) | ' ' | TIME;
vLocalTime =  '_' | today(1) | '_' | subst(TIME,1,2) | 'h' | subst(TIME,4,2);
vTimeStart_Sec =  StringToNumber(TimSt (Now, '\h'))*3600 +StringToNumber(TimSt (Now, '\i'))*60+StringToNumber(TimSt (Now, '\s'));
vUser_Name = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');
vUSER = SUBST(vUser_Name, SCAN('/',vUser_Name)+1, 100);
vPRO_NAME = GetProcessName();
vSTATUS='KO';
vNb_lines_recorded=0;
vNb_lines_recorded_Metadata=0;
vNb_lines_recorded_Data=0;
vNb_lines=0;
err_prolog=0;
message_err_prolog='';
vClient = AttrS('}Clients',TM1User,'}TM1_DefaultDisplayValue');

#--------------------Cubes--------------------#
C_Cube_Source = 'SLS_ASSIGN' ;  
#--------------------Vues--------------------#
view_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
view_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
#--------------------Sous-ensembles--------------------#
subset_copy = 'z_copy_' | vUSER |'_' | vPRO_NAME;
subset_erase = 'z_erase_' | vUSER |'_' | vPRO_NAME;
#--------------------Déclaration de la vue source--------------------#
DataSourceNameForServer=C_Cube_Source;
DatasourceCubeview=view_copy;


As_Temporary = 1 ; 
#--------------------Création des objets Source-----------------#

# VRT : Mise en place contrat indexé
D_Q_HQ = 'SLS_Q_HQ' ;
# Fin VRT 

ViewCreate(C_Cube_Source ,view_Copy, As_Temporary );

# VRT : Mise en place contrat indexé
# SLS_Q_HQ
MDX_Q_HQ = 'TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_Q_HQ])},0)';
SubsetCreatebyMDX( subset_copy, MDX_Q_HQ, As_Temporary);
ViewSubsetAssign(C_Cube_Source,view_copy, D_Q_HQ,subset_copy);
# Fin VRT 

# 1_G_PERIOD
subsetcreate('1_G_PERIOD',subset_copy ,As_Temporary);
SubsetElementInsert('1_G_PERIOD', subset_copy, 'N/A PERIOD' , 1);
ViewSubsetAssign(C_Cube_Source,view_copy, '1_G_PERIOD',subset_copy);


# SLS_ASSIGN_IND
subsetcreate('SLS_ASSIGN_IND',subset_copy ,As_Temporary);
SubsetElementInsert('SLS_ASSIGN_IND', subset_copy, 'SHIP_PT' , 1);
ViewSubsetAssign(C_Cube_Source,view_copy, 'SLS_ASSIGN_IND',subset_copy);


#--------------------Suppression des cellules vides, consolidées, calculées--------------------#
ViewSetSkipRuleValues(C_Cube_Source,view_copy,1);
ViewSetSkipCalcs(C_Cube_Source,view_copy, 1);
ViewSetSkipZeroes(C_Cube_Source,view_copy, 1);

#--------------------Création des objets Cible-----------------#

ViewCreate(C_Cube_Source ,view_erase, As_Temporary );

# VRT : Mise en place contrat indexé
# SLS_Q_HQ
MDX_Q_HQ = 'TM1FILTERBYLEVEL({TM1SUBSETALL([SLS_Q_HQ])},0)';
SubsetCreatebyMDX( subset_erase, MDX_Q_HQ, As_Temporary);
ViewSubsetAssign(C_Cube_Source,view_erase, D_Q_HQ,subset_erase);
# Fin VRT 

# 1_G_PERIOD
subsetcreate('1_G_PERIOD',subset_erase ,As_Temporary);
SubsetElementInsert('1_G_PERIOD', subset_erase, 'N/A PERIOD' , 1);
ViewSubsetAssign(C_Cube_Source,view_erase, '1_G_PERIOD',subset_erase);


# SLS_ASSIGN_IND
subsetcreate('SLS_ASSIGN_IND',subset_erase ,As_Temporary);
SubsetElementInsert('SLS_ASSIGN_IND', subset_erase, 'Vendor Priority' , 1);
ViewSubsetAssign(C_Cube_Source,view_erase, 'SLS_ASSIGN_IND',subset_erase);

ViewZeroOut ( C_Cube_Source,view_erase ) ;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

# Récupération de l'attribut 'Vendor Priority' de la dimension SLS_CUSTOMER
sFilter = ATTRS ( 'SLS_CUSTOMER' ,  v_SLS_CUSTOMER , 'Vendor Priority' ) ;

# Récupération du séparateur de Priority Vendor (séparateur = |)
nSepPos = SCAN( '|', sFilter);
# Récupération du premier Priority VendorVendor Priority
IF ( nSepPos > 0) ;
 sToken = TRIM( SUBST( sFilter, 1, nSepPos - 1));
 # Si le Priority Vendor apparatient bien à la dimensions SLS_VENDOR
 IF (DIMIX('SLS_VENDOR', sToken) <> 0);
  sCaption = ATTRS('SLS_VENDOR', sToken, 'Code - Caption');
  CellPutS ( sCaption , C_Cube_Source , v_G_current_Phase , v_SLS_VERSION , v_Q_HQ , v_G_Period , v_G_SALES_ORG , v_G_DISTRIB_CHANNEL , v_SLS_MATERIAL_PLAN , v_SLS_CUSTOMER , v_G_Line , 'Vendor Priority' ) ;
 ENDIF; 
ENDIF ;              
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion